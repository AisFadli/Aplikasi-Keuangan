<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FinanceFlow Pro - Sistem Akuntansi Bisnis</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#0f172a',
                        secondary: '#1e293b',
                        accent: '#3b82f6',
                        success: '#10b981',
                        warning: '#f59e0b',
                        danger: '#ef4444'
                    }
                }
            }
        }
    </script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        body { font-family: 'Inter', sans-serif; }
        .glass-effect {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .card-hover {
            transition: all 0.3s ease;
        }
        .card-hover:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
    </style>
</head>
<body class="bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 min-h-screen text-white">
    <!-- Navigation -->
    <nav class="glass-effect p-4 mb-4 md:mb-8">
        <div class="max-w-7xl mx-auto">
            <div class="flex justify-between items-center mb-4 md:mb-0">
                <div class="flex items-center space-x-3">
                    <div class="w-8 h-8 md:w-10 md:h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                        <span class="text-white font-bold text-lg md:text-xl">F</span>
                    </div>
                    <h1 class="text-lg md:text-2xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
                        FinanceFlow Pro
                    </h1>
                </div>
                <button onclick="toggleMobileMenu()" class="md:hidden p-2 rounded-lg hover:bg-white/10 transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                    </svg>
                </button>
            </div>
            <div id="mobileMenu" class="hidden md:flex md:justify-center">
                <div class="flex flex-col md:flex-row space-y-2 md:space-y-0 md:space-x-2 lg:space-x-4 w-full md:w-auto">
                    <button onclick="showSection('dashboard')" class="nav-btn px-3 py-2 md:px-4 rounded-lg bg-accent text-white hover:bg-blue-600 transition-colors text-sm md:text-base">Dashboard</button>
                    <button onclick="showSection('transactions')" class="nav-btn px-3 py-2 md:px-4 rounded-lg hover:bg-white/10 transition-colors text-sm md:text-base">Transaksi</button>
                    <button onclick="showSection('ledger')" class="nav-btn px-3 py-2 md:px-4 rounded-lg hover:bg-white/10 transition-colors text-sm md:text-base">Buku Besar</button>
                    <button onclick="showSection('reconciliation')" class="nav-btn px-3 py-2 md:px-4 rounded-lg hover:bg-white/10 transition-colors text-sm md:text-base">Rekonsiliasi Bank</button>
                    <button onclick="showSection('assets')" class="nav-btn px-3 py-2 md:px-4 rounded-lg hover:bg-white/10 transition-colors text-sm md:text-base">Aset</button>
                    <button onclick="showSection('reports')" class="nav-btn px-3 py-2 md:px-4 rounded-lg hover:bg-white/10 transition-colors text-sm md:text-base">Laporan</button>
                    <button onclick="showSection('settings')" class="nav-btn px-3 py-2 md:px-4 rounded-lg hover:bg-white/10 transition-colors text-sm md:text-base">Pengaturan</button>
                </div>
            </div>
        </div>
    </nav>

    <div class="max-w-7xl mx-auto px-2 sm:px-4 lg:px-6">
        <!-- Dashboard Section -->
        <div id="dashboard" class="section">
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 lg:gap-6 mb-6 lg:mb-8">
                <div class="glass-effect p-4 sm:p-6 rounded-xl card-hover">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-gray-300 text-xs sm:text-sm">Total Pendapatan</p>
                            <p class="text-lg sm:text-2xl font-bold text-success" id="totalRevenue">Rp 0</p>
                        </div>
                        <div class="w-10 h-10 sm:w-12 sm:h-12 bg-success/20 rounded-lg flex items-center justify-center">
                            <span class="text-success text-lg sm:text-xl">üìà</span>
                        </div>
                    </div>
                </div>
                <div class="glass-effect p-4 sm:p-6 rounded-xl card-hover">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-gray-300 text-xs sm:text-sm">Total Pengeluaran</p>
                            <p class="text-lg sm:text-2xl font-bold text-danger" id="totalExpense">Rp 0</p>
                        </div>
                        <div class="w-10 h-10 sm:w-12 sm:h-12 bg-danger/20 rounded-lg flex items-center justify-center">
                            <span class="text-danger text-lg sm:text-xl">üìâ</span>
                        </div>
                    </div>
                </div>
                <div class="glass-effect p-4 sm:p-6 rounded-xl card-hover">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-gray-300 text-xs sm:text-sm">Laba Bersih</p>
                            <p class="text-lg sm:text-2xl font-bold text-accent" id="netProfit">Rp 0</p>
                        </div>
                        <div class="w-10 h-10 sm:w-12 sm:h-12 bg-accent/20 rounded-lg flex items-center justify-center">
                            <span class="text-accent text-lg sm:text-xl">üí∞</span>
                        </div>
                    </div>
                </div>
                <div class="glass-effect p-4 sm:p-6 rounded-xl card-hover">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-gray-300 text-xs sm:text-sm">Total Aset</p>
                            <p class="text-lg sm:text-2xl font-bold text-warning" id="totalAssets">Rp 0</p>
                        </div>
                        <div class="w-10 h-10 sm:w-12 sm:h-12 bg-warning/20 rounded-lg flex items-center justify-center">
                            <span class="text-warning text-lg sm:text-xl">üè¢</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6">
                <div class="glass-effect p-4 sm:p-6 rounded-xl">
                    <h3 class="text-lg sm:text-xl font-semibold mb-4">Transaksi Terbaru</h3>
                    <div id="recentTransactions" class="space-y-3">
                        <p class="text-gray-400">Belum ada transaksi</p>
                    </div>
                </div>
                <div class="glass-effect p-4 sm:p-6 rounded-xl">
                    <h3 class="text-lg sm:text-xl font-semibold mb-4">Ringkasan Bulanan</h3>
                    <div class="space-y-4">
                        <div class="flex justify-between">
                            <span class="text-gray-300 text-sm sm:text-base">Penjualan Bulan Ini</span>
                            <span class="text-success font-semibold text-sm sm:text-base" id="monthlySales">Rp 0</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-300 text-sm sm:text-base">Biaya Bulan Ini</span>
                            <span class="text-danger font-semibold text-sm sm:text-base" id="monthlyCosts">Rp 0</span>
                        </div>
                        <div class="flex justify-between border-t border-gray-600 pt-2">
                            <span class="text-gray-300 font-semibold text-sm sm:text-base">Laba Bulan Ini</span>
                            <span class="text-accent font-bold text-sm sm:text-base" id="monthlyProfit">Rp 0</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Transactions Section -->
        <div id="transactions" class="section hidden">
            <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4 sm:mb-6 gap-3">
                <h2 class="text-xl sm:text-2xl lg:text-3xl font-bold">Pencatatan Transaksi</h2>
                <div class="flex flex-col sm:flex-row gap-2">
                    <button onclick="downloadTransactionTemplate()" class="bg-success hover:bg-green-600 px-4 py-2 sm:px-6 sm:py-3 rounded-lg font-semibold transition-colors text-sm sm:text-base">
                        üìä Download Template Excel
                    </button>
                    <button onclick="showBulkImportForm()" class="bg-warning hover:bg-yellow-600 px-4 py-2 sm:px-6 sm:py-3 rounded-lg font-semibold transition-colors text-sm sm:text-base">
                        üì§ Import Transaksi Masal
                    </button>
                    <button onclick="showTransactionForm()" class="bg-accent hover:bg-blue-600 px-4 py-2 sm:px-6 sm:py-3 rounded-lg font-semibold transition-colors text-sm sm:text-base">
                        + Tambah Transaksi
                    </button>
                </div>
            </div>

            <div class="glass-effect p-4 sm:p-6 rounded-xl mb-4 sm:mb-6">
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4">
                    <input type="date" id="filterDate" class="bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white placeholder-gray-400 text-sm sm:text-base">
                    <select id="filterType" class="bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                        <option value="">Semua Jenis</option>
                        <option value="income">Pendapatan</option>
                        <option value="expense">Pengeluaran</option>
                    </select>
                    <select id="filterAccount" class="bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                        <option value="">Semua Akun</option>
                    </select>
                    <button onclick="filterTransactions()" class="bg-accent hover:bg-blue-600 px-3 py-2 sm:px-4 rounded-lg transition-colors text-sm sm:text-base">Filter</button>
                </div>
            </div>

            <div class="glass-effect rounded-xl overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="w-full min-w-[600px]">
                        <thead class="bg-white/5">
                            <tr>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-left text-xs sm:text-sm">Tanggal</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-left text-xs sm:text-sm">Deskripsi</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-left text-xs sm:text-sm">Akun</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-left text-xs sm:text-sm">Debit</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-left text-xs sm:text-sm">Kredit</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-left text-xs sm:text-sm">Aksi</th>
                            </tr>
                        </thead>
                        <tbody id="transactionsList">
                            <tr>
                                <td colspan="6" class="px-3 py-6 sm:px-6 sm:py-8 text-center text-gray-400 text-sm">Belum ada transaksi</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Ledger Section -->
        <div id="ledger" class="section hidden">
            <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4 sm:mb-6 gap-3">
                <h2 class="text-xl sm:text-2xl lg:text-3xl font-bold">Buku Besar</h2>
                <div class="flex flex-col sm:flex-row gap-2">
                    <button onclick="exportLedger('account')" class="bg-success hover:bg-green-600 px-4 py-2 sm:px-6 sm:py-3 rounded-lg font-semibold transition-colors text-sm sm:text-base">
                        üìä Export per Akun
                    </button>
                    <button onclick="exportLedger('type')" class="bg-warning hover:bg-yellow-600 px-4 py-2 sm:px-6 sm:py-3 rounded-lg font-semibold transition-colors text-sm sm:text-base">
                        üìã Export per Jenis
                    </button>
                </div>
            </div>

            <!-- Filter Section -->
            <div class="glass-effect p-4 sm:p-6 rounded-xl mb-4 sm:mb-6">
                <h3 class="text-lg font-semibold mb-4">Filter Buku Besar</h3>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3 sm:gap-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">Cari Akun</label>
                        <input type="text" id="searchAccount" placeholder="Nama atau kode akun..." class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white placeholder-gray-400 text-sm sm:text-base">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Pilih Akun</label>
                        <select id="selectedAccount" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                            <option value="">Semua Akun</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Tanggal Awal</label>
                        <input type="date" id="ledgerStartDate" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Tanggal Akhir</label>
                        <input type="date" id="ledgerEndDate" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                    </div>
                    <div class="flex items-end">
                        <button onclick="filterLedger()" class="w-full bg-accent hover:bg-blue-600 px-3 py-2 sm:px-4 rounded-lg transition-colors text-sm sm:text-base">
                            üîç Filter
                        </button>
                    </div>
                </div>
            </div>

            <!-- Account Summary -->
            <div id="accountSummary" class="glass-effect p-4 sm:p-6 rounded-xl mb-4 sm:mb-6 hidden">
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div class="bg-white/5 p-4 rounded-lg">
                        <h4 class="text-sm font-medium text-gray-300 mb-1">Saldo Awal</h4>
                        <p class="text-lg font-bold" id="openingBalance">Rp 0</p>
                    </div>
                    <div class="bg-white/5 p-4 rounded-lg">
                        <h4 class="text-sm font-medium text-gray-300 mb-1">Total Debit</h4>
                        <p class="text-lg font-bold text-success" id="totalDebit">Rp 0</p>
                    </div>
                    <div class="bg-white/5 p-4 rounded-lg">
                        <h4 class="text-sm font-medium text-gray-300 mb-1">Total Kredit</h4>
                        <p class="text-lg font-bold text-danger" id="totalCredit">Rp 0</p>
                    </div>
                    <div class="bg-white/5 p-4 rounded-lg">
                        <h4 class="text-sm font-medium text-gray-300 mb-1">Saldo Akhir</h4>
                        <p class="text-lg font-bold text-accent" id="closingBalance">Rp 0</p>
                    </div>
                </div>
            </div>

            <!-- Ledger Table -->
            <div class="glass-effect rounded-xl overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="w-full min-w-[800px]">
                        <thead class="bg-white/5">
                            <tr>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-left text-xs sm:text-sm">Tanggal</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-left text-xs sm:text-sm">Deskripsi</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-left text-xs sm:text-sm">Akun</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-left text-xs sm:text-sm">Ref</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm">Debit</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm">Kredit</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm">Saldo</th>
                            </tr>
                        </thead>
                        <tbody id="ledgerEntries">
                            <tr>
                                <td colspan="7" class="px-3 py-6 sm:px-6 sm:py-8 text-center text-gray-400 text-sm">Pilih akun untuk melihat buku besar</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Bank Reconciliation Section -->
        <div id="reconciliation" class="section hidden">
            <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4 sm:mb-6 gap-3">
                <h2 class="text-xl sm:text-2xl lg:text-3xl font-bold">Rekonsiliasi Bank</h2>
                <div class="flex flex-col sm:flex-row gap-2">
                    <button onclick="downloadBankTemplate()" class="bg-success hover:bg-green-600 px-4 py-2 sm:px-6 sm:py-3 rounded-lg font-semibold transition-colors text-sm sm:text-base">
                        üìä Download Template Excel
                    </button>
                    <button onclick="showBankTransactionForm()" class="bg-accent hover:bg-blue-600 px-4 py-2 sm:px-6 sm:py-3 rounded-lg font-semibold transition-colors text-sm sm:text-base">
                        + Input Manual
                    </button>
                </div>
            </div>

            <!-- Bank Selection & Import -->
            <div class="glass-effect p-4 sm:p-6 rounded-xl mb-4 sm:mb-6">
                <h3 class="text-lg font-semibold mb-4">Pilih Akun Bank & Import Data</h3>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">Akun Bank</label>
                        <select id="bankAccount" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                            <option value="">Pilih Akun Bank</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Periode Rekonsiliasi</label>
                        <input type="month" id="reconciliationPeriod" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Import Mutasi Bank</label>
                        <input type="file" id="bankStatementFile" accept=".xlsx,.xls,.csv" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white text-sm sm:text-base">
                    </div>
                    <div class="flex items-end">
                        <button onclick="importBankStatement()" class="w-full bg-warning hover:bg-yellow-600 px-3 py-2 sm:px-4 rounded-lg transition-colors text-sm sm:text-base">
                            üì§ Import Data
                        </button>
                    </div>
                </div>
            </div>

            <!-- Reconciliation Summary -->
            <div id="reconciliationSummary" class="glass-effect p-4 sm:p-6 rounded-xl mb-4 sm:mb-6 hidden">
                <h3 class="text-lg font-semibold mb-4">Ringkasan Rekonsiliasi</h3>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div class="bg-white/5 p-4 rounded-lg">
                        <h4 class="text-sm font-medium text-gray-300 mb-1">Saldo Buku</h4>
                        <p class="text-lg font-bold text-accent" id="bookBalance">Rp 0</p>
                    </div>
                    <div class="bg-white/5 p-4 rounded-lg">
                        <h4 class="text-sm font-medium text-gray-300 mb-1">Saldo Bank</h4>
                        <p class="text-lg font-bold text-success" id="bankBalance">Rp 0</p>
                    </div>
                    <div class="bg-white/5 p-4 rounded-lg">
                        <h4 class="text-sm font-medium text-gray-300 mb-1">Selisih</h4>
                        <p class="text-lg font-bold text-warning" id="balanceDifference">Rp 0</p>
                    </div>
                    <div class="bg-white/5 p-4 rounded-lg">
                        <h4 class="text-sm font-medium text-gray-300 mb-1">Status</h4>
                        <p class="text-lg font-bold" id="reconciliationStatus">-</p>
                    </div>
                </div>
            </div>

            <!-- Bank Statement Data -->
            <div class="glass-effect p-4 sm:p-6 rounded-xl mb-4 sm:mb-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold">Data Mutasi Bank</h3>
                    <button onclick="clearBankData()" class="bg-danger hover:bg-red-600 px-3 py-2 rounded-lg text-sm transition-colors">
                        üóëÔ∏è Clear Data
                    </button>
                </div>
                <div class="overflow-x-auto">
                    <table class="w-full min-w-[800px]">
                        <thead class="bg-white/5">
                            <tr>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-left text-xs sm:text-sm">Tanggal</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-left text-xs sm:text-sm">Deskripsi</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm">Debit</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm">Kredit</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm">Saldo</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-center text-xs sm:text-sm">Status</th>
                                <th class="px-3 py-3 sm:px-6 sm:py-4 text-center text-xs sm:text-sm">Aksi</th>
                            </tr>
                        </thead>
                        <tbody id="bankStatementList">
                            <tr>
                                <td colspan="7" class="px-3 py-6 sm:px-6 sm:py-8 text-center text-gray-400 text-sm">Belum ada data mutasi bank</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Reconciliation Comparison -->
            <div class="glass-effect p-4 sm:p-6 rounded-xl">
                <h3 class="text-lg font-semibold mb-4">Perbandingan Transaksi</h3>
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <!-- Book Transactions -->
                    <div>
                        <h4 class="text-md font-medium mb-3 text-accent">Transaksi Buku (Belum Direkonsiliasi)</h4>
                        <div class="bg-white/5 rounded-lg max-h-80 overflow-y-auto">
                            <div id="bookTransactionsList" class="space-y-2 p-3">
                                <p class="text-gray-400 text-sm">Pilih akun bank untuk melihat transaksi</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Unmatched Bank Transactions -->
                    <div>
                        <h4 class="text-md font-medium mb-3 text-warning">Transaksi Bank (Belum Cocok)</h4>
                        <div class="bg-white/5 rounded-lg max-h-80 overflow-y-auto">
                            <div id="unmatchedBankList" class="space-y-2 p-3">
                                <p class="text-gray-400 text-sm">Import data mutasi bank terlebih dahulu</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Auto Match Button -->
                <div class="mt-6 text-center">
                    <button onclick="autoMatchTransactions()" class="bg-purple-600 hover:bg-purple-700 px-6 py-3 rounded-lg font-semibold transition-colors">
                        üîÑ Auto Match Transaksi
                    </button>
                </div>
            </div>
        </div>

        <!-- Assets Section -->
        <div id="assets" class="section hidden">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-3xl font-bold">Manajemen Aset</h2>
                <button onclick="showAssetForm()" class="bg-accent hover:bg-blue-600 px-6 py-3 rounded-lg font-semibold transition-colors">
                    + Tambah Aset
                </button>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                <div class="glass-effect p-6 rounded-xl">
                    <h3 class="text-lg font-semibold mb-2">Total Nilai Aset</h3>
                    <p class="text-2xl font-bold text-accent" id="totalAssetValue">Rp 0</p>
                </div>
                <div class="glass-effect p-6 rounded-xl">
                    <h3 class="text-lg font-semibold mb-2">Akumulasi Penyusutan</h3>
                    <p class="text-2xl font-bold text-warning" id="totalDepreciation">Rp 0</p>
                </div>
                <div class="glass-effect p-6 rounded-xl">
                    <h3 class="text-lg font-semibold mb-2">Nilai Buku Aset</h3>
                    <p class="text-2xl font-bold text-success" id="netAssetValue">Rp 0</p>
                </div>
            </div>

            <div class="glass-effect rounded-xl overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead class="bg-white/5">
                            <tr>
                                <th class="px-6 py-4 text-left">Nama Aset</th>
                                <th class="px-6 py-4 text-left">Kategori</th>
                                <th class="px-6 py-4 text-left">Nilai Perolehan</th>
                                <th class="px-6 py-4 text-left">Metode Penyusutan</th>
                                <th class="px-6 py-4 text-left">Nilai Buku</th>
                                <th class="px-6 py-4 text-left">Aksi</th>
                            </tr>
                        </thead>
                        <tbody id="assetsList">
                            <tr>
                                <td colspan="6" class="px-6 py-8 text-center text-gray-400">Belum ada aset</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Reports Section -->
        <div id="reports" class="section hidden">
            <h2 class="text-3xl font-bold mb-6">Laporan Keuangan</h2>
            
            <!-- Period Selection Controls -->
            <div class="glass-effect p-4 sm:p-6 rounded-xl mb-6">
                <h3 class="text-lg font-semibold mb-4">üìÖ Periode Laporan</h3>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">Tanggal Awal</label>
                        <input type="date" id="reportStartDate" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Tanggal Akhir</label>
                        <input type="date" id="reportEndDate" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Periode Cepat</label>
                        <select id="quickPeriod" onchange="setQuickPeriod()" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                            <option value="">Pilih Periode</option>
                            <option value="today">Hari Ini</option>
                            <option value="yesterday">Kemarin</option>
                            <option value="this-week">Minggu Ini</option>
                            <option value="last-week">Minggu Lalu</option>
                            <option value="this-month">Bulan Ini</option>
                            <option value="last-month">Bulan Lalu</option>
                            <option value="this-quarter">Kuartal Ini</option>
                            <option value="last-quarter">Kuartal Lalu</option>
                            <option value="this-year">Tahun Ini</option>
                            <option value="last-year">Tahun Lalu</option>
                            <option value="all-time">Semua Periode</option>
                        </select>
                    </div>
                    <div class="flex items-end">
                        <button onclick="validateAndRefreshReports()" class="w-full bg-accent hover:bg-blue-600 px-3 py-2 sm:px-4 rounded-lg transition-colors text-sm sm:text-base">
                            üîÑ Refresh Laporan
                        </button>
                    </div>
                </div>
                <div id="periodValidation" class="mt-3 text-sm hidden">
                    <p class="text-danger">‚ö†Ô∏è Tanggal awal tidak boleh lebih besar dari tanggal akhir</p>
                </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                <button onclick="generateReport('balance-sheet')" class="glass-effect p-6 rounded-xl card-hover text-left">
                    <h3 class="text-xl font-semibold mb-2">üìä Neraca</h3>
                    <p class="text-gray-300">Laporan posisi keuangan perusahaan</p>
                    <div class="mt-3 text-xs text-gray-400">
                        <span id="balanceSheetStatus" class="px-2 py-1 rounded bg-gray-600">Belum dibuat</span>
                    </div>
                </button>
                <button onclick="generateReport('income-statement')" class="glass-effect p-6 rounded-xl card-hover text-left">
                    <h3 class="text-xl font-semibold mb-2">üìà Laba Rugi</h3>
                    <p class="text-gray-300">Laporan pendapatan dan beban</p>
                    <div class="mt-3 text-xs text-gray-400">
                        <span id="incomeStatementStatus" class="px-2 py-1 rounded bg-gray-600">Belum dibuat</span>
                    </div>
                </button>
                <button onclick="generateReport('cash-flow')" class="glass-effect p-6 rounded-xl card-hover text-left">
                    <h3 class="text-xl font-semibold mb-2">üí∞ Arus Kas</h3>
                    <p class="text-gray-300">Laporan pergerakan kas perusahaan</p>
                    <div class="mt-3 text-xs text-gray-400">
                        <span id="cashFlowStatus" class="px-2 py-1 rounded bg-gray-600">Belum dibuat</span>
                    </div>
                </button>
            </div>

            <div id="reportContent" class="glass-effect p-6 rounded-xl">
                <div class="text-center text-gray-400">
                    <div class="mb-4">
                        <span class="text-4xl">üìã</span>
                    </div>
                    <h3 class="text-lg font-semibold mb-2">Pilih Jenis Laporan</h3>
                    <p>Tentukan periode laporan di atas, kemudian pilih jenis laporan yang ingin ditampilkan</p>
                </div>
            </div>
        </div>

        <!-- Settings Section -->
        <div id="settings" class="section hidden">
            <h2 class="text-xl sm:text-2xl lg:text-3xl font-bold mb-4 sm:mb-6">Pengaturan Sistem</h2>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4 lg:gap-6">
                <!-- Business Information -->
                <div class="glass-effect p-4 sm:p-6 rounded-xl">
                    <h3 class="text-lg sm:text-xl font-semibold mb-4">Informasi Bisnis</h3>
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium mb-2">Nama Perusahaan</label>
                            <input type="text" id="companyName" placeholder="PT. Contoh Bisnis" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white placeholder-gray-400 text-sm sm:text-base">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">Alamat</label>
                            <textarea id="companyAddress" placeholder="Jl. Contoh No. 123, Jakarta" rows="3" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white placeholder-gray-400 text-sm sm:text-base resize-none"></textarea>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">Telepon</label>
                            <input type="tel" id="companyPhone" placeholder="021-12345678" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white placeholder-gray-400 text-sm sm:text-base">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">Email</label>
                            <input type="email" id="companyEmail" placeholder="info@contohbisnis.com" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white placeholder-gray-400 text-sm sm:text-base">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">NPWP</label>
                            <input type="text" id="companyNPWP" placeholder="12.345.678.9-012.000" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white placeholder-gray-400 text-sm sm:text-base">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">Jenis Bisnis</label>
                            <select id="businessType" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                                <option value="">Pilih Jenis Bisnis</option>
                                <option value="retail">Retail/Eceran</option>
                                <option value="wholesale">Grosir</option>
                                <option value="manufacturing">Manufaktur</option>
                                <option value="service">Jasa</option>
                                <option value="trading">Trading</option>
                                <option value="other">Lainnya</option>
                            </select>
                        </div>
                        <button onclick="saveBusinessInfo()" class="w-full bg-accent hover:bg-blue-600 px-4 py-2 rounded-lg font-semibold transition-colors text-sm sm:text-base">
                            Simpan Info Bisnis
                        </button>
                    </div>
                </div>

                <!-- Chart of Accounts -->
                <div class="glass-effect p-4 sm:p-6 rounded-xl">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg sm:text-xl font-semibold">Chart of Accounts</h3>
                        <div class="flex gap-2">
                            <button onclick="showAccountTypeManager()" class="bg-purple-600 hover:bg-purple-700 px-3 py-2 sm:px-4 rounded-lg text-xs sm:text-sm transition-colors">
                                ‚öôÔ∏è Kelola Jenis
                            </button>
                            <button onclick="showAccountForm()" class="bg-accent hover:bg-blue-600 px-3 py-2 sm:px-4 rounded-lg text-xs sm:text-sm transition-colors">
                                + Tambah Akun
                            </button>
                        </div>
                    </div>
                    <div class="space-y-2 max-h-80 sm:max-h-96 overflow-y-auto" id="accountsList">
                        <!-- Accounts will be populated here -->
                    </div>
                </div>

                <!-- Initial Settings -->
                <div class="glass-effect p-4 sm:p-6 rounded-xl">
                    <h3 class="text-lg sm:text-xl font-semibold mb-4">Pengaturan Awal</h3>
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium mb-2">Tanggal Mulai Periode</label>
                            <input type="date" id="startDate" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">Saldo Awal Kas</label>
                            <input type="number" id="initialCash" placeholder="0" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white placeholder-gray-400 text-sm sm:text-base">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">Mata Uang</label>
                            <select id="currency" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                                <option value="IDR">Rupiah (IDR)</option>
                                <option value="USD">US Dollar (USD)</option>
                                <option value="EUR">Euro (EUR)</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">Metode Penyusutan Default</label>
                            <select id="defaultDepreciationMethod" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                                <option value="straight-line">Garis Lurus</option>
                                <option value="declining-balance">Saldo Menurun</option>
                                <option value="sum-of-years">Jumlah Angka Tahun</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">Tahun Pajak</label>
                            <select id="taxYear" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                                <option value="2024">2024</option>
                                <option value="2025">2025</option>
                                <option value="2026">2026</option>
                            </select>
                        </div>

                        <button onclick="saveInitialSettings()" class="w-full bg-success hover:bg-green-600 px-4 py-2 rounded-lg font-semibold transition-colors text-sm sm:text-base">
                            Simpan Pengaturan
                        </button>
                    </div>
                </div>

                <!-- Data Management -->
                <div class="glass-effect p-4 sm:p-6 rounded-xl">
                    <h3 class="text-lg sm:text-xl font-semibold mb-4">Manajemen Data</h3>
                    <div class="space-y-4">
                        <div>
                            <h4 class="text-sm font-medium mb-2">Backup Data</h4>
                            <button onclick="backupData()" class="w-full bg-accent hover:bg-blue-600 px-4 py-2 rounded-lg font-semibold transition-colors text-sm sm:text-base mb-2">
                                üì• Download Backup
                            </button>
                            <p class="text-xs text-gray-400">Simpan semua data aplikasi ke file JSON</p>
                        </div>
                        
                        <div>
                            <h4 class="text-sm font-medium mb-2">Restore Data</h4>
                            <input type="file" id="restoreFile" accept=".json" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white text-sm sm:text-base mb-2">
                            <button onclick="restoreData()" class="w-full bg-warning hover:bg-yellow-600 px-4 py-2 rounded-lg font-semibold transition-colors text-sm sm:text-base">
                                üì§ Restore Data
                            </button>
                            <p class="text-xs text-gray-400">Pulihkan data dari file backup</p>
                        </div>

                        <div>
                            <h4 class="text-sm font-medium mb-2">Reset Data</h4>
                            <button onclick="resetAllData()" class="w-full bg-danger hover:bg-red-600 px-4 py-2 rounded-lg font-semibold transition-colors text-sm sm:text-base">
                                üóëÔ∏è Reset Semua Data
                            </button>
                            <p class="text-xs text-gray-400">Hapus semua data dan kembali ke pengaturan awal</p>
                        </div>

                        <div class="border-t border-white/20 pt-4">
                            <h4 class="text-sm font-medium mb-2">Statistik Data</h4>
                            <div class="grid grid-cols-2 gap-2 text-xs">
                                <div class="bg-white/5 p-2 rounded">
                                    <span class="text-gray-400">Transaksi:</span>
                                    <span id="statsTransactions" class="font-semibold">0</span>
                                </div>
                                <div class="bg-white/5 p-2 rounded">
                                    <span class="text-gray-400">Akun:</span>
                                    <span id="statsAccounts" class="font-semibold">0</span>
                                </div>
                                <div class="bg-white/5 p-2 rounded">
                                    <span class="text-gray-400">Aset:</span>
                                    <span id="statsAssets" class="font-semibold">0</span>
                                </div>
                                <div class="bg-white/5 p-2 rounded">
                                    <span class="text-gray-400">Ukuran Data:</span>
                                    <span id="statsSize" class="font-semibold">0 KB</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Transaction Form Modal -->
    <div id="transactionModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50 p-4">
        <div class="glass-effect p-4 sm:p-6 rounded-xl w-full max-w-md">
            <h3 class="text-lg sm:text-xl font-semibold mb-4">Tambah Transaksi</h3>
            <form id="transactionForm" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium mb-2">Tanggal</label>
                    <input type="date" id="transactionDate" required class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Deskripsi</label>
                    <input type="text" id="transactionDescription" required placeholder="Deskripsi transaksi" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white placeholder-gray-400 text-sm sm:text-base">
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Akun Debit</label>
                    <select id="debitAccount" required class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                        <option value="">Pilih Akun</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Akun Kredit</label>
                    <select id="creditAccount" required class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                        <option value="">Pilih Akun</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Jumlah</label>
                    <input type="number" id="transactionAmount" required placeholder="0" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white placeholder-gray-400 text-sm sm:text-base">
                </div>
                <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3">
                    <button type="submit" class="flex-1 bg-accent hover:bg-blue-600 px-4 py-2 rounded-lg font-semibold transition-colors text-sm sm:text-base">Simpan</button>
                    <button type="button" onclick="hideTransactionForm()" class="flex-1 bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded-lg font-semibold transition-colors text-sm sm:text-base">Batal</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Asset Form Modal -->
    <div id="assetModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50">
        <div class="glass-effect p-6 rounded-xl w-full max-w-md mx-4">
            <h3 class="text-xl font-semibold mb-4">Tambah Aset</h3>
            <form id="assetForm" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium mb-2">Nama Aset</label>
                    <input type="text" id="assetName" required placeholder="Nama aset" class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400">
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Kategori</label>
                    <select id="assetCategory" required class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white">
                        <option value="">Pilih Kategori</option>
                        <option value="building">Bangunan</option>
                        <option value="equipment">Peralatan</option>
                        <option value="vehicle">Kendaraan</option>
                        <option value="furniture">Furniture</option>
                        <option value="other">Lainnya</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Nilai Perolehan</label>
                    <input type="number" id="assetCost" required placeholder="0" class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400">
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Tanggal Perolehan</label>
                    <input type="date" id="assetDate" required class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white">
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Umur Ekonomis (Tahun)</label>
                    <input type="number" id="assetLife" required placeholder="5" class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400">
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Metode Penyusutan</label>
                    <select id="assetDepreciationMethod" required class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white">
                        <option value="straight-line">Garis Lurus</option>
                        <option value="declining-balance">Saldo Menurun</option>
                        <option value="sum-of-years">Jumlah Angka Tahun</option>
                    </select>
                </div>
                <div class="flex space-x-3">
                    <button type="submit" class="flex-1 bg-accent hover:bg-blue-600 px-4 py-2 rounded-lg font-semibold transition-colors">Simpan</button>
                    <button type="button" onclick="hideAssetForm()" class="flex-1 bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded-lg font-semibold transition-colors">Batal</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Bank Transaction Form Modal -->
    <div id="bankTransactionModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50 p-4">
        <div class="glass-effect p-4 sm:p-6 rounded-xl w-full max-w-md">
            <h3 class="text-lg sm:text-xl font-semibold mb-4">Input Transaksi Bank Manual</h3>
            <form id="bankTransactionForm" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium mb-2">Tanggal</label>
                    <input type="date" id="bankTransactionDate" required class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Deskripsi</label>
                    <input type="text" id="bankTransactionDescription" required placeholder="Deskripsi transaksi bank" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white placeholder-gray-400 text-sm sm:text-base">
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Jenis Transaksi</label>
                    <select id="bankTransactionType" required class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white text-sm sm:text-base">
                        <option value="">Pilih Jenis</option>
                        <option value="debit">Debit (Uang Masuk)</option>
                        <option value="credit">Kredit (Uang Keluar)</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Jumlah</label>
                    <input type="number" id="bankTransactionAmount" required placeholder="0" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white placeholder-gray-400 text-sm sm:text-base">
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Referensi/No. Transaksi</label>
                    <input type="text" id="bankTransactionRef" placeholder="Opsional" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 sm:px-4 text-white placeholder-gray-400 text-sm sm:text-base">
                </div>
                <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3">
                    <button type="submit" class="flex-1 bg-accent hover:bg-blue-600 px-4 py-2 rounded-lg font-semibold transition-colors text-sm sm:text-base">Simpan</button>
                    <button type="button" onclick="hideBankTransactionForm()" class="flex-1 bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded-lg font-semibold transition-colors text-sm sm:text-base">Batal</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Bulk Import Modal -->
    <div id="bulkImportModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50 p-4">
        <div class="glass-effect p-4 sm:p-6 rounded-xl w-full max-w-2xl">
            <h3 class="text-lg sm:text-xl font-semibold mb-4">Import Transaksi Masal</h3>
            
            <!-- Instructions -->
            <div class="bg-blue-500/20 border border-blue-500/50 rounded-lg p-4 mb-4">
                <h4 class="font-semibold text-blue-300 mb-2">üìã Petunjuk Import:</h4>
                <ul class="text-sm text-gray-300 space-y-1">
                    <li>‚Ä¢ Download template Excel terlebih dahulu</li>
                    <li>‚Ä¢ Isi data sesuai format yang disediakan</li>
                    <li>‚Ä¢ Format tanggal: YYYY-MM-DD (contoh: 2024-01-15)</li>
                    <li>‚Ä¢ Gunakan kode akun yang sudah ada di Chart of Accounts</li>
                    <li>‚Ä¢ Jumlah dalam angka tanpa titik/koma (contoh: 1000000)</li>
                    <li>‚Ä¢ Pastikan akun debit dan kredit berbeda</li>
                </ul>
            </div>
            
            <!-- File Upload -->
            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium mb-2">Pilih File Excel/CSV</label>
                    <input type="file" id="bulkImportFile" accept=".xlsx,.xls,.csv" class="w-full bg-white/10 border border-white/20 rounded-lg px-3 py-2 text-white text-sm sm:text-base">
                </div>
                
                <!-- Preview Area -->
                <div id="importPreview" class="hidden">
                    <h4 class="font-semibold mb-2">Preview Data:</h4>
                    <div class="bg-white/5 rounded-lg p-3 max-h-60 overflow-y-auto">
                        <div id="previewContent"></div>
                    </div>
                    <div class="mt-2 text-sm text-gray-400">
                        <span id="previewStats"></span>
                    </div>
                </div>
                
                <!-- Validation Results -->
                <div id="validationResults" class="hidden">
                    <h4 class="font-semibold mb-2">Hasil Validasi:</h4>
                    <div id="validationContent" class="space-y-2"></div>
                </div>
            </div>
            
            <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3 mt-6">
                <button onclick="previewImport()" class="flex-1 bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg font-semibold transition-colors text-sm sm:text-base">
                    üëÅÔ∏è Preview Data
                </button>
                <button id="importButton" onclick="executeImport()" disabled class="flex-1 bg-success hover:bg-green-600 px-4 py-2 rounded-lg font-semibold transition-colors text-sm sm:text-base opacity-50">
                    üì§ Import Transaksi
                </button>
                <button onclick="hideBulkImportForm()" class="flex-1 bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded-lg font-semibold transition-colors text-sm sm:text-base">
                    Batal
                </button>
            </div>
        </div>
    </div>

    <!-- Account Form Modal -->
    <div id="accountModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50">
        <div class="glass-effect p-6 rounded-xl w-full max-w-md mx-4">
            <h3 class="text-xl font-semibold mb-4">Tambah Akun</h3>
            <form id="accountForm" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium mb-2">Kode Akun</label>
                    <input type="text" id="accountCode" required placeholder="1001" class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400">
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Nama Akun</label>
                    <input type="text" id="accountName" required placeholder="Kas" class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400">
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Jenis Akun</label>
                    <select id="accountType" required class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white">
                        <option value="">Pilih Jenis</option>
                    </select>
                </div>
                <div class="flex space-x-3">
                    <button type="submit" class="flex-1 bg-accent hover:bg-blue-600 px-4 py-2 rounded-lg font-semibold transition-colors">Simpan</button>
                    <button type="button" onclick="hideAccountForm()" class="flex-1 bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded-lg font-semibold transition-colors">Batal</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Account Type Manager Modal -->
    <div id="accountTypeModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50">
        <div class="glass-effect p-6 rounded-xl w-full max-w-2xl mx-4">
            <div class="flex justify-between items-center mb-6">
                <h3 class="text-xl font-semibold">Kelola Jenis Akun</h3>
                <button onclick="hideAccountTypeManager()" class="text-gray-400 hover:text-white transition-colors p-1 rounded-lg hover:bg-white/10">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <!-- Add New Account Type -->
            <div class="bg-white/5 p-4 rounded-lg mb-6">
                <h4 class="text-lg font-semibold mb-4">Tambah Jenis Akun Baru</h4>
                <form id="accountTypeForm" class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium mb-2">Kode Jenis</label>
                            <input type="text" id="newAccountTypeCode" required placeholder="investment" class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400">
                            <p class="text-xs text-gray-400 mt-1">Huruf kecil, angka, underscore (contoh: investment, cogs)</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">Nama Jenis</label>
                            <input type="text" id="newAccountTypeName" required placeholder="Investasi" class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400">
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium mb-2">Kode Akun Awal</label>
                            <input type="number" id="newAccountTypeStartCode" required placeholder="6000" class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400">
                            <p class="text-xs text-gray-400 mt-1">Kode akun akan dimulai dari angka ini</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">Sifat Saldo</label>
                            <select id="newAccountTypeNature" required class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white">
                                <option value="">Pilih Sifat</option>
                                <option value="debit">Debit (Aset, Beban)</option>
                                <option value="credit">Kredit (Kewajiban, Ekuitas, Pendapatan)</option>
                            </select>
                        </div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Deskripsi</label>
                        <textarea id="newAccountTypeDescription" placeholder="Deskripsi jenis akun ini..." rows="2" class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400 resize-none"></textarea>
                    </div>
                    <div class="flex space-x-3">
                        <button type="submit" class="bg-success hover:bg-green-600 px-4 py-2 rounded-lg font-semibold transition-colors">
                            ‚úÖ Tambah Jenis Akun
                        </button>
                        <button type="button" onclick="resetAccountTypeForm()" class="bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded-lg font-semibold transition-colors">
                            üîÑ Reset
                        </button>
                        <button type="button" onclick="hideAccountTypeManager()" class="bg-danger hover:bg-red-600 px-4 py-2 rounded-lg font-semibold transition-colors">
                            ‚ùå Batal
                        </button>
                    </div>
                </form>
            </div>
            
            <!-- Existing Account Types -->
            <div>
                <h4 class="text-lg font-semibold mb-4">Jenis Akun yang Ada</h4>
                <div class="space-y-3 max-h-80 overflow-y-auto" id="accountTypesList">
                    <!-- Account types will be populated here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Account Type Modal -->
    <div id="editAccountTypeModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50">
        <div class="glass-effect p-6 rounded-xl w-full max-w-md mx-4">
            <h3 class="text-xl font-semibold mb-4">Edit Jenis Akun</h3>
            <form id="editAccountTypeForm" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium mb-2">Kode Jenis</label>
                    <input type="text" id="editAccountTypeCode" readonly class="w-full bg-gray-600 border border-white/20 rounded-lg px-4 py-2 text-gray-300">
                    <p class="text-xs text-gray-400 mt-1">Kode tidak dapat diubah</p>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Nama Jenis</label>
                    <input type="text" id="editAccountTypeName" required class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400">
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Sifat Saldo</label>
                    <select id="editAccountTypeNature" required class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white">
                        <option value="debit">Debit (Aset, Beban)</option>
                        <option value="credit">Kredit (Kewajiban, Ekuitas, Pendapatan)</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Deskripsi</label>
                    <textarea id="editAccountTypeDescription" rows="2" class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400 resize-none"></textarea>
                </div>
                <div class="flex space-x-3">
                    <button type="submit" class="flex-1 bg-warning hover:bg-yellow-600 px-4 py-2 rounded-lg font-semibold transition-colors">Simpan Perubahan</button>
                    <button type="button" onclick="hideEditAccountTypeModal()" class="flex-1 bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded-lg font-semibold transition-colors">Batal</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Convert to Asset Modal -->
    <div id="convertAssetModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50">
        <div class="glass-effect p-6 rounded-xl w-full max-w-lg mx-4">
            <h3 class="text-xl font-semibold mb-4">üè¢ Konversi ke Manajemen Aset</h3>
            <div class="bg-blue-500/20 border border-blue-500/50 rounded-lg p-4 mb-4">
                <h4 class="font-semibold text-blue-300 mb-2">‚ÑπÔ∏è Informasi Konversi</h4>
                <p class="text-sm text-gray-300">
                    Akun ini akan diintegrasikan dengan sistem manajemen aset untuk menghitung penyusutan otomatis. 
                    Nilai saldo akun saat ini akan digunakan sebagai nilai perolehan aset.
                </p>
            </div>
            <form id="convertAssetForm" class="space-y-4">
                <div class="bg-white/5 p-3 rounded-lg">
                    <h5 class="font-medium mb-2">Detail Akun</h5>
                    <div class="text-sm text-gray-300">
                        <div>Kode: <span id="convertAccountCode" class="font-semibold"></span></div>
                        <div>Nama: <span id="convertAccountName" class="font-semibold"></span></div>
                        <div>Saldo: <span id="convertAccountBalance" class="font-semibold text-accent"></span></div>
                    </div>
                </div>
                
                <div>
                    <label class="block text-sm font-medium mb-2">Nama Aset</label>
                    <input type="text" id="convertAssetName" required class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400">
                    <p class="text-xs text-gray-400 mt-1">Nama aset untuk manajemen (bisa berbeda dari nama akun)</p>
                </div>
                
                <div>
                    <label class="block text-sm font-medium mb-2">Kategori Aset</label>
                    <select id="convertAssetCategory" required class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white">
                        <option value="">Pilih Kategori</option>
                        <option value="building">Bangunan</option>
                        <option value="equipment">Peralatan</option>
                        <option value="vehicle">Kendaraan</option>
                        <option value="furniture">Furniture & Fixture</option>
                        <option value="computer">Komputer & IT</option>
                        <option value="machinery">Mesin</option>
                        <option value="other">Lainnya</option>
                    </select>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">Nilai Perolehan</label>
                        <input type="number" id="convertAssetCost" required class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400">
                        <p class="text-xs text-gray-400 mt-1">Akan diisi otomatis dari saldo akun</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Tanggal Perolehan</label>
                        <input type="date" id="convertAssetDate" required class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white">
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">Umur Ekonomis (Tahun)</label>
                        <select id="convertAssetLife" required class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white">
                            <option value="">Pilih Umur</option>
                            <option value="4">4 Tahun (Komputer, IT)</option>
                            <option value="5">5 Tahun (Furniture, Peralatan)</option>
                            <option value="8">8 Tahun (Kendaraan)</option>
                            <option value="10">10 Tahun (Mesin)</option>
                            <option value="20">20 Tahun (Bangunan)</option>
                            <option value="custom">Custom</option>
                        </select>
                        <input type="number" id="convertAssetLifeCustom" placeholder="Tahun" class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400 mt-2 hidden">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Metode Penyusutan</label>
                        <select id="convertAssetDepreciationMethod" required class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white">
                            <option value="straight-line">Garis Lurus</option>
                            <option value="declining-balance">Saldo Menurun</option>
                            <option value="sum-of-years">Jumlah Angka Tahun</option>
                        </select>
                    </div>
                </div>
                
                <div>
                    <label class="block text-sm font-medium mb-2">Nilai Residu (Opsional)</label>
                    <input type="number" id="convertAssetResidualValue" placeholder="0" class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400">
                    <p class="text-xs text-gray-400 mt-1">Nilai aset di akhir umur ekonomis</p>
                </div>
                
                <div>
                    <label class="block text-sm font-medium mb-2">Keterangan</label>
                    <textarea id="convertAssetDescription" rows="2" placeholder="Deskripsi aset, lokasi, dll..." class="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400 resize-none"></textarea>
                </div>
                
                <div class="bg-yellow-500/20 border border-yellow-500/50 rounded-lg p-3">
                    <h5 class="font-semibold text-yellow-300 mb-1">‚ö†Ô∏è Perhatian</h5>
                    <p class="text-xs text-gray-300">
                        Setelah konversi, sistem akan otomatis menghitung penyusutan bulanan dan membuat jurnal penyusutan. 
                        Pastikan data yang dimasukkan sudah benar.
                    </p>
                </div>
                
                <div class="flex space-x-3">
                    <button type="submit" class="flex-1 bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded-lg font-semibold transition-colors">
                        üè¢ Konversi ke Aset
                    </button>
                    <button type="button" onclick="hideConvertAssetModal()" class="flex-1 bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded-lg font-semibold transition-colors">
                        Batal
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Asset Details Modal -->
    <div id="assetDetailsModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50">
        <div class="glass-effect p-6 rounded-xl w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-semibold">üìä Detail Aset</h3>
                <button onclick="hideAssetDetailsModal()" class="text-gray-400 hover:text-white transition-colors p-1 rounded-lg hover:bg-white/10">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div id="assetDetailsContent">
                <!-- Content will be populated by JavaScript -->
            </div>
        </div>
    </div>

    <script>
        // Data Storage with Auto-Save
        let accounts = [];
        let transactions = [];
        let assets = [];
        let bankStatements = [];
        let reconciliations = [];
        let accountTypes = {};
        let settings = {
            startDate: new Date().toISOString().split('T')[0],
            initialCash: 0,
            defaultDepreciationMethod: 'straight-line',
            currency: 'IDR',
            taxYear: '2024'
        };

        let businessInfo = {
            companyName: '',
            companyAddress: '',
            companyPhone: '',
            companyEmail: '',
            companyNPWP: '',
            businessType: ''
        };

        // Account Code Generation Rules
        const accountCodeRules = {
            'asset': { start: 1000, current: 1000 },
            'liability': { start: 2000, current: 2000 },
            'equity': { start: 3000, current: 3000 },
            'revenue': { start: 4000, current: 4000 },
            'expense': { start: 5000, current: 5000 }
        };

        // Auto-save functionality
        function saveToLocalStorage() {
            const data = {
                accounts,
                transactions,
                assets,
                bankStatements,
                reconciliations,
                accountTypes,
                settings,
                businessInfo,
                accountCodeRules,
                timestamp: new Date().toISOString()
            };
            localStorage.setItem('financeFlowData', JSON.stringify(data));
            updateDataStats();
        }

        function loadFromLocalStorage() {
            const savedData = localStorage.getItem('financeFlowData');
            if (savedData) {
                try {
                    const data = JSON.parse(savedData);
                    accounts = data.accounts || getDefaultAccounts();
                    transactions = data.transactions || [];
                    assets = data.assets || [];
                    bankStatements = data.bankStatements || [];
                    reconciliations = data.reconciliations || [];
                    accountTypes = data.accountTypes || getDefaultAccountTypes();
                    settings = { ...settings, ...(data.settings || {}) };
                    businessInfo = { ...businessInfo, ...(data.businessInfo || {}) };
                    
                    // Update account code rules
                    if (data.accountCodeRules) {
                        Object.assign(accountCodeRules, data.accountCodeRules);
                    }
                    
                    return true;
                } catch (error) {
                    console.error('Error loading data:', error);
                    initializeDefaultData();
                    return false;
                }
            } else {
                initializeDefaultData();
                return false;
            }
        }

        function getDefaultAccounts() {
            return [
                {code: '1001', name: 'Kas', type: 'asset', balance: 0},
                {code: '1002', name: 'Bank', type: 'asset', balance: 0},
                {code: '1101', name: 'Piutang Dagang', type: 'asset', balance: 0},
                {code: '1201', name: 'Persediaan', type: 'asset', balance: 0},
                {code: '1301', name: 'Peralatan', type: 'asset', balance: 0},
                {code: '2001', name: 'Utang Dagang', type: 'liability', balance: 0},
                {code: '3001', name: 'Modal', type: 'equity', balance: 0},
                {code: '4001', name: 'Penjualan', type: 'revenue', balance: 0},
                {code: '5001', name: 'Beban Operasional', type: 'expense', balance: 0}
            ];
        }

        function getDefaultAccountTypes() {
            return {
                'asset': {
                    code: 'asset',
                    name: 'Aset',
                    startCode: 1000,
                    currentCode: 1000,
                    nature: 'debit',
                    description: 'Sumber daya ekonomi yang dimiliki perusahaan',
                    isDefault: true
                },
                'liability': {
                    code: 'liability',
                    name: 'Kewajiban',
                    startCode: 2000,
                    currentCode: 2000,
                    nature: 'credit',
                    description: 'Utang atau kewajiban perusahaan kepada pihak lain',
                    isDefault: true
                },
                'equity': {
                    code: 'equity',
                    name: 'Ekuitas',
                    startCode: 3000,
                    currentCode: 3000,
                    nature: 'credit',
                    description: 'Modal atau kekayaan bersih pemilik perusahaan',
                    isDefault: true
                },
                'revenue': {
                    code: 'revenue',
                    name: 'Pendapatan',
                    startCode: 4000,
                    currentCode: 4000,
                    nature: 'credit',
                    description: 'Penghasilan dari aktivitas operasional perusahaan',
                    isDefault: true
                },
                'expense': {
                    code: 'expense',
                    name: 'Beban',
                    startCode: 5000,
                    currentCode: 5000,
                    nature: 'debit',
                    description: 'Biaya yang dikeluarkan untuk operasional perusahaan',
                    isDefault: true
                }
            };
        }

        function initializeDefaultData() {
            accounts = getDefaultAccounts();
            transactions = [];
            assets = [];
            bankStatements = [];
            reconciliations = [];
            accountTypes = getDefaultAccountTypes();
            saveToLocalStorage();
        }

        function generateAccountCode(type) {
            // Use accountTypes if available, fallback to accountCodeRules
            if (accountTypes[type]) {
                let nextCode = accountTypes[type].currentCode + 1;
                while (accounts.some(acc => acc.code === nextCode.toString())) {
                    nextCode++;
                }
                accountTypes[type].currentCode = nextCode;
                return nextCode.toString();
            }
            
            // Fallback to old system
            const rule = accountCodeRules[type];
            if (!rule) return '';
            
            let nextCode = rule.current + 1;
            while (accounts.some(acc => acc.code === nextCode.toString())) {
                nextCode++;
            }
            
            rule.current = nextCode;
            return nextCode.toString();
        }

        // Mobile Menu Toggle
        function toggleMobileMenu() {
            const mobileMenu = document.getElementById('mobileMenu');
            mobileMenu.classList.toggle('hidden');
        }

        // Navigation
        function showSection(sectionName) {
            document.querySelectorAll('.section').forEach(section => {
                section.classList.add('hidden');
            });
            document.getElementById(sectionName).classList.remove('hidden');
            
            // Update nav buttons
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.classList.remove('bg-accent');
                btn.classList.add('hover:bg-white/10');
            });
            event.target.classList.add('bg-accent');
            event.target.classList.remove('hover:bg-white/10');

            if (sectionName === 'dashboard') {
                updateDashboard();
            } else if (sectionName === 'transactions') {
                loadTransactions();
                populateAccountSelects();
            } else if (sectionName === 'ledger') {
                loadLedger();
                populateLedgerAccountSelect();
            } else if (sectionName === 'reconciliation') {
                loadReconciliation();
            } else if (sectionName === 'assets') {
                loadAssets();
            } else if (sectionName === 'settings') {
                loadSettings();
            }
        }

        // Transaction Management
        function showTransactionForm() {
            document.getElementById('transactionModal').classList.remove('hidden');
            document.getElementById('transactionModal').classList.add('flex');
            document.getElementById('transactionDate').value = new Date().toISOString().split('T')[0];
        }

        function hideTransactionForm() {
            document.getElementById('transactionModal').classList.add('hidden');
            document.getElementById('transactionModal').classList.remove('flex');
            document.getElementById('transactionForm').reset();
        }

        function populateAccountSelects() {
            const debitSelect = document.getElementById('debitAccount');
            const creditSelect = document.getElementById('creditAccount');
            const filterSelect = document.getElementById('filterAccount');
            
            [debitSelect, creditSelect, filterSelect].forEach(select => {
                if (select.id === 'filterAccount') {
                    select.innerHTML = '<option value="">Semua Akun</option>';
                } else {
                    select.innerHTML = '<option value="">Pilih Akun</option>';
                }
                
                accounts.forEach(account => {
                    const option = document.createElement('option');
                    option.value = account.code;
                    option.textContent = `${account.code} - ${account.name}`;
                    select.appendChild(option);
                });
            });
        }

        document.getElementById('transactionForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const transaction = {
                id: Date.now(),
                date: document.getElementById('transactionDate').value,
                description: document.getElementById('transactionDescription').value,
                debitAccount: document.getElementById('debitAccount').value,
                creditAccount: document.getElementById('creditAccount').value,
                amount: parseFloat(document.getElementById('transactionAmount').value)
            };
            
            transactions.push(transaction);
            updateAccountBalances(transaction);
            loadTransactions();
            hideTransactionForm();
            updateDashboard();
            saveToLocalStorage();
        });

        // Data Management Functions
        function backupData() {
            const data = {
                accounts,
                transactions,
                assets,
                settings,
                businessInfo,
                accountCodeRules,
                timestamp: new Date().toISOString(),
                version: '1.0'
            };
            
            const dataStr = JSON.stringify(data, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });
            
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = `financeflow-backup-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            alert('Backup berhasil diunduh!');
        }

        function restoreData() {
            const fileInput = document.getElementById('restoreFile');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('Pilih file backup terlebih dahulu!');
                return;
            }
            
            if (!confirm('Restore akan mengganti semua data yang ada. Lanjutkan?')) {
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = JSON.parse(e.target.result);
                    
                    // Validate data structure
                    if (!data.accounts || !Array.isArray(data.accounts)) {
                        throw new Error('Format file backup tidak valid');
                    }
                    
                    // Restore data
                    accounts = data.accounts || [];
                    transactions = data.transactions || [];
                    assets = data.assets || [];
                    settings = { ...settings, ...(data.settings || {}) };
                    businessInfo = { ...businessInfo, ...(data.businessInfo || {}) };
                    
                    if (data.accountCodeRules) {
                        Object.assign(accountCodeRules, data.accountCodeRules);
                    }
                    
                    saveToLocalStorage();
                    
                    // Refresh all sections
                    updateDashboard();
                    loadTransactions();
                    loadAssets();
                    loadSettings();
                    populateAccountSelects();
                    
                    alert('Data berhasil dipulihkan!');
                    fileInput.value = '';
                    
                } catch (error) {
                    alert('Error: ' + error.message);
                }
            };
            reader.readAsText(file);
        }

        function resetAllData() {
            if (!confirm('Yakin ingin menghapus SEMUA data? Tindakan ini tidak dapat dibatalkan!')) {
                return;
            }
            
            if (!confirm('Konfirmasi sekali lagi: Semua transaksi, aset, dan pengaturan akan dihapus!')) {
                return;
            }
            
            localStorage.removeItem('financeFlowData');
            initializeDefaultData();
            
            // Reset all forms and displays
            updateDashboard();
            loadTransactions();
            loadAssets();
            loadSettings();
            populateAccountSelects();
            
            alert('Semua data berhasil dihapus!');
        }

        function updateDataStats() {
            document.getElementById('statsTransactions').textContent = transactions.length;
            document.getElementById('statsAccounts').textContent = accounts.length;
            document.getElementById('statsAssets').textContent = assets.length;
            
            const dataSize = new Blob([localStorage.getItem('financeFlowData') || '']).size;
            document.getElementById('statsSize').textContent = (dataSize / 1024).toFixed(1) + ' KB';
        }

        function updateAccountBalances(transaction) {
            const debitAccount = accounts.find(acc => acc.code === transaction.debitAccount);
            const creditAccount = accounts.find(acc => acc.code === transaction.creditAccount);
            
            if (debitAccount) {
                if (debitAccount.type === 'asset' || debitAccount.type === 'expense') {
                    debitAccount.balance += transaction.amount;
                } else {
                    debitAccount.balance -= transaction.amount;
                }
            }
            
            if (creditAccount) {
                if (creditAccount.type === 'liability' || creditAccount.type === 'equity' || creditAccount.type === 'revenue') {
                    creditAccount.balance += transaction.amount;
                } else {
                    creditAccount.balance -= transaction.amount;
                }
            }
        }

        function loadTransactions() {
            const tbody = document.getElementById('transactionsList');
            
            if (transactions.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="px-6 py-8 text-center text-gray-400">Belum ada transaksi</td></tr>';
                return;
            }
            
            tbody.innerHTML = transactions.map(transaction => {
                const debitAccount = accounts.find(acc => acc.code === transaction.debitAccount);
                const creditAccount = accounts.find(acc => acc.code === transaction.creditAccount);
                
                return `
                    <tr class="border-b border-white/10 hover:bg-white/5">
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm">${new Date(transaction.date).toLocaleDateString('id-ID')}</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm">${transaction.description}</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm">${debitAccount?.name} / ${creditAccount?.name}</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-success text-xs sm:text-sm">Rp ${transaction.amount.toLocaleString('id-ID')}</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-danger text-xs sm:text-sm">Rp ${transaction.amount.toLocaleString('id-ID')}</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4">
                            <button onclick="deleteTransaction(${transaction.id})" class="text-danger hover:text-red-400 transition-colors text-xs sm:text-sm">Hapus</button>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        function deleteTransaction(id) {
            if (confirm('Yakin ingin menghapus transaksi ini?')) {
                transactions = transactions.filter(t => t.id !== id);
                loadTransactions();
                updateDashboard();
                saveToLocalStorage();
            }
        }

        // Asset Management
        function showAssetForm() {
            document.getElementById('assetModal').classList.remove('hidden');
            document.getElementById('assetModal').classList.add('flex');
            document.getElementById('assetDate').value = new Date().toISOString().split('T')[0];
        }

        function hideAssetForm() {
            document.getElementById('assetModal').classList.add('hidden');
            document.getElementById('assetModal').classList.remove('flex');
            document.getElementById('assetForm').reset();
        }

        document.getElementById('assetForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const asset = {
                id: Date.now(),
                name: document.getElementById('assetName').value,
                category: document.getElementById('assetCategory').value,
                cost: parseFloat(document.getElementById('assetCost').value),
                date: document.getElementById('assetDate').value,
                life: parseInt(document.getElementById('assetLife').value),
                depreciationMethod: document.getElementById('assetDepreciationMethod').value,
                accumulatedDepreciation: 0,
                accountCode: null, // Not linked to account
                residualValue: 0,
                description: ''
            };
            
            assets.push(asset);
            loadAssets();
            hideAssetForm();
            updateDashboard();
            saveToLocalStorage();
        });

        // Asset Integration Functions
        function convertToAsset(accountCode) {
            const account = accounts.find(acc => acc.code === accountCode);
            if (!account) return;
            
            // Check if already converted
            const existingAsset = assets.find(asset => asset.accountCode === accountCode);
            if (existingAsset) {
                alert('Akun ini sudah terintegrasi dengan manajemen aset!');
                return;
            }
            
            // Fill form with account data
            document.getElementById('convertAccountCode').textContent = account.code;
            document.getElementById('convertAccountName').textContent = account.name;
            document.getElementById('convertAccountBalance').textContent = `Rp ${account.balance.toLocaleString('id-ID')}`;
            
            // Pre-fill form
            document.getElementById('convertAssetName').value = account.name;
            document.getElementById('convertAssetCost').value = account.balance;
            document.getElementById('convertAssetDate').value = new Date().toISOString().split('T')[0];
            
            // Auto-suggest category based on account name
            const accountName = account.name.toLowerCase();
            let suggestedCategory = '';
            if (accountName.includes('gedung') || accountName.includes('bangunan')) {
                suggestedCategory = 'building';
            } else if (accountName.includes('kendaraan') || accountName.includes('mobil') || accountName.includes('motor')) {
                suggestedCategory = 'vehicle';
            } else if (accountName.includes('komputer') || accountName.includes('laptop') || accountName.includes('server')) {
                suggestedCategory = 'computer';
            } else if (accountName.includes('mesin')) {
                suggestedCategory = 'machinery';
            } else if (accountName.includes('furniture') || accountName.includes('meja') || accountName.includes('kursi')) {
                suggestedCategory = 'furniture';
            } else if (accountName.includes('peralatan') || accountName.includes('alat')) {
                suggestedCategory = 'equipment';
            }
            
            if (suggestedCategory) {
                document.getElementById('convertAssetCategory').value = suggestedCategory;
            }
            
            // Show modal
            document.getElementById('convertAssetModal').classList.remove('hidden');
            document.getElementById('convertAssetModal').classList.add('flex');
        }

        function hideConvertAssetModal() {
            document.getElementById('convertAssetModal').classList.add('hidden');
            document.getElementById('convertAssetModal').classList.remove('flex');
            document.getElementById('convertAssetForm').reset();
        }

        // Handle custom asset life input
        document.getElementById('convertAssetLife').addEventListener('change', function() {
            const customInput = document.getElementById('convertAssetLifeCustom');
            if (this.value === 'custom') {
                customInput.classList.remove('hidden');
                customInput.required = true;
            } else {
                customInput.classList.add('hidden');
                customInput.required = false;
                customInput.value = '';
            }
        });

        document.getElementById('convertAssetForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const accountCode = document.getElementById('convertAccountCode').textContent;
            const account = accounts.find(acc => acc.code === accountCode);
            
            if (!account) {
                alert('Akun tidak ditemukan!');
                return;
            }
            
            // Get asset life
            let assetLife = document.getElementById('convertAssetLife').value;
            if (assetLife === 'custom') {
                assetLife = parseInt(document.getElementById('convertAssetLifeCustom').value);
            } else {
                assetLife = parseInt(assetLife);
            }
            
            const asset = {
                id: Date.now(),
                name: document.getElementById('convertAssetName').value,
                category: document.getElementById('convertAssetCategory').value,
                cost: parseFloat(document.getElementById('convertAssetCost').value),
                date: document.getElementById('convertAssetDate').value,
                life: assetLife,
                depreciationMethod: document.getElementById('convertAssetDepreciationMethod').value,
                accumulatedDepreciation: 0,
                accountCode: accountCode, // Link to account
                residualValue: parseFloat(document.getElementById('convertAssetResidualValue').value) || 0,
                description: document.getElementById('convertAssetDescription').value
            };
            
            // Validate cost matches account balance
            if (Math.abs(asset.cost - account.balance) > 1) {
                if (!confirm(`Nilai perolehan (Rp ${asset.cost.toLocaleString('id-ID')}) berbeda dengan saldo akun (Rp ${account.balance.toLocaleString('id-ID')}). Lanjutkan?`)) {
                    return;
                }
            }
            
            assets.push(asset);
            
            // Create initial depreciation entries if asset date is in the past
            createInitialDepreciationEntries(asset);
            
            loadAssets();
            loadSettings(); // Refresh account list
            hideConvertAssetModal();
            updateDashboard();
            saveToLocalStorage();
            
            alert(`‚úÖ Akun "${account.name}" berhasil dikonversi ke manajemen aset!\n\nSistem akan otomatis menghitung penyusutan dan membuat jurnal penyusutan bulanan.`);
        });

        function createInitialDepreciationEntries(asset) {
            const assetDate = new Date(asset.date);
            const currentDate = new Date();
            
            // Calculate months elapsed since asset acquisition
            const monthsElapsed = (currentDate.getFullYear() - assetDate.getFullYear()) * 12 + 
                                (currentDate.getMonth() - assetDate.getMonth());
            
            if (monthsElapsed > 0) {
                const monthlyDepreciation = calculateMonthlyDepreciation(asset);
                
                // Create depreciation transactions for each month
                for (let i = 0; i < monthsElapsed; i++) {
                    const depreciationDate = new Date(assetDate);
                    depreciationDate.setMonth(depreciationDate.getMonth() + i + 1);
                    
                    // Only create if within reasonable limits (e.g., last 24 months)
                    if (i < 24 && monthlyDepreciation > 0) {
                        const transaction = {
                            id: Date.now() + i,
                            date: depreciationDate.toISOString().split('T')[0],
                            description: `Penyusutan ${asset.name} - ${depreciationDate.toLocaleDateString('id-ID', {month: 'long', year: 'numeric'})}`,
                            debitAccount: '5001', // Depreciation expense
                            creditAccount: getAccumulatedDepreciationAccount(asset.accountCode),
                            amount: monthlyDepreciation
                        };
                        
                        transactions.push(transaction);
                        updateAccountBalances(transaction);
                    }
                }
                
                asset.accumulatedDepreciation = monthlyDepreciation * Math.min(monthsElapsed, 24);
            }
        }

        function calculateMonthlyDepreciation(asset) {
            const depreciableAmount = asset.cost - (asset.residualValue || 0);
            const totalMonths = asset.life * 12;
            
            switch (asset.depreciationMethod) {
                case 'straight-line':
                    return depreciableAmount / totalMonths;
                case 'declining-balance':
                    // Simplified declining balance - use straight line for monthly calculation
                    return depreciableAmount / totalMonths;
                case 'sum-of-years':
                    // Simplified sum of years - use straight line for monthly calculation
                    return depreciableAmount / totalMonths;
                default:
                    return depreciableAmount / totalMonths;
            }
        }

        function getAccumulatedDepreciationAccount(assetAccountCode) {
            // Try to find existing accumulated depreciation account
            const accumDepAccount = accounts.find(acc => 
                acc.name.toLowerCase().includes('akumulasi') && 
                acc.name.toLowerCase().includes('penyusutan')
            );
            
            if (accumDepAccount) {
                return accumDepAccount.code;
            }
            
            // Create accumulated depreciation account if not exists
            const newAccumDepAccount = {
                code: generateAccountCode('asset'),
                name: `Akumulasi Penyusutan - ${accounts.find(acc => acc.code === assetAccountCode)?.name || 'Aset'}`,
                type: 'asset',
                balance: 0
            };
            
            accounts.push(newAccumDepAccount);
            return newAccumDepAccount.code;
        }

        function viewAssetDetails(accountCode) {
            const asset = assets.find(a => a.accountCode === accountCode);
            const account = accounts.find(acc => acc.code === accountCode);
            
            if (!asset || !account) return;
            
            const currentDepreciation = calculateDepreciation(asset);
            const bookValue = asset.cost - currentDepreciation;
            const monthlyDepreciation = calculateMonthlyDepreciation(asset);
            
            // Calculate depreciation schedule
            const schedule = generateDepreciationSchedule(asset);
            
            const content = `
                <div class="space-y-6">
                    <!-- Asset Summary -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="bg-white/5 p-4 rounded-lg">
                            <h4 class="font-semibold mb-3 text-accent">üìã Informasi Aset</h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Nama Aset:</span>
                                    <span class="font-semibold">${asset.name}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Kategori:</span>
                                    <span>${getCategoryName(asset.category)}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Kode Akun:</span>
                                    <span class="font-mono">${account.code} - ${account.name}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Tanggal Perolehan:</span>
                                    <span>${new Date(asset.date).toLocaleDateString('id-ID')}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Umur Ekonomis:</span>
                                    <span>${asset.life} tahun</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Metode Penyusutan:</span>
                                    <span>${getDepreciationMethodName(asset.depreciationMethod)}</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="bg-white/5 p-4 rounded-lg">
                            <h4 class="font-semibold mb-3 text-success">üí∞ Nilai Aset</h4>
                            <div class="space-y-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Nilai Perolehan:</span>
                                    <span class="font-semibold">Rp ${asset.cost.toLocaleString('id-ID')}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Nilai Residu:</span>
                                    <span>Rp ${(asset.residualValue || 0).toLocaleString('id-ID')}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Akumulasi Penyusutan:</span>
                                    <span class="text-danger">Rp ${currentDepreciation.toLocaleString('id-ID')}</span>
                                </div>
                                <div class="flex justify-between border-t border-white/20 pt-2">
                                    <span class="text-gray-300 font-semibold">Nilai Buku:</span>
                                    <span class="font-bold text-accent">Rp ${bookValue.toLocaleString('id-ID')}</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-300">Penyusutan/Bulan:</span>
                                    <span class="text-warning">Rp ${monthlyDepreciation.toLocaleString('id-ID')}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Depreciation Progress -->
                    <div class="bg-white/5 p-4 rounded-lg">
                        <h4 class="font-semibold mb-3 text-warning">üìà Progress Penyusutan</h4>
                        <div class="mb-3">
                            <div class="flex justify-between text-sm mb-1">
                                <span>Progress Penyusutan</span>
                                <span>${((currentDepreciation / (asset.cost - (asset.residualValue || 0))) * 100).toFixed(1)}%</span>
                            </div>
                            <div class="w-full bg-gray-700 rounded-full h-2">
                                <div class="bg-warning h-2 rounded-full" style="width: ${Math.min(((currentDepreciation / (asset.cost - (asset.residualValue || 0))) * 100), 100)}%"></div>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                            <div class="text-center">
                                <div class="text-gray-300">Umur Aset</div>
                                <div class="font-semibold">${((new Date() - new Date(asset.date)) / (365.25 * 24 * 60 * 60 * 1000)).toFixed(1)} tahun</div>
                            </div>
                            <div class="text-center">
                                <div class="text-gray-300">Sisa Umur</div>
                                <div class="font-semibold">${Math.max(0, asset.life - ((new Date() - new Date(asset.date)) / (365.25 * 24 * 60 * 60 * 1000))).toFixed(1)} tahun</div>
                            </div>
                            <div class="text-center">
                                <div class="text-gray-300">Status</div>
                                <div class="font-semibold ${bookValue > (asset.residualValue || 0) ? 'text-success' : 'text-warning'}">
                                    ${bookValue > (asset.residualValue || 0) ? 'Aktif' : 'Habis Disusutkan'}
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Depreciation Schedule -->
                    <div class="bg-white/5 p-4 rounded-lg">
                        <h4 class="font-semibold mb-3 text-purple-400">üìÖ Jadwal Penyusutan (5 Tahun Pertama)</h4>
                        <div class="overflow-x-auto">
                            <table class="w-full text-xs">
                                <thead class="bg-white/10">
                                    <tr>
                                        <th class="px-2 py-2 text-left">Tahun</th>
                                        <th class="px-2 py-2 text-right">Penyusutan</th>
                                        <th class="px-2 py-2 text-right">Akumulasi</th>
                                        <th class="px-2 py-2 text-right">Nilai Buku</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${schedule.slice(0, 5).map(item => `
                                        <tr class="border-b border-white/10">
                                            <td class="px-2 py-2">${item.year}</td>
                                            <td class="px-2 py-2 text-right">Rp ${item.depreciation.toLocaleString('id-ID')}</td>
                                            <td class="px-2 py-2 text-right">Rp ${item.accumulated.toLocaleString('id-ID')}</td>
                                            <td class="px-2 py-2 text-right font-semibold">Rp ${item.bookValue.toLocaleString('id-ID')}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                    
                    <!-- Actions -->
                    <div class="flex flex-wrap gap-2">
                        <button onclick="editAssetFromAccount('${accountCode}')" 
                                class="bg-warning hover:bg-yellow-600 px-4 py-2 rounded-lg font-semibold transition-colors">
                            ‚úèÔ∏è Edit Aset
                        </button>
                        <button onclick="createDepreciationEntry('${accountCode}')" 
                                class="bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded-lg font-semibold transition-colors">
                            üìù Buat Jurnal Penyusutan
                        </button>
                        <button onclick="disconnectAsset('${accountCode}')" 
                                class="bg-danger hover:bg-red-600 px-4 py-2 rounded-lg font-semibold transition-colors">
                            üîó Putus Koneksi
                        </button>
                    </div>
                    
                    ${asset.description ? `
                    <div class="bg-white/5 p-4 rounded-lg">
                        <h4 class="font-semibold mb-2 text-gray-300">üìù Keterangan</h4>
                        <p class="text-sm text-gray-400">${asset.description}</p>
                    </div>
                    ` : ''}
                </div>
            `;
            
            document.getElementById('assetDetailsContent').innerHTML = content;
            document.getElementById('assetDetailsModal').classList.remove('hidden');
            document.getElementById('assetDetailsModal').classList.add('flex');
        }

        function hideAssetDetailsModal() {
            document.getElementById('assetDetailsModal').classList.add('hidden');
            document.getElementById('assetDetailsModal').classList.remove('flex');
        }

        function generateDepreciationSchedule(asset) {
            const schedule = [];
            const depreciableAmount = asset.cost - (asset.residualValue || 0);
            let remainingValue = asset.cost;
            let accumulatedDepreciation = 0;
            
            for (let year = 1; year <= asset.life; year++) {
                let yearlyDepreciation = 0;
                
                switch (asset.depreciationMethod) {
                    case 'straight-line':
                        yearlyDepreciation = depreciableAmount / asset.life;
                        break;
                    case 'declining-balance':
                        const rate = 2 / asset.life;
                        yearlyDepreciation = Math.min(remainingValue * rate, remainingValue - (asset.residualValue || 0));
                        break;
                    case 'sum-of-years':
                        const sumOfYears = (asset.life * (asset.life + 1)) / 2;
                        yearlyDepreciation = (depreciableAmount * (asset.life - year + 1)) / sumOfYears;
                        break;
                }
                
                accumulatedDepreciation += yearlyDepreciation;
                remainingValue -= yearlyDepreciation;
                
                schedule.push({
                    year: year,
                    depreciation: yearlyDepreciation,
                    accumulated: accumulatedDepreciation,
                    bookValue: Math.max(remainingValue, asset.residualValue || 0)
                });
            }
            
            return schedule;
        }

        function updateAssetFromAccount(accountCode) {
            const asset = assets.find(a => a.accountCode === accountCode);
            const account = accounts.find(acc => acc.code === accountCode);
            
            if (!asset || !account) return;
            
            if (confirm(`Sinkronisasi nilai aset dengan saldo akun?\n\nNilai saat ini: Rp ${asset.cost.toLocaleString('id-ID')}\nSaldo akun: Rp ${account.balance.toLocaleString('id-ID')}`)) {
                asset.cost = account.balance;
                asset.accumulatedDepreciation = 0; // Reset accumulated depreciation
                
                saveToLocalStorage();
                loadSettings();
                alert('Nilai aset berhasil disinkronisasi dengan saldo akun!');
            }
        }

        function createDepreciationEntry(accountCode) {
            const asset = assets.find(a => a.accountCode === accountCode);
            if (!asset) return;
            
            const monthlyDepreciation = calculateMonthlyDepreciation(asset);
            const currentDate = new Date();
            
            if (monthlyDepreciation <= 0) {
                alert('Aset ini sudah habis disusutkan atau tidak ada nilai yang dapat disusutkan.');
                return;
            }
            
            const transaction = {
                id: Date.now(),
                date: currentDate.toISOString().split('T')[0],
                description: `Penyusutan ${asset.name} - ${currentDate.toLocaleDateString('id-ID', {month: 'long', year: 'numeric'})}`,
                debitAccount: '5001', // Depreciation expense
                creditAccount: getAccumulatedDepreciationAccount(accountCode),
                amount: monthlyDepreciation
            };
            
            transactions.push(transaction);
            updateAccountBalances(transaction);
            asset.accumulatedDepreciation += monthlyDepreciation;
            
            saveToLocalStorage();
            updateDashboard();
            hideAssetDetailsModal();
            
            alert(`‚úÖ Jurnal penyusutan berhasil dibuat!\n\nBeban Penyusutan: Rp ${monthlyDepreciation.toLocaleString('id-ID')}`);
        }

        function disconnectAsset(accountCode) {
            const asset = assets.find(a => a.accountCode === accountCode);
            if (!asset) return;
            
            if (!confirm(`Yakin ingin memutus koneksi aset "${asset.name}" dengan akun?\n\nAset akan tetap ada di manajemen aset tapi tidak terintegrasi dengan akun.`)) {
                return;
            }
            
            asset.accountCode = null;
            
            saveToLocalStorage();
            loadSettings();
            hideAssetDetailsModal();
            
            alert('Koneksi aset dengan akun berhasil diputus!');
        }

        function loadAssets() {
            const tbody = document.getElementById('assetsList');
            
            if (assets.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="px-6 py-8 text-center text-gray-400">Belum ada aset</td></tr>';
                updateAssetSummary();
                return;
            }
            
            tbody.innerHTML = assets.map(asset => {
                const depreciation = calculateDepreciation(asset);
                const bookValue = asset.cost - depreciation;
                
                return `
                    <tr class="border-b border-white/10 hover:bg-white/5">
                        <td class="px-6 py-4">${asset.name}</td>
                        <td class="px-6 py-4">${getCategoryName(asset.category)}</td>
                        <td class="px-6 py-4">Rp ${asset.cost.toLocaleString('id-ID')}</td>
                        <td class="px-6 py-4">${getDepreciationMethodName(asset.depreciationMethod)}</td>
                        <td class="px-6 py-4">Rp ${bookValue.toLocaleString('id-ID')}</td>
                        <td class="px-6 py-4">
                            <button onclick="deleteAsset(${asset.id})" class="text-danger hover:text-red-400 transition-colors">Hapus</button>
                        </td>
                    </tr>
                `;
            }).join('');
            
            updateAssetSummary();
        }

        function calculateDepreciation(asset) {
            const currentDate = new Date();
            const assetDate = new Date(asset.date);
            const monthsElapsed = (currentDate.getFullYear() - assetDate.getFullYear()) * 12 + (currentDate.getMonth() - assetDate.getMonth());
            
            let annualDepreciation = 0;
            
            switch (asset.depreciationMethod) {
                case 'straight-line':
                    annualDepreciation = asset.cost / asset.life;
                    break;
                case 'declining-balance':
                    const rate = 2 / asset.life;
                    let remainingValue = asset.cost;
                    for (let year = 0; year < Math.floor(monthsElapsed / 12); year++) {
                        annualDepreciation = remainingValue * rate;
                        remainingValue -= annualDepreciation;
                    }
                    break;
                case 'sum-of-years':
                    const sumOfYears = (asset.life * (asset.life + 1)) / 2;
                    const currentYear = Math.floor(monthsElapsed / 12) + 1;
                    if (currentYear <= asset.life) {
                        annualDepreciation = (asset.cost * (asset.life - currentYear + 1)) / sumOfYears;
                    }
                    break;
            }
            
            return Math.min((annualDepreciation * monthsElapsed) / 12, asset.cost);
        }

        function updateAssetSummary() {
            const totalValue = assets.reduce((sum, asset) => sum + asset.cost, 0);
            const totalDepreciation = assets.reduce((sum, asset) => sum + calculateDepreciation(asset), 0);
            const netValue = totalValue - totalDepreciation;
            
            document.getElementById('totalAssetValue').textContent = `Rp ${totalValue.toLocaleString('id-ID')}`;
            document.getElementById('totalDepreciation').textContent = `Rp ${totalDepreciation.toLocaleString('id-ID')}`;
            document.getElementById('netAssetValue').textContent = `Rp ${netValue.toLocaleString('id-ID')}`;
        }

        function getCategoryName(category) {
            const categories = {
                'building': 'Bangunan',
                'equipment': 'Peralatan',
                'vehicle': 'Kendaraan',
                'furniture': 'Furniture',
                'other': 'Lainnya'
            };
            return categories[category] || category;
        }

        function getDepreciationMethodName(method) {
            const methods = {
                'straight-line': 'Garis Lurus',
                'declining-balance': 'Saldo Menurun',
                'sum-of-years': 'Jumlah Angka Tahun'
            };
            return methods[method] || method;
        }

        function deleteAsset(id) {
            if (confirm('Yakin ingin menghapus aset ini?')) {
                assets = assets.filter(a => a.id !== id);
                loadAssets();
                updateDashboard();
                saveToLocalStorage();
            }
        }

        // Account Management
        function showAccountForm() {
            // Reset form for new account
            document.getElementById('accountForm').reset();
            delete document.getElementById('accountForm').dataset.editing;
            document.querySelector('#accountModal h3').textContent = 'Tambah Akun';
            document.getElementById('accountCode').disabled = false;
            
            document.getElementById('accountModal').classList.remove('hidden');
            document.getElementById('accountModal').classList.add('flex');
        }

        function hideAccountForm() {
            document.getElementById('accountModal').classList.add('hidden');
            document.getElementById('accountModal').classList.remove('flex');
            document.getElementById('accountForm').reset();
            delete document.getElementById('accountForm').dataset.editing;
            
            // Reset form title
            document.querySelector('#accountModal h3').textContent = 'Tambah Akun';
        }

        function editAccount(accountCode) {
            const account = accounts.find(acc => acc.code === accountCode);
            if (!account) return;
            
            // Fill form with existing data
            document.getElementById('accountCode').value = account.code;
            document.getElementById('accountName').value = account.name;
            document.getElementById('accountType').value = account.type;
            
            // Mark as editing
            document.getElementById('accountForm').dataset.editing = accountCode;
            
            // Change form title
            document.querySelector('#accountModal h3').textContent = 'Edit Akun';
            
            // Disable code field for editing
            document.getElementById('accountCode').disabled = true;
            
            // Show modal
            document.getElementById('accountModal').classList.remove('hidden');
            document.getElementById('accountModal').classList.add('flex');
        }

        function deleteAccount(accountCode) {
            const account = accounts.find(acc => acc.code === accountCode);
            if (!account) return;
            
            // Check if account is used in transactions
            const isUsed = transactions.some(t => 
                t.debitAccount === accountCode || t.creditAccount === accountCode
            );
            
            if (isUsed) {
                alert(`Akun "${account.name}" tidak dapat dihapus karena sudah digunakan dalam transaksi.`);
                return;
            }
            
            if (!confirm(`Yakin ingin menghapus akun "${account.name}" (${accountCode})?`)) {
                return;
            }
            
            // Remove account
            accounts = accounts.filter(acc => acc.code !== accountCode);
            
            loadSettings();
            populateAccountSelects();
            saveToLocalStorage();
            
            alert('Akun berhasil dihapus!');
        }

        document.getElementById('accountForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const accountType = document.getElementById('accountType').value;
            const accountCode = document.getElementById('accountCode').value || generateAccountCode(accountType);
            const isEditing = document.getElementById('accountForm').dataset.editing;
            
            if (isEditing) {
                // Update existing account
                const existingAccount = accounts.find(acc => acc.code === isEditing);
                if (existingAccount) {
                    existingAccount.name = document.getElementById('accountName').value;
                    existingAccount.type = accountType;
                    // Keep the existing code and balance
                }
                delete document.getElementById('accountForm').dataset.editing;
            } else {
                // Create new account
                const account = {
                    code: accountCode,
                    name: document.getElementById('accountName').value,
                    type: accountType,
                    balance: 0
                };
                
                accounts.push(account);
            }
            
            loadSettings();
            hideAccountForm();
            populateAccountSelects();
            saveToLocalStorage();
        });

        // Auto-generate account code when type changes
        document.getElementById('accountType').addEventListener('change', function() {
            const code = generateAccountCode(this.value);
            document.getElementById('accountCode').value = code;
        });

        function loadSettings() {
            const accountsList = document.getElementById('accountsList');
            
            accountsList.innerHTML = accounts.map(account => {
                const isAssetAccount = account.type === 'asset';
                const isFixedAsset = isAssetAccount && (
                    account.name.toLowerCase().includes('peralatan') ||
                    account.name.toLowerCase().includes('gedung') ||
                    account.name.toLowerCase().includes('bangunan') ||
                    account.name.toLowerCase().includes('kendaraan') ||
                    account.name.toLowerCase().includes('mesin') ||
                    account.name.toLowerCase().includes('furniture') ||
                    account.name.toLowerCase().includes('komputer') ||
                    account.code.startsWith('13') ||
                    account.code.startsWith('15')
                );
                const existingAsset = assets.find(asset => asset.accountCode === account.code);
                
                return `
                    <div class="flex justify-between items-center p-2 sm:p-3 bg-white/5 rounded-lg">
                        <div class="flex-1">
                            <div class="flex items-center gap-2 mb-1">
                                <span class="font-medium text-sm sm:text-base">${account.code} - ${account.name}</span>
                                <span class="text-xs sm:text-sm text-gray-400">(${getAccountTypeName(account.type)})</span>
                                ${isFixedAsset ? '<span class="text-xs px-2 py-1 rounded bg-purple-500/30 text-purple-300">Aset Tetap</span>' : ''}
                                ${existingAsset ? '<span class="text-xs px-2 py-1 rounded bg-green-500/30 text-green-300">‚úì Terintegrasi</span>' : ''}
                            </div>
                            <div class="text-xs text-gray-500 mt-1">
                                Saldo: Rp ${account.balance.toLocaleString('id-ID')}
                                ${existingAsset ? ` | Penyusutan: Rp ${calculateDepreciation(existingAsset).toLocaleString('id-ID')}` : ''}
                            </div>
                            ${existingAsset ? `
                                <div class="text-xs text-blue-300 mt-1">
                                    Nilai Buku: Rp ${(existingAsset.cost - calculateDepreciation(existingAsset)).toLocaleString('id-ID')} | 
                                    Metode: ${getDepreciationMethodName(existingAsset.depreciationMethod)}
                                </div>
                            ` : ''}
                        </div>
                        <div class="flex items-center gap-1 flex-wrap">
                            ${isAssetAccount && !existingAsset ? `
                                <button onclick="convertToAsset('${account.code}')" 
                                        class="bg-purple-600 hover:bg-purple-700 px-2 py-1 rounded text-xs transition-colors mb-1"
                                        title="Konversi ke Manajemen Aset">
                                    üè¢ Kelola Aset
                                </button>
                            ` : ''}
                            ${existingAsset ? `
                                <button onclick="viewAssetDetails('${account.code}')" 
                                        class="bg-blue-600 hover:bg-blue-700 px-2 py-1 rounded text-xs transition-colors mb-1"
                                        title="Lihat Detail Aset">
                                    üìä Detail Aset
                                </button>
                                <button onclick="updateAssetFromAccount('${account.code}')" 
                                        class="bg-green-600 hover:bg-green-700 px-2 py-1 rounded text-xs transition-colors mb-1"
                                        title="Sinkronisasi Nilai">
                                    üîÑ Sync
                                </button>
                            ` : ''}
                            <button onclick="editAccount('${account.code}')" 
                                    class="bg-warning hover:bg-yellow-600 px-2 py-1 rounded text-xs transition-colors mb-1">
                                ‚úèÔ∏è Edit
                            </button>
                            <button onclick="deleteAccount('${account.code}')" 
                                    class="bg-danger hover:bg-red-600 px-2 py-1 rounded text-xs transition-colors mb-1">
                                üóëÔ∏è Hapus
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
            
            // Load business info
            document.getElementById('companyName').value = businessInfo.companyName || '';
            document.getElementById('companyAddress').value = businessInfo.companyAddress || '';
            document.getElementById('companyPhone').value = businessInfo.companyPhone || '';
            document.getElementById('companyEmail').value = businessInfo.companyEmail || '';
            document.getElementById('companyNPWP').value = businessInfo.companyNPWP || '';
            document.getElementById('businessType').value = businessInfo.businessType || '';
            
            // Load current settings
            document.getElementById('startDate').value = settings.startDate;
            document.getElementById('initialCash').value = settings.initialCash;
            document.getElementById('defaultDepreciationMethod').value = settings.defaultDepreciationMethod;
            document.getElementById('currency').value = settings.currency;
            document.getElementById('taxYear').value = settings.taxYear;
            
            // Populate account type selects
            populateAccountTypeSelect();
            
            updateDataStats();
        }

        function getAccountTypeName(type) {
            if (accountTypes[type]) {
                return accountTypes[type].name;
            }
            
            // Fallback for backward compatibility
            const types = {
                'asset': 'Aset',
                'liability': 'Kewajiban',
                'equity': 'Ekuitas',
                'revenue': 'Pendapatan',
                'expense': 'Beban'
            };
            return types[type] || type;
        }

        // Account Type Management Functions
        function showAccountTypeManager() {
            document.getElementById('accountTypeModal').classList.remove('hidden');
            document.getElementById('accountTypeModal').classList.add('flex');
            loadAccountTypesList();
        }

        function hideAccountTypeManager() {
            document.getElementById('accountTypeModal').classList.add('hidden');
            document.getElementById('accountTypeModal').classList.remove('flex');
        }

        // Add keyboard shortcut to close modal (ESC key)
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                const modal = document.getElementById('accountTypeModal');
                if (modal && !modal.classList.contains('hidden')) {
                    hideAccountTypeManager();
                }
            }
        });

        function loadAccountTypesList() {
            const container = document.getElementById('accountTypesList');
            
            const typeEntries = Object.values(accountTypes);
            
            container.innerHTML = typeEntries.map(type => {
                const accountCount = accounts.filter(acc => acc.type === type.code).length;
                const canDelete = !type.isDefault && accountCount === 0;
                
                return `
                    <div class="bg-white/10 p-4 rounded-lg">
                        <div class="flex justify-between items-start mb-2">
                            <div class="flex-1">
                                <div class="flex items-center gap-2 mb-1">
                                    <h5 class="font-semibold text-lg">${type.name}</h5>
                                    <span class="text-xs px-2 py-1 rounded ${type.nature === 'debit' ? 'bg-blue-500/30 text-blue-300' : 'bg-green-500/30 text-green-300'}">
                                        ${type.nature === 'debit' ? 'Debit' : 'Kredit'}
                                    </span>
                                    ${type.isDefault ? '<span class="text-xs px-2 py-1 rounded bg-gray-500/30 text-gray-300">Default</span>' : ''}
                                </div>
                                <p class="text-sm text-gray-300 mb-2">${type.description || 'Tidak ada deskripsi'}</p>
                                <div class="text-xs text-gray-400">
                                    <span>Kode: ${type.code}</span> ‚Ä¢ 
                                    <span>Range: ${type.startCode}+</span> ‚Ä¢ 
                                    <span>Akun: ${accountCount}</span>
                                </div>
                            </div>
                            <div class="flex gap-2 ml-4">
                                <button onclick="editAccountType('${type.code}')" 
                                        class="bg-warning hover:bg-yellow-600 px-3 py-1 rounded text-xs transition-colors">
                                    ‚úèÔ∏è Edit
                                </button>
                                ${canDelete ? `
                                    <button onclick="deleteAccountType('${type.code}')" 
                                            class="bg-danger hover:bg-red-600 px-3 py-1 rounded text-xs transition-colors">
                                        üóëÔ∏è Hapus
                                    </button>
                                ` : `
                                    <button disabled class="bg-gray-600 px-3 py-1 rounded text-xs opacity-50 cursor-not-allowed">
                                        ${type.isDefault ? 'üîí Default' : 'üìé Digunakan'}
                                    </button>
                                `}
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function resetAccountTypeForm() {
            document.getElementById('accountTypeForm').reset();
        }

        document.getElementById('accountTypeForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const code = document.getElementById('newAccountTypeCode').value.toLowerCase().trim();
            const name = document.getElementById('newAccountTypeName').value.trim();
            const startCode = parseInt(document.getElementById('newAccountTypeStartCode').value);
            const nature = document.getElementById('newAccountTypeNature').value;
            const description = document.getElementById('newAccountTypeDescription').value.trim();
            
            // Basic validation only
            if (!code || !name || !startCode || !nature) {
                alert('Semua field wajib diisi!');
                return;
            }
            
            // Validate code uniqueness against existing account types
            if (accountTypes[code]) {
                alert('Kode jenis akun sudah ada! Gunakan kode yang berbeda.');
                return;
            }
            
            // Create new account type
            accountTypes[code] = {
                code: code,
                name: name,
                startCode: startCode,
                currentCode: startCode,
                nature: nature,
                description: description,
                isDefault: false
            };
            
            // Update account code rules
            accountCodeRules[code] = {
                start: startCode,
                current: startCode
            };
            
            saveToLocalStorage();
            loadAccountTypesList();
            populateAccountTypeSelect();
            resetAccountTypeForm();
            
            alert(`Jenis akun "${name}" berhasil ditambahkan!`);
        });

        function editAccountType(typeCode) {
            const type = accountTypes[typeCode];
            if (!type) return;
            
            // Fill edit form
            document.getElementById('editAccountTypeCode').value = type.code;
            document.getElementById('editAccountTypeName').value = type.name;
            document.getElementById('editAccountTypeNature').value = type.nature;
            document.getElementById('editAccountTypeDescription').value = type.description || '';
            
            // Show edit modal
            document.getElementById('editAccountTypeModal').classList.remove('hidden');
            document.getElementById('editAccountTypeModal').classList.add('flex');
        }

        function hideEditAccountTypeModal() {
            document.getElementById('editAccountTypeModal').classList.add('hidden');
            document.getElementById('editAccountTypeModal').classList.remove('flex');
        }

        document.getElementById('editAccountTypeForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const code = document.getElementById('editAccountTypeCode').value;
            const name = document.getElementById('editAccountTypeName').value.trim();
            const nature = document.getElementById('editAccountTypeNature').value;
            const description = document.getElementById('editAccountTypeDescription').value.trim();
            
            if (!accountTypes[code]) {
                alert('Jenis akun tidak ditemukan!');
                return;
            }
            
            // Update account type
            accountTypes[code].name = name;
            accountTypes[code].nature = nature;
            accountTypes[code].description = description;
            
            saveToLocalStorage();
            loadAccountTypesList();
            populateAccountTypeSelect();
            hideEditAccountTypeModal();
            
            alert(`Jenis akun "${name}" berhasil diperbarui!`);
        });

        function deleteAccountType(typeCode) {
            const type = accountTypes[typeCode];
            if (!type) return;
            
            // Check if it's a default type
            if (type.isDefault) {
                alert('Jenis akun default tidak dapat dihapus!');
                return;
            }
            
            // Check if any accounts use this type
            const accountsUsingType = accounts.filter(acc => acc.type === typeCode);
            if (accountsUsingType.length > 0) {
                alert(`Tidak dapat menghapus jenis akun "${type.name}" karena masih digunakan oleh ${accountsUsingType.length} akun!`);
                return;
            }
            
            if (!confirm(`Yakin ingin menghapus jenis akun "${type.name}"?`)) {
                return;
            }
            
            // Delete account type
            delete accountTypes[typeCode];
            delete accountCodeRules[typeCode];
            
            saveToLocalStorage();
            loadAccountTypesList();
            populateAccountTypeSelect();
            
            alert(`Jenis akun "${type.name}" berhasil dihapus!`);
        }

        function populateAccountTypeSelect() {
            const selects = [
                document.getElementById('accountType'),
                document.getElementById('filterType') // if exists
            ];
            
            selects.forEach(select => {
                if (!select) return;
                
                const currentValue = select.value;
                select.innerHTML = '<option value="">Pilih Jenis</option>';
                
                Object.values(accountTypes).forEach(type => {
                    const option = document.createElement('option');
                    option.value = type.code;
                    option.textContent = type.name;
                    select.appendChild(option);
                });
                
                // Restore previous selection if still valid
                if (currentValue && accountTypes[currentValue]) {
                    select.value = currentValue;
                }
            });
        }

        function saveBusinessInfo() {
            businessInfo.companyName = document.getElementById('companyName').value;
            businessInfo.companyAddress = document.getElementById('companyAddress').value;
            businessInfo.companyPhone = document.getElementById('companyPhone').value;
            businessInfo.companyEmail = document.getElementById('companyEmail').value;
            businessInfo.companyNPWP = document.getElementById('companyNPWP').value;
            businessInfo.businessType = document.getElementById('businessType').value;
            
            saveToLocalStorage();
            alert('Informasi bisnis berhasil disimpan!');
        }

        function saveInitialSettings() {
            settings.startDate = document.getElementById('startDate').value;
            settings.initialCash = parseFloat(document.getElementById('initialCash').value) || 0;
            settings.defaultDepreciationMethod = document.getElementById('defaultDepreciationMethod').value;
            settings.currency = document.getElementById('currency').value;
            settings.taxYear = document.getElementById('taxYear').value;
            
            // Update cash account balance
            const cashAccount = accounts.find(acc => acc.code === '1001');
            if (cashAccount) {
                cashAccount.balance = settings.initialCash;
            }
            
            saveToLocalStorage();
            alert('Pengaturan berhasil disimpan!');
            updateDashboard();
        }

        // Period Control Functions
        function setQuickPeriod() {
            const quickPeriod = document.getElementById('quickPeriod').value;
            const today = new Date();
            let startDate, endDate;
            
            switch (quickPeriod) {
                case 'today':
                    startDate = endDate = today;
                    break;
                case 'yesterday':
                    const yesterday = new Date(today);
                    yesterday.setDate(today.getDate() - 1);
                    startDate = endDate = yesterday;
                    break;
                case 'this-week':
                    const thisWeekStart = new Date(today);
                    thisWeekStart.setDate(today.getDate() - today.getDay());
                    startDate = thisWeekStart;
                    endDate = today;
                    break;
                case 'last-week':
                    const lastWeekEnd = new Date(today);
                    lastWeekEnd.setDate(today.getDate() - today.getDay() - 1);
                    const lastWeekStart = new Date(lastWeekEnd);
                    lastWeekStart.setDate(lastWeekEnd.getDate() - 6);
                    startDate = lastWeekStart;
                    endDate = lastWeekEnd;
                    break;
                case 'this-month':
                    startDate = new Date(today.getFullYear(), today.getMonth(), 1);
                    endDate = today;
                    break;
                case 'last-month':
                    const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);
                    const lastMonthEnd = new Date(today.getFullYear(), today.getMonth(), 0);
                    startDate = lastMonth;
                    endDate = lastMonthEnd;
                    break;
                case 'this-quarter':
                    const quarterStart = new Date(today.getFullYear(), Math.floor(today.getMonth() / 3) * 3, 1);
                    startDate = quarterStart;
                    endDate = today;
                    break;
                case 'last-quarter':
                    const lastQuarterStart = new Date(today.getFullYear(), Math.floor(today.getMonth() / 3) * 3 - 3, 1);
                    const lastQuarterEnd = new Date(today.getFullYear(), Math.floor(today.getMonth() / 3) * 3, 0);
                    startDate = lastQuarterStart;
                    endDate = lastQuarterEnd;
                    break;
                case 'this-year':
                    startDate = new Date(today.getFullYear(), 0, 1);
                    endDate = today;
                    break;
                case 'last-year':
                    startDate = new Date(today.getFullYear() - 1, 0, 1);
                    endDate = new Date(today.getFullYear() - 1, 11, 31);
                    break;
                case 'all-time':
                    startDate = new Date('1900-01-01');
                    endDate = today;
                    break;
                default:
                    return;
            }
            
            document.getElementById('reportStartDate').value = startDate.toISOString().split('T')[0];
            document.getElementById('reportEndDate').value = endDate.toISOString().split('T')[0];
            
            // Clear validation message
            document.getElementById('periodValidation').classList.add('hidden');
        }

        function validateAndRefreshReports() {
            const startDate = document.getElementById('reportStartDate').value;
            const endDate = document.getElementById('reportEndDate').value;
            const validationDiv = document.getElementById('periodValidation');
            
            if (startDate && endDate && new Date(startDate) > new Date(endDate)) {
                validationDiv.classList.remove('hidden');
                return;
            }
            
            validationDiv.classList.add('hidden');
            
            // Clear current report content
            const reportContent = document.getElementById('reportContent');
            reportContent.innerHTML = `
                <div class="text-center text-gray-400">
                    <div class="mb-4">
                        <span class="text-4xl">üîÑ</span>
                    </div>
                    <h3 class="text-lg font-semibold mb-2">Periode Laporan Diperbarui</h3>
                    <p>Periode: ${startDate ? new Date(startDate).toLocaleDateString('id-ID') : 'Awal'} - ${endDate ? new Date(endDate).toLocaleDateString('id-ID') : 'Akhir'}</p>
                    <p class="mt-2">Pilih jenis laporan untuk melihat data dengan periode yang baru</p>
                </div>
            `;
            
            // Reset status indicators
            document.getElementById('balanceSheetStatus').textContent = 'Siap dibuat';
            document.getElementById('balanceSheetStatus').className = 'px-2 py-1 rounded bg-accent text-white';
            document.getElementById('incomeStatementStatus').textContent = 'Siap dibuat';
            document.getElementById('incomeStatementStatus').className = 'px-2 py-1 rounded bg-accent text-white';
            document.getElementById('cashFlowStatus').textContent = 'Siap dibuat';
            document.getElementById('cashFlowStatus').className = 'px-2 py-1 rounded bg-accent text-white';
        }

        function getReportPeriod() {
            const startDate = document.getElementById('reportStartDate').value;
            const endDate = document.getElementById('reportEndDate').value;
            
            return {
                startDate: startDate || '1900-01-01',
                endDate: endDate || '2100-12-31',
                startDateFormatted: startDate ? new Date(startDate).toLocaleDateString('id-ID') : 'Awal',
                endDateFormatted: endDate ? new Date(endDate).toLocaleDateString('id-ID') : 'Akhir'
            };
        }

        function getFilteredTransactions() {
            const period = getReportPeriod();
            
            return transactions.filter(transaction => {
                const transactionDate = new Date(transaction.date);
                const start = new Date(period.startDate);
                const end = new Date(period.endDate);
                
                return transactionDate >= start && transactionDate <= end;
            });
        }

        // Reports
        function generateReport(reportType) {
            const reportContent = document.getElementById('reportContent');
            const period = getReportPeriod();
            
            // Validate period
            if (new Date(period.startDate) > new Date(period.endDate)) {
                reportContent.innerHTML = `
                    <div class="text-center text-danger">
                        <div class="mb-4">
                            <span class="text-4xl">‚ö†Ô∏è</span>
                        </div>
                        <h3 class="text-lg font-semibold mb-2">Periode Tidak Valid</h3>
                        <p>Tanggal awal tidak boleh lebih besar dari tanggal akhir</p>
                    </div>
                `;
                return;
            }
            
            switch (reportType) {
                case 'balance-sheet':
                    generateBalanceSheet(reportContent, period);
                    updateReportStatus('balanceSheetStatus', 'Sudah dibuat');
                    break;
                case 'income-statement':
                    generateIncomeStatement(reportContent, period);
                    updateReportStatus('incomeStatementStatus', 'Sudah dibuat');
                    break;
                case 'cash-flow':
                    generateCashFlow(reportContent, period);
                    updateReportStatus('cashFlowStatus', 'Sudah dibuat');
                    break;
            }
        }

        function updateReportStatus(statusId, status) {
            const statusElement = document.getElementById(statusId);
            statusElement.textContent = status;
            statusElement.className = 'px-2 py-1 rounded bg-success text-white';
        }

        function generateBalanceSheet(container, period) {
            const filteredTransactions = getFilteredTransactions();
            
            // Calculate account balances for the period
            const accountBalances = {};
            accounts.forEach(acc => {
                accountBalances[acc.code] = 0;
            });
            
            // Calculate balances based on filtered transactions
            filteredTransactions.forEach(transaction => {
                const debitAccount = accounts.find(acc => acc.code === transaction.debitAccount);
                const creditAccount = accounts.find(acc => acc.code === transaction.creditAccount);
                
                if (debitAccount) {
                    if (debitAccount.type === 'asset' || debitAccount.type === 'expense') {
                        accountBalances[debitAccount.code] += transaction.amount;
                    } else {
                        accountBalances[debitAccount.code] -= transaction.amount;
                    }
                }
                
                if (creditAccount) {
                    if (creditAccount.type === 'liability' || creditAccount.type === 'equity' || creditAccount.type === 'revenue') {
                        accountBalances[creditAccount.code] += transaction.amount;
                    } else {
                        accountBalances[creditAccount.code] -= transaction.amount;
                    }
                }
            });
            
            // Get net income from income statement for the period
            const revenues = accounts.filter(acc => acc.type === 'revenue');
            const expenses = accounts.filter(acc => acc.type === 'expense');
            
            const totalRevenue = revenues.reduce((sum, acc) => sum + (accountBalances[acc.code] || 0), 0);
            const totalExpense = expenses.reduce((sum, acc) => sum + (accountBalances[acc.code] || 0), 0);
            const netIncome = totalRevenue - totalExpense;
            
            // Separate assets by type
            const currentAssets = accounts.filter(acc => 
                acc.type === 'asset' && 
                (acc.name.toLowerCase().includes('kas') || 
                 acc.name.toLowerCase().includes('bank') || 
                 acc.name.toLowerCase().includes('piutang') || 
                 acc.name.toLowerCase().includes('persediaan'))
            );
            
            const fixedAssets = accounts.filter(acc => 
                acc.type === 'asset' && 
                !currentAssets.includes(acc)
            );
            
            const currentLiabilities = accounts.filter(acc => 
                acc.type === 'liability' && 
                (acc.name.toLowerCase().includes('utang') || 
                 acc.name.toLowerCase().includes('hutang'))
            );
            
            const longTermLiabilities = accounts.filter(acc => 
                acc.type === 'liability' && 
                !currentLiabilities.includes(acc)
            );
            
            const equity = accounts.filter(acc => acc.type === 'equity');
            
            const totalCurrentAssets = currentAssets.reduce((sum, acc) => sum + (accountBalances[acc.code] || 0), 0);
            const totalFixedAssets = fixedAssets.reduce((sum, acc) => sum + (accountBalances[acc.code] || 0), 0);
            const totalAssets = totalCurrentAssets + totalFixedAssets;
            
            const totalCurrentLiabilities = currentLiabilities.reduce((sum, acc) => sum + (accountBalances[acc.code] || 0), 0);
            const totalLongTermLiabilities = longTermLiabilities.reduce((sum, acc) => sum + (accountBalances[acc.code] || 0), 0);
            const totalLiabilities = totalCurrentLiabilities + totalLongTermLiabilities;
            
            const totalEquity = equity.reduce((sum, acc) => sum + (accountBalances[acc.code] || 0), 0) + netIncome;
            
            const isBalanced = Math.abs(totalAssets - (totalLiabilities + totalEquity)) < 1;
            const difference = totalAssets - (totalLiabilities + totalEquity);
            
            container.innerHTML = `
                <div class="flex justify-between items-center mb-6">
                    <div>
                        <h3 class="text-2xl font-bold">üìä NERACA</h3>
                        <p class="text-sm text-gray-400">Periode: ${period.startDateFormatted} - ${period.endDateFormatted}</p>
                        <p class="text-xs text-gray-500">Dibuat: ${new Date().toLocaleString('id-ID')}</p>
                    </div>
                    <div class="text-right">
                        <div class="flex items-center gap-2 mb-2">
                            <span class="text-sm">Status Balance:</span>
                            <span class="px-2 py-1 rounded text-xs ${isBalanced ? 'bg-success text-white' : 'bg-danger text-white'}">
                                ${isBalanced ? '‚úì Seimbang' : '‚ö† Tidak Seimbang'}
                            </span>
                        </div>
                        ${!isBalanced ? `<p class="text-xs text-danger">Selisih: Rp ${Math.abs(difference).toLocaleString('id-ID')}</p>` : ''}
                        <button onclick="exportReportCSV('balance-sheet')" class="bg-success hover:bg-green-600 px-3 py-1 rounded text-xs transition-colors mt-2">
                            üìä Export CSV
                        </button>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div>
                        <h4 class="text-lg font-semibold mb-4 text-accent">ASET</h4>
                        
                        <h5 class="font-medium mb-2 text-blue-300">Aset Lancar:</h5>
                        ${currentAssets.map(acc => `
                            <div class="flex justify-between py-2 border-b border-white/10 pl-4">
                                <span>${acc.name}</span>
                                <span>Rp ${(accountBalances[acc.code] || 0).toLocaleString('id-ID')}</span>
                            </div>
                        `).join('')}
                        <div class="flex justify-between py-2 font-semibold border-b-2 border-blue-300">
                            <span>Total Aset Lancar</span>
                            <span>Rp ${totalCurrentAssets.toLocaleString('id-ID')}</span>
                        </div>
                        
                        <h5 class="font-medium mb-2 mt-4 text-blue-300">Aset Tetap:</h5>
                        ${fixedAssets.map(acc => `
                            <div class="flex justify-between py-2 border-b border-white/10 pl-4">
                                <span>${acc.name}</span>
                                <span>Rp ${(accountBalances[acc.code] || 0).toLocaleString('id-ID')}</span>
                            </div>
                        `).join('')}
                        <div class="flex justify-between py-2 font-semibold border-b-2 border-blue-300">
                            <span>Total Aset Tetap</span>
                            <span>Rp ${totalFixedAssets.toLocaleString('id-ID')}</span>
                        </div>
                        
                        <div class="flex justify-between py-3 font-bold text-lg border-t-4 border-accent mt-4">
                            <span>TOTAL ASET</span>
                            <span>Rp ${totalAssets.toLocaleString('id-ID')}</span>
                        </div>
                    </div>
                    
                    <div>
                        <h4 class="text-lg font-semibold mb-4 text-warning">KEWAJIBAN & EKUITAS</h4>
                        
                        <h5 class="font-medium mb-2 text-red-300">Kewajiban Lancar:</h5>
                        ${currentLiabilities.map(acc => `
                            <div class="flex justify-between py-2 border-b border-white/10 pl-4">
                                <span>${acc.name}</span>
                                <span>Rp ${(accountBalances[acc.code] || 0).toLocaleString('id-ID')}</span>
                            </div>
                        `).join('')}
                        <div class="flex justify-between py-2 font-semibold border-b-2 border-red-300">
                            <span>Total Kewajiban Lancar</span>
                            <span>Rp ${totalCurrentLiabilities.toLocaleString('id-ID')}</span>
                        </div>
                        
                        ${longTermLiabilities.length > 0 ? `
                        <h5 class="font-medium mb-2 mt-4 text-red-300">Kewajiban Jangka Panjang:</h5>
                        ${longTermLiabilities.map(acc => `
                            <div class="flex justify-between py-2 border-b border-white/10 pl-4">
                                <span>${acc.name}</span>
                                <span>Rp ${(accountBalances[acc.code] || 0).toLocaleString('id-ID')}</span>
                            </div>
                        `).join('')}
                        <div class="flex justify-between py-2 font-semibold border-b-2 border-red-300">
                            <span>Total Kewajiban Jangka Panjang</span>
                            <span>Rp ${totalLongTermLiabilities.toLocaleString('id-ID')}</span>
                        </div>
                        ` : ''}
                        
                        <div class="flex justify-between py-2 font-bold border-t-2 border-red-400 mt-2">
                            <span>TOTAL KEWAJIBAN</span>
                            <span>Rp ${totalLiabilities.toLocaleString('id-ID')}</span>
                        </div>
                        
                        <h5 class="font-medium mb-2 mt-4 text-green-300">Ekuitas:</h5>
                        ${equity.map(acc => `
                            <div class="flex justify-between py-2 border-b border-white/10 pl-4">
                                <span>${acc.name}</span>
                                <span>Rp ${(accountBalances[acc.code] || 0).toLocaleString('id-ID')}</span>
                            </div>
                        `).join('')}
                        <div class="flex justify-between py-2 border-b border-white/10 pl-4">
                            <span>Laba Ditahan</span>
                            <span class="${netIncome >= 0 ? 'text-success' : 'text-danger'}">Rp ${netIncome.toLocaleString('id-ID')}</span>
                        </div>
                        <div class="flex justify-between py-2 font-bold border-t-2 border-green-400 mt-2">
                            <span>TOTAL EKUITAS</span>
                            <span>Rp ${totalEquity.toLocaleString('id-ID')}</span>
                        </div>
                        
                        <div class="flex justify-between py-3 font-bold text-lg border-t-4 border-warning mt-4">
                            <span>TOTAL KEWAJIBAN & EKUITAS</span>
                            <span>Rp ${(totalLiabilities + totalEquity).toLocaleString('id-ID')}</span>
                        </div>
                    </div>
                </div>
                
                ${!isBalanced ? `
                <div class="mt-6 p-4 bg-danger/20 border border-danger/50 rounded-lg">
                    <h5 class="font-semibold text-danger mb-2">‚ö†Ô∏è Peringatan: Neraca Tidak Seimbang</h5>
                    <p class="text-sm text-gray-300">
                        Selisih sebesar Rp ${Math.abs(difference).toLocaleString('id-ID')} menunjukkan adanya kesalahan dalam pencatatan. 
                        Silakan periksa kembali transaksi dan pastikan setiap transaksi menggunakan prinsip double-entry yang benar.
                    </p>
                </div>
                ` : `
                <div class="mt-6 p-4 bg-success/20 border border-success/50 rounded-lg">
                    <h5 class="font-semibold text-success mb-2">‚úÖ Neraca Seimbang</h5>
                    <p class="text-sm text-gray-300">
                        Neraca sudah seimbang sesuai dengan prinsip akuntansi dasar: Aset = Kewajiban + Ekuitas
                    </p>
                </div>
                `}
            `;
        }

        function generateIncomeStatement(container, period) {
            const filteredTransactions = getFilteredTransactions();
            
            // Calculate account balances for the period
            const accountBalances = {};
            accounts.forEach(acc => {
                accountBalances[acc.code] = 0;
            });
            
            // Calculate balances based on filtered transactions
            filteredTransactions.forEach(transaction => {
                const debitAccount = accounts.find(acc => acc.code === transaction.debitAccount);
                const creditAccount = accounts.find(acc => acc.code === transaction.creditAccount);
                
                if (debitAccount) {
                    if (debitAccount.type === 'asset' || debitAccount.type === 'expense') {
                        accountBalances[debitAccount.code] += transaction.amount;
                    } else {
                        accountBalances[debitAccount.code] -= transaction.amount;
                    }
                }
                
                if (creditAccount) {
                    if (creditAccount.type === 'liability' || creditAccount.type === 'equity' || creditAccount.type === 'revenue') {
                        accountBalances[creditAccount.code] += transaction.amount;
                    } else {
                        accountBalances[creditAccount.code] -= transaction.amount;
                    }
                }
            });
            
            // Separate revenue and expense accounts
            const mainRevenues = accounts.filter(acc => 
                acc.type === 'revenue' && 
                (acc.name.toLowerCase().includes('penjualan') || 
                 acc.name.toLowerCase().includes('jual') ||
                 acc.code.startsWith('4001'))
            );
            
            const otherRevenues = accounts.filter(acc => 
                acc.type === 'revenue' && 
                !mainRevenues.includes(acc)
            );
            
            const operationalExpenses = accounts.filter(acc => 
                acc.type === 'expense' && 
                (acc.name.toLowerCase().includes('operasional') || 
                 acc.name.toLowerCase().includes('gaji') ||
                 acc.name.toLowerCase().includes('sewa') ||
                 acc.code.startsWith('5001'))
            );
            
            const adminExpenses = accounts.filter(acc => 
                acc.type === 'expense' && 
                (acc.name.toLowerCase().includes('administrasi') || 
                 acc.name.toLowerCase().includes('admin') ||
                 acc.name.toLowerCase().includes('umum'))
            );
            
            const otherExpenses = accounts.filter(acc => 
                acc.type === 'expense' && 
                !operationalExpenses.includes(acc) && 
                !adminExpenses.includes(acc)
            );
            
            const totalMainRevenue = mainRevenues.reduce((sum, acc) => sum + (accountBalances[acc.code] || 0), 0);
            const totalOtherRevenue = otherRevenues.reduce((sum, acc) => sum + (accountBalances[acc.code] || 0), 0);
            const totalRevenue = totalMainRevenue + totalOtherRevenue;
            
            const totalOperationalExpense = operationalExpenses.reduce((sum, acc) => sum + (accountBalances[acc.code] || 0), 0);
            const totalAdminExpense = adminExpenses.reduce((sum, acc) => sum + (accountBalances[acc.code] || 0), 0);
            const totalOtherExpense = otherExpenses.reduce((sum, acc) => sum + (accountBalances[acc.code] || 0), 0);
            const totalExpense = totalOperationalExpense + totalAdminExpense + totalOtherExpense;
            
            const grossProfit = totalMainRevenue; // Simplified, assuming no COGS
            const operatingProfit = totalRevenue - totalOperationalExpense - totalAdminExpense;
            const netIncome = totalRevenue - totalExpense;
            
            const grossMargin = totalMainRevenue > 0 ? ((grossProfit / totalMainRevenue) * 100) : 0;
            const netMargin = totalRevenue > 0 ? ((netIncome / totalRevenue) * 100) : 0;
            
            container.innerHTML = `
                <div class="flex justify-between items-center mb-6">
                    <div>
                        <h3 class="text-2xl font-bold">üìà LAPORAN LABA RUGI</h3>
                        <p class="text-sm text-gray-400">Periode: ${period.startDateFormatted} - ${period.endDateFormatted}</p>
                        <p class="text-xs text-gray-500">Dibuat: ${new Date().toLocaleString('id-ID')}</p>
                    </div>
                    <div class="text-right">
                        <div class="flex items-center gap-2 mb-2">
                            <span class="text-sm">Status:</span>
                            <span class="px-2 py-1 rounded text-xs ${netIncome >= 0 ? 'bg-success text-white' : 'bg-danger text-white'}">
                                ${netIncome >= 0 ? 'üìà Laba' : 'üìâ Rugi'}
                            </span>
                        </div>
                        <button onclick="exportReportCSV('income-statement')" class="bg-success hover:bg-green-600 px-3 py-1 rounded text-xs transition-colors">
                            üìä Export CSV
                        </button>
                    </div>
                </div>
                
                <div class="space-y-6">
                    <div>
                        <h4 class="text-lg font-semibold mb-4 text-success">PENDAPATAN</h4>
                        
                        <h5 class="font-medium mb-2 text-green-300">Pendapatan Utama:</h5>
                        ${mainRevenues.map(acc => `
                            <div class="flex justify-between py-2 border-b border-white/10 pl-4">
                                <span>${acc.name}</span>
                                <span>Rp ${(accountBalances[acc.code] || 0).toLocaleString('id-ID')}</span>
                            </div>
                        `).join('')}
                        <div class="flex justify-between py-2 font-semibold border-b-2 border-green-300">
                            <span>Total Pendapatan Utama</span>
                            <span>Rp ${totalMainRevenue.toLocaleString('id-ID')}</span>
                        </div>
                        
                        ${otherRevenues.length > 0 ? `
                        <h5 class="font-medium mb-2 mt-4 text-green-300">Pendapatan Lain-lain:</h5>
                        ${otherRevenues.map(acc => `
                            <div class="flex justify-between py-2 border-b border-white/10 pl-4">
                                <span>${acc.name}</span>
                                <span>Rp ${(accountBalances[acc.code] || 0).toLocaleString('id-ID')}</span>
                            </div>
                        `).join('')}
                        <div class="flex justify-between py-2 font-semibold border-b-2 border-green-300">
                            <span>Total Pendapatan Lain-lain</span>
                            <span>Rp ${totalOtherRevenue.toLocaleString('id-ID')}</span>
                        </div>
                        ` : ''}
                        
                        <div class="flex justify-between py-3 font-bold text-lg border-t-4 border-success mt-4">
                            <span>TOTAL PENDAPATAN</span>
                            <span>Rp ${totalRevenue.toLocaleString('id-ID')}</span>
                        </div>
                    </div>
                    
                    <div>
                        <h4 class="text-lg font-semibold mb-4 text-danger">BEBAN</h4>
                        
                        ${operationalExpenses.length > 0 ? `
                        <h5 class="font-medium mb-2 text-red-300">Beban Operasional:</h5>
                        ${operationalExpenses.map(acc => `
                            <div class="flex justify-between py-2 border-b border-white/10 pl-4">
                                <span>${acc.name}</span>
                                <span>Rp ${(accountBalances[acc.code] || 0).toLocaleString('id-ID')}</span>
                            </div>
                        `).join('')}
                        <div class="flex justify-between py-2 font-semibold border-b-2 border-red-300">
                            <span>Total Beban Operasional</span>
                            <span>Rp ${totalOperationalExpense.toLocaleString('id-ID')}</span>
                        </div>
                        ` : ''}
                        
                        ${adminExpenses.length > 0 ? `
                        <h5 class="font-medium mb-2 mt-4 text-red-300">Beban Administrasi & Umum:</h5>
                        ${adminExpenses.map(acc => `
                            <div class="flex justify-between py-2 border-b border-white/10 pl-4">
                                <span>${acc.name}</span>
                                <span>Rp ${(accountBalances[acc.code] || 0).toLocaleString('id-ID')}</span>
                            </div>
                        `).join('')}
                        <div class="flex justify-between py-2 font-semibold border-b-2 border-red-300">
                            <span>Total Beban Administrasi & Umum</span>
                            <span>Rp ${totalAdminExpense.toLocaleString('id-ID')}</span>
                        </div>
                        ` : ''}
                        
                        ${otherExpenses.length > 0 ? `
                        <h5 class="font-medium mb-2 mt-4 text-red-300">Beban Lainnya:</h5>
                        ${otherExpenses.map(acc => `
                            <div class="flex justify-between py-2 border-b border-white/10 pl-4">
                                <span>${acc.name}</span>
                                <span>Rp ${(accountBalances[acc.code] || 0).toLocaleString('id-ID')}</span>
                            </div>
                        `).join('')}
                        <div class="flex justify-between py-2 font-semibold border-b-2 border-red-300">
                            <span>Total Beban Lainnya</span>
                            <span>Rp ${totalOtherExpense.toLocaleString('id-ID')}</span>
                        </div>
                        ` : ''}
                        
                        <div class="flex justify-between py-3 font-bold text-lg border-t-4 border-danger mt-4">
                            <span>TOTAL BEBAN</span>
                            <span>Rp ${totalExpense.toLocaleString('id-ID')}</span>
                        </div>
                    </div>
                    
                    <div class="space-y-3">
                        ${operatingProfit !== netIncome ? `
                        <div class="flex justify-between py-2 font-semibold text-lg border-t-2 border-accent">
                            <span>LABA OPERASIONAL</span>
                            <span class="${operatingProfit >= 0 ? 'text-success' : 'text-danger'}">Rp ${operatingProfit.toLocaleString('id-ID')}</span>
                        </div>
                        ` : ''}
                        
                        <div class="flex justify-between py-4 font-bold text-xl border-t-4 border-accent">
                            <span>LABA BERSIH</span>
                            <span class="${netIncome >= 0 ? 'text-success' : 'text-danger'}">Rp ${netIncome.toLocaleString('id-ID')}</span>
                        </div>
                    </div>
                </div>
                
                <div class="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="p-4 bg-white/5 rounded-lg">
                        <h5 class="font-semibold mb-2">üìä Rasio Keuangan</h5>
                        <div class="space-y-2 text-sm">
                            <div class="flex justify-between">
                                <span>Margin Kotor:</span>
                                <span class="font-semibold">${grossMargin.toFixed(1)}%</span>
                            </div>
                            <div class="flex justify-between">
                                <span>Margin Bersih:</span>
                                <span class="font-semibold ${netMargin >= 0 ? 'text-success' : 'text-danger'}">${netMargin.toFixed(1)}%</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="p-4 bg-white/5 rounded-lg">
                        <h5 class="font-semibold mb-2">üí° Analisis Kinerja</h5>
                        <div class="text-sm text-gray-300">
                            ${netIncome >= 0 ? 
                                `<p>‚úÖ Perusahaan menghasilkan laba sebesar Rp ${netIncome.toLocaleString('id-ID')} pada periode ini.</p>` :
                                `<p>‚ö†Ô∏è Perusahaan mengalami kerugian sebesar Rp ${Math.abs(netIncome).toLocaleString('id-ID')} pada periode ini.</p>`
                            }
                            <p class="mt-2">Margin bersih: ${netMargin.toFixed(1)}% ${netMargin >= 10 ? '(Sangat Baik)' : netMargin >= 5 ? '(Baik)' : netMargin >= 0 ? '(Cukup)' : '(Perlu Perbaikan)'}</p>
                        </div>
                    </div>
                </div>
            `;
        }

        function generateCashFlow(container, period) {
            const filteredTransactions = getFilteredTransactions();
            
            // Get all cash and bank accounts with better detection
            const cashAccounts = accounts.filter(acc => 
                acc.type === 'asset' && 
                (acc.name.toLowerCase().includes('kas') || 
                 acc.name.toLowerCase().includes('bank') ||
                 acc.name.toLowerCase().includes('rekening') ||
                 acc.code.startsWith('1001') || 
                 acc.code.startsWith('1002') ||
                 acc.code.startsWith('1003'))
            );
            
            if (cashAccounts.length === 0) {
                container.innerHTML = `
                    <div class="text-center text-gray-400">
                        <div class="mb-4"><span class="text-4xl">‚ö†Ô∏è</span></div>
                        <h3 class="text-lg font-semibold mb-2">Akun Kas/Bank Tidak Ditemukan</h3>
                        <p>Pastikan ada akun kas atau bank dalam chart of accounts dengan kode 1001, 1002, atau 1003</p>
                        <p class="text-sm mt-2">Atau akun dengan nama yang mengandung kata 'kas', 'bank', atau 'rekening'</p>
                    </div>
                `;
                return;
            }
            
            const cashAccountCodes = cashAccounts.map(acc => acc.code);
            
            // Filter cash transactions (transactions involving cash/bank accounts)
            const cashTransactions = filteredTransactions.filter(t => 
                cashAccountCodes.includes(t.debitAccount) || cashAccountCodes.includes(t.creditAccount)
            );
            
            // Categorize cash flows with improved logic
            const operatingActivities = [];
            const investingActivities = [];
            const financingActivities = [];
            
            let operatingInflows = 0;
            let operatingOutflows = 0;
            let investingInflows = 0;
            let investingOutflows = 0;
            let financingInflows = 0;
            let financingOutflows = 0;
            
            cashTransactions.forEach(transaction => {
                const isCashDebit = cashAccountCodes.includes(transaction.debitAccount);
                const isCashCredit = cashAccountCodes.includes(transaction.creditAccount);
                
                // Skip internal cash transfers between cash/bank accounts
                if (isCashDebit && isCashCredit) return;
                
                const otherAccountCode = isCashDebit ? transaction.creditAccount : transaction.debitAccount;
                const otherAccount = accounts.find(acc => acc.code === otherAccountCode);
                
                if (!otherAccount) return;
                
                const amount = transaction.amount;
                const description = transaction.description;
                const date = new Date(transaction.date).toLocaleDateString('id-ID');
                
                // Enhanced categorization logic
                const accountName = otherAccount.name.toLowerCase();
                const accountType = otherAccount.type;
                const accountCode = otherAccount.code;
                
                // OPERATING ACTIVITIES - More comprehensive detection
                if (accountType === 'revenue' || 
                    accountType === 'expense' ||
                    accountName.includes('piutang') ||
                    accountName.includes('utang') && !accountName.includes('jangka panjang') ||
                    accountName.includes('persediaan') ||
                    accountName.includes('beban') ||
                    accountName.includes('biaya') ||
                    accountName.includes('penjualan') ||
                    accountName.includes('pendapatan') ||
                    accountName.includes('gaji') ||
                    accountName.includes('upah') ||
                    accountName.includes('sewa') ||
                    accountName.includes('listrik') ||
                    accountName.includes('telepon') ||
                    accountName.includes('operasional') ||
                    accountName.includes('administrasi') ||
                    accountName.includes('pemasaran') ||
                    accountName.includes('pajak') && !accountName.includes('tangguhan') ||
                    accountCode.startsWith('4') || // Revenue accounts
                    accountCode.startsWith('5') || // Expense accounts
                    accountCode.startsWith('11') && !accountCode.startsWith('13')) { // Current assets except fixed assets
                    
                    if (isCashDebit) {
                        operatingInflows += amount;
                        operatingActivities.push({
                            date: date,
                            description: description,
                            account: otherAccount.name,
                            amount: amount,
                            type: 'inflow'
                        });
                    } else {
                        operatingOutflows += amount;
                        operatingActivities.push({
                            date: date,
                            description: description,
                            account: otherAccount.name,
                            amount: amount,
                            type: 'outflow'
                        });
                    }
                    
                // INVESTING ACTIVITIES - Fixed assets and investments
                } else if (accountName.includes('peralatan') ||
                           accountName.includes('gedung') ||
                           accountName.includes('bangunan') ||
                           accountName.includes('kendaraan') ||
                           accountName.includes('mesin') ||
                           accountName.includes('tanah') ||
                           accountName.includes('investasi') ||
                           accountName.includes('aset tetap') ||
                           accountName.includes('furniture') ||
                           accountName.includes('komputer') ||
                           accountName.includes('akumulasi penyusutan') ||
                           accountCode.startsWith('13') || // Fixed assets
                           accountCode.startsWith('14') || // Investments
                           (accountType === 'asset' && !accountName.includes('kas') && !accountName.includes('bank') && 
                            !accountName.includes('piutang') && !accountName.includes('persediaan'))) {
                    
                    if (isCashDebit) {
                        investingInflows += amount;
                        investingActivities.push({
                            date: date,
                            description: accountName.includes('akumulasi') ? 
                                `Penjualan aset (${otherAccount.name})` : 
                                `Penjualan ${otherAccount.name}`,
                            account: otherAccount.name,
                            amount: amount,
                            type: 'inflow'
                        });
                    } else {
                        investingOutflows += amount;
                        investingActivities.push({
                            date: date,
                            description: `Pembelian ${otherAccount.name}`,
                            account: otherAccount.name,
                            amount: amount,
                            type: 'outflow'
                        });
                    }
                    
                // FINANCING ACTIVITIES - Equity and long-term liabilities
                } else if (accountType === 'equity' ||
                           (accountType === 'liability' && (
                               accountName.includes('jangka panjang') ||
                               accountName.includes('modal') ||
                               accountName.includes('pinjaman') ||
                               accountName.includes('kredit') && !accountName.includes('dagang') ||
                               accountName.includes('obligasi') ||
                               accountName.includes('saham') ||
                               accountName.includes('dividen') ||
                               accountCode.startsWith('3') || // Equity accounts
                               accountCode.startsWith('22') || // Long-term liabilities
                               accountCode.startsWith('23')))) { // Long-term debt
                    
                    if (isCashDebit) {
                        financingInflows += amount;
                        financingActivities.push({
                            date: date,
                            description: description,
                            account: otherAccount.name,
                            amount: amount,
                            type: 'inflow'
                        });
                    } else {
                        financingOutflows += amount;
                        financingActivities.push({
                            date: date,
                            description: description,
                            account: otherAccount.name,
                            amount: amount,
                            type: 'outflow'
                        });
                    }
                } else {
                    // Default to operating for unclear transactions
                    if (isCashDebit) {
                        operatingInflows += amount;
                        operatingActivities.push({
                            date: date,
                            description: `${description} (${otherAccount.name})`,
                            account: otherAccount.name,
                            amount: amount,
                            type: 'inflow'
                        });
                    } else {
                        operatingOutflows += amount;
                        operatingActivities.push({
                            date: date,
                            description: `${description} (${otherAccount.name})`,
                            account: otherAccount.name,
                            amount: amount,
                            type: 'outflow'
                        });
                    }
                }
            });
            
            const netOperatingCash = operatingInflows - operatingOutflows;
            const netInvestingCash = investingInflows - investingOutflows;
            const netFinancingCash = financingInflows - financingOutflows;
            const netCashFlow = netOperatingCash + netInvestingCash + netFinancingCash;
            
            // Calculate opening and closing cash balance for all cash accounts
            let openingCash = 0;
            cashAccountCodes.forEach(code => {
                openingCash += calculateOpeningBalance(code, period.startDate);
            });
            const closingCash = openingCash + netCashFlow;
            
            // Validate if there are any cash transactions
            if (cashTransactions.length === 0) {
                container.innerHTML = `
                    <div class="text-center text-gray-400">
                        <div class="mb-4"><span class="text-4xl">üìã</span></div>
                        <h3 class="text-lg font-semibold mb-2">Tidak Ada Transaksi Kas</h3>
                        <p>Tidak ada transaksi yang melibatkan akun kas atau bank pada periode ini</p>
                        <p class="text-sm mt-2">Akun kas/bank yang tersedia: ${cashAccounts.map(acc => acc.name).join(', ')}</p>
                        <p class="text-xs mt-2 text-gray-500">Periode: ${period.startDateFormatted} - ${period.endDateFormatted}</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = `
                <div class="flex justify-between items-center mb-6">
                    <div>
                        <h3 class="text-2xl font-bold">üí∞ LAPORAN ARUS KAS</h3>
                        <p class="text-sm text-gray-400">Metode Langsung - Periode: ${period.startDateFormatted} - ${period.endDateFormatted}</p>
                        <p class="text-xs text-gray-500">Dibuat: ${new Date().toLocaleString('id-ID')}</p>
                        <p class="text-xs text-gray-400 mt-1">Akun Kas/Bank: ${cashAccounts.map(acc => `${acc.code} - ${acc.name}`).join(', ')}</p>
                        <p class="text-xs text-blue-300 mt-1">Total ${cashTransactions.length} transaksi kas dianalisis</p>
                    </div>
                    <div class="text-right">
                        <div class="flex items-center gap-2 mb-2">
                            <span class="text-sm">Arus Kas Bersih:</span>
                            <span class="px-2 py-1 rounded text-xs ${netCashFlow >= 0 ? 'bg-success text-white' : 'bg-danger text-white'}">
                                ${netCashFlow >= 0 ? 'üìà Positif' : 'üìâ Negatif'}
                            </span>
                        </div>
                        <div class="text-xs text-gray-400 mb-2">
                            Operasi: ${operatingActivities.length} | Investasi: ${investingActivities.length} | Pendanaan: ${financingActivities.length}
                        </div>
                        <button onclick="exportReportCSV('cash-flow')" class="bg-success hover:bg-green-600 px-3 py-1 rounded text-xs transition-colors">
                            üìä Export CSV
                        </button>
                    </div>
                </div>
                
                <div class="space-y-6">
                    <!-- Operating Activities -->
                    <div>
                        <h4 class="text-lg font-semibold mb-4 text-blue-400">üíº AKTIVITAS OPERASI</h4>
                        
                        ${operatingActivities.filter(a => a.type === 'inflow').length > 0 ? `
                        <h5 class="font-medium mb-3 text-green-300">Penerimaan Kas dari Operasi:</h5>
                        <div class="bg-white/5 rounded-lg p-3 mb-4">
                            ${operatingActivities.filter(a => a.type === 'inflow').map(activity => `
                                <div class="flex justify-between items-center py-2 border-b border-white/10 last:border-b-0">
                                    <div>
                                        <span class="text-sm font-medium">${activity.description}</span>
                                        <div class="text-xs text-gray-400">${activity.date} ‚Ä¢ ${activity.account}</div>
                                    </div>
                                    <span class="text-success font-semibold">Rp ${activity.amount.toLocaleString('id-ID')}</span>
                                </div>
                            `).join('')}
                            <div class="flex justify-between py-2 font-semibold border-t-2 border-green-400 mt-2">
                                <span>Total Penerimaan Operasi</span>
                                <span class="text-success">Rp ${operatingInflows.toLocaleString('id-ID')}</span>
                            </div>
                        </div>
                        ` : '<div class="bg-white/5 rounded-lg p-3 mb-4 text-gray-400 text-sm">Tidak ada penerimaan kas dari operasi</div>'}
                        
                        ${operatingActivities.filter(a => a.type === 'outflow').length > 0 ? `
                        <h5 class="font-medium mb-3 text-red-300">Pengeluaran Kas untuk Operasi:</h5>
                        <div class="bg-white/5 rounded-lg p-3 mb-4">
                            ${operatingActivities.filter(a => a.type === 'outflow').map(activity => `
                                <div class="flex justify-between items-center py-2 border-b border-white/10 last:border-b-0">
                                    <div>
                                        <span class="text-sm font-medium">${activity.description}</span>
                                        <div class="text-xs text-gray-400">${activity.date} ‚Ä¢ ${activity.account}</div>
                                    </div>
                                    <span class="text-danger font-semibold">Rp ${activity.amount.toLocaleString('id-ID')}</span>
                                </div>
                            `).join('')}
                            <div class="flex justify-between py-2 font-semibold border-t-2 border-red-400 mt-2">
                                <span>Total Pengeluaran Operasi</span>
                                <span class="text-danger">Rp ${operatingOutflows.toLocaleString('id-ID')}</span>
                            </div>
                        </div>
                        ` : '<div class="bg-white/5 rounded-lg p-3 mb-4 text-gray-400 text-sm">Tidak ada pengeluaran kas untuk operasi</div>'}
                        
                        <div class="flex justify-between py-3 font-bold text-lg border-t-4 border-blue-400 bg-blue-400/10 rounded-lg px-4">
                            <span>Kas Bersih dari Aktivitas Operasi</span>
                            <span class="${netOperatingCash >= 0 ? 'text-success' : 'text-danger'}">Rp ${netOperatingCash.toLocaleString('id-ID')}</span>
                        </div>
                    </div>
                    
                    <!-- Investing Activities -->
                    <div>
                        <h4 class="text-lg font-semibold mb-4 text-purple-400">üèóÔ∏è AKTIVITAS INVESTASI</h4>
                        
                        ${investingActivities.length > 0 ? `
                        ${investingActivities.filter(a => a.type === 'inflow').length > 0 ? `
                        <h5 class="font-medium mb-3 text-green-300">Penerimaan Kas dari Investasi:</h5>
                        <div class="bg-white/5 rounded-lg p-3 mb-4">
                            ${investingActivities.filter(a => a.type === 'inflow').map(activity => `
                                <div class="flex justify-between items-center py-2 border-b border-white/10 last:border-b-0">
                                    <div>
                                        <span class="text-sm font-medium">${activity.description}</span>
                                        <div class="text-xs text-gray-400">${activity.date} ‚Ä¢ ${activity.account}</div>
                                    </div>
                                    <span class="text-success font-semibold">Rp ${activity.amount.toLocaleString('id-ID')}</span>
                                </div>
                            `).join('')}
                            <div class="flex justify-between py-2 font-semibold border-t-2 border-green-400 mt-2">
                                <span>Total Penerimaan Investasi</span>
                                <span class="text-success">Rp ${investingInflows.toLocaleString('id-ID')}</span>
                            </div>
                        </div>
                        ` : ''}
                        
                        ${investingActivities.filter(a => a.type === 'outflow').length > 0 ? `
                        <h5 class="font-medium mb-3 text-red-300">Pengeluaran Kas untuk Investasi:</h5>
                        <div class="bg-white/5 rounded-lg p-3 mb-4">
                            ${investingActivities.filter(a => a.type === 'outflow').map(activity => `
                                <div class="flex justify-between items-center py-2 border-b border-white/10 last:border-b-0">
                                    <div>
                                        <span class="text-sm font-medium">${activity.description}</span>
                                        <div class="text-xs text-gray-400">${activity.date} ‚Ä¢ ${activity.account}</div>
                                    </div>
                                    <span class="text-danger font-semibold">Rp ${activity.amount.toLocaleString('id-ID')}</span>
                                </div>
                            `).join('')}
                            <div class="flex justify-between py-2 font-semibold border-t-2 border-red-400 mt-2">
                                <span>Total Pengeluaran Investasi</span>
                                <span class="text-danger">Rp ${investingOutflows.toLocaleString('id-ID')}</span>
                            </div>
                        </div>
                        ` : ''}
                        ` : '<div class="bg-white/5 rounded-lg p-3 mb-4 text-gray-400 text-sm">Tidak ada aktivitas investasi pada periode ini</div>'}
                        
                        <div class="flex justify-between py-3 font-bold text-lg border-t-4 border-purple-400 bg-purple-400/10 rounded-lg px-4">
                            <span>Kas Bersih dari Aktivitas Investasi</span>
                            <span class="${netInvestingCash >= 0 ? 'text-success' : 'text-danger'}">Rp ${netInvestingCash.toLocaleString('id-ID')}</span>
                        </div>
                    </div>
                    
                    <!-- Financing Activities -->
                    <div>
                        <h4 class="text-lg font-semibold mb-4 text-yellow-400">üè¶ AKTIVITAS PENDANAAN</h4>
                        
                        ${financingActivities.length > 0 ? `
                        ${financingActivities.filter(a => a.type === 'inflow').length > 0 ? `
                        <h5 class="font-medium mb-3 text-green-300">Penerimaan Kas dari Pendanaan:</h5>
                        <div class="bg-white/5 rounded-lg p-3 mb-4">
                            ${financingActivities.filter(a => a.type === 'inflow').map(activity => `
                                <div class="flex justify-between items-center py-2 border-b border-white/10 last:border-b-0">
                                    <div>
                                        <span class="text-sm font-medium">${activity.description}</span>
                                        <div class="text-xs text-gray-400">${activity.date} ‚Ä¢ ${activity.account}</div>
                                    </div>
                                    <span class="text-success font-semibold">Rp ${activity.amount.toLocaleString('id-ID')}</span>
                                </div>
                            `).join('')}
                            <div class="flex justify-between py-2 font-semibold border-t-2 border-green-400 mt-2">
                                <span>Total Penerimaan Pendanaan</span>
                                <span class="text-success">Rp ${financingInflows.toLocaleString('id-ID')}</span>
                            </div>
                        </div>
                        ` : ''}
                        
                        ${financingActivities.filter(a => a.type === 'outflow').length > 0 ? `
                        <h5 class="font-medium mb-3 text-red-300">Pengeluaran Kas untuk Pendanaan:</h5>
                        <div class="bg-white/5 rounded-lg p-3 mb-4">
                            ${financingActivities.filter(a => a.type === 'outflow').map(activity => `
                                <div class="flex justify-between items-center py-2 border-b border-white/10 last:border-b-0">
                                    <div>
                                        <span class="text-sm font-medium">${activity.description}</span>
                                        <div class="text-xs text-gray-400">${activity.date} ‚Ä¢ ${activity.account}</div>
                                    </div>
                                    <span class="text-danger font-semibold">Rp ${activity.amount.toLocaleString('id-ID')}</span>
                                </div>
                            `).join('')}
                            <div class="flex justify-between py-2 font-semibold border-t-2 border-red-400 mt-2">
                                <span>Total Pengeluaran Pendanaan</span>
                                <span class="text-danger">Rp ${financingOutflows.toLocaleString('id-ID')}</span>
                            </div>
                        </div>
                        ` : ''}
                        ` : '<div class="bg-white/5 rounded-lg p-3 mb-4 text-gray-400 text-sm">Tidak ada aktivitas pendanaan pada periode ini</div>'}
                        
                        <div class="flex justify-between py-3 font-bold text-lg border-t-4 border-yellow-400 bg-yellow-400/10 rounded-lg px-4">
                            <span>Kas Bersih dari Aktivitas Pendanaan</span>
                            <span class="${netFinancingCash >= 0 ? 'text-success' : 'text-danger'}">Rp ${netFinancingCash.toLocaleString('id-ID')}</span>
                        </div>
                    </div>
                    
                    <!-- Summary -->
                    <div class="bg-gradient-to-r from-blue-500/10 to-purple-500/10 p-6 rounded-xl border border-accent/30">
                        <h4 class="text-xl font-bold mb-4 text-accent">üìä RINGKASAN ARUS KAS</h4>
                        
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                            <div class="bg-white/10 p-3 rounded-lg text-center">
                                <div class="text-sm text-gray-300">Aktivitas Operasi</div>
                                <div class="text-lg font-bold ${netOperatingCash >= 0 ? 'text-success' : 'text-danger'}">
                                    Rp ${netOperatingCash.toLocaleString('id-ID')}
                                </div>
                            </div>
                            <div class="bg-white/10 p-3 rounded-lg text-center">
                                <div class="text-sm text-gray-300">Aktivitas Investasi</div>
                                <div class="text-lg font-bold ${netInvestingCash >= 0 ? 'text-success' : 'text-danger'}">
                                    Rp ${netInvestingCash.toLocaleString('id-ID')}
                                </div>
                            </div>
                            <div class="bg-white/10 p-3 rounded-lg text-center">
                                <div class="text-sm text-gray-300">Aktivitas Pendanaan</div>
                                <div class="text-lg font-bold ${netFinancingCash >= 0 ? 'text-success' : 'text-danger'}">
                                    Rp ${netFinancingCash.toLocaleString('id-ID')}
                                </div>
                            </div>
                        </div>
                        
                        <div class="space-y-3 border-t border-white/20 pt-4">
                            <div class="flex justify-between items-center py-2">
                                <span class="font-medium">Kas & Bank Awal Periode</span>
                                <span class="font-bold text-lg">Rp ${openingCash.toLocaleString('id-ID')}</span>
                            </div>
                            <div class="flex justify-between items-center py-2">
                                <span class="font-medium">Kenaikan (Penurunan) Kas Bersih</span>
                                <span class="font-bold text-lg ${netCashFlow >= 0 ? 'text-success' : 'text-danger'}">
                                    ${netCashFlow >= 0 ? '+' : ''}Rp ${netCashFlow.toLocaleString('id-ID')}
                                </span>
                            </div>
                            <div class="flex justify-between items-center py-3 border-t-2 border-accent">
                                <span class="font-bold text-lg">Kas & Bank Akhir Periode</span>
                                <span class="font-bold text-xl text-accent">Rp ${closingCash.toLocaleString('id-ID')}</span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="mt-6 p-4 bg-white/5 rounded-lg">
                    <h5 class="font-semibold mb-3 text-accent">üí° Analisis Arus Kas</h5>
                    <div class="text-sm text-gray-300 space-y-2">
                        <div class="flex items-start gap-2">
                            <span class="text-blue-400 font-semibold min-w-[140px]">Aktivitas Operasi:</span>
                            <span>${netOperatingCash >= 0 ? 
                                `‚úÖ Positif Rp ${netOperatingCash.toLocaleString('id-ID')} - Operasi bisnis menghasilkan kas yang baik` :
                                `‚ö†Ô∏è Negatif Rp ${Math.abs(netOperatingCash).toLocaleString('id-ID')} - Operasi bisnis membutuhkan kas tambahan`
                            }</span>
                        </div>
                        <div class="flex items-start gap-2">
                            <span class="text-purple-400 font-semibold min-w-[140px]">Aktivitas Investasi:</span>
                            <span>${netInvestingCash > 0 ? 
                                `üìà Positif Rp ${netInvestingCash.toLocaleString('id-ID')} - Ada penjualan aset atau investasi` :
                                netInvestingCash < 0 ? `üìâ Negatif Rp ${Math.abs(netInvestingCash).toLocaleString('id-ID')} - Ada pembelian aset atau investasi baru` :
                                `‚ûñ Tidak ada aktivitas investasi pada periode ini`
                            }</span>
                        </div>
                        <div class="flex items-start gap-2">
                            <span class="text-yellow-400 font-semibold min-w-[140px]">Aktivitas Pendanaan:</span>
                            <span>${netFinancingCash > 0 ? 
                                `üí∞ Positif Rp ${netFinancingCash.toLocaleString('id-ID')} - Ada tambahan modal atau pinjaman` :
                                netFinancingCash < 0 ? `üí∏ Negatif Rp ${Math.abs(netFinancingCash).toLocaleString('id-ID')} - Ada pembayaran utang atau penarikan modal` :
                                `‚ûñ Tidak ada aktivitas pendanaan pada periode ini`
                            }</span>
                        </div>
                        <div class="mt-3 pt-3 border-t border-white/20">
                            <span class="font-semibold text-accent">Kesimpulan: </span>
                            <span>${netCashFlow >= 0 ? 
                                `Posisi kas perusahaan mengalami peningkatan sebesar Rp ${netCashFlow.toLocaleString('id-ID')} pada periode ini.` :
                                `Posisi kas perusahaan mengalami penurunan sebesar Rp ${Math.abs(netCashFlow).toLocaleString('id-ID')} pada periode ini.`
                            } ${netOperatingCash >= 0 ? 'Arus kas operasi yang positif menunjukkan kesehatan bisnis yang baik.' : 'Perlu perhatian pada arus kas operasi yang negatif.'}</span>
                        </div>
                    </div>
                </div>
            `;
        }

        // Dashboard Updates
        function updateDashboard() {
            const revenues = accounts.filter(acc => acc.type === 'revenue');
            const expenses = accounts.filter(acc => acc.type === 'expense');
            const assets = accounts.filter(acc => acc.type === 'asset');
            
            const totalRevenue = revenues.reduce((sum, acc) => sum + acc.balance, 0);
            const totalExpense = expenses.reduce((sum, acc) => sum + acc.balance, 0);
            const totalAssets = assets.reduce((sum, acc) => sum + acc.balance, 0);
            const netProfit = totalRevenue - totalExpense;
            
            document.getElementById('totalRevenue').textContent = `Rp ${totalRevenue.toLocaleString('id-ID')}`;
            document.getElementById('totalExpense').textContent = `Rp ${totalExpense.toLocaleString('id-ID')}`;
            document.getElementById('netProfit').textContent = `Rp ${netProfit.toLocaleString('id-ID')}`;
            document.getElementById('totalAssets').textContent = `Rp ${totalAssets.toLocaleString('id-ID')}`;
            
            // Monthly summary (simplified)
            document.getElementById('monthlySales').textContent = `Rp ${totalRevenue.toLocaleString('id-ID')}`;
            document.getElementById('monthlyCosts').textContent = `Rp ${totalExpense.toLocaleString('id-ID')}`;
            document.getElementById('monthlyProfit').textContent = `Rp ${netProfit.toLocaleString('id-ID')}`;
            
            // Recent transactions
            const recentContainer = document.getElementById('recentTransactions');
            if (transactions.length === 0) {
                recentContainer.innerHTML = '<p class="text-gray-400">Belum ada transaksi</p>';
            } else {
                const recent = transactions.slice(-5).reverse();
                recentContainer.innerHTML = recent.map(t => `
                    <div class="flex justify-between items-center p-3 bg-white/5 rounded-lg">
                        <div>
                            <p class="font-medium">${t.description}</p>
                            <p class="text-sm text-gray-400">${new Date(t.date).toLocaleDateString('id-ID')}</p>
                        </div>
                        <span class="font-semibold">Rp ${t.amount.toLocaleString('id-ID')}</span>
                    </div>
                `).join('');
            }
        }

        // Ledger Management
        function populateLedgerAccountSelect() {
            const selectedAccount = document.getElementById('selectedAccount');
            selectedAccount.innerHTML = '<option value="">Semua Akun</option>';
            
            accounts.forEach(account => {
                const option = document.createElement('option');
                option.value = account.code;
                option.textContent = `${account.code} - ${account.name}`;
                selectedAccount.appendChild(option);
            });
        }

        function loadLedger() {
            // Set default date range (current month)
            const today = new Date();
            const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
            const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);
            
            document.getElementById('ledgerStartDate').value = firstDay.toISOString().split('T')[0];
            document.getElementById('ledgerEndDate').value = lastDay.toISOString().split('T')[0];
            
            populateLedgerAccountSelect();
            setupAccountSearch();
        }

        function setupAccountSearch() {
            const searchInput = document.getElementById('searchAccount');
            const selectAccount = document.getElementById('selectedAccount');
            
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                const options = selectAccount.querySelectorAll('option');
                
                options.forEach(option => {
                    if (option.value === '') return; // Skip "Semua Akun" option
                    
                    const text = option.textContent.toLowerCase();
                    if (text.includes(searchTerm)) {
                        option.style.display = 'block';
                    } else {
                        option.style.display = 'none';
                    }
                });
                
                // Auto-select if only one match
                const visibleOptions = Array.from(options).filter(opt => 
                    opt.value !== '' && opt.style.display !== 'none'
                );
                
                if (visibleOptions.length === 1) {
                    selectAccount.value = visibleOptions[0].value;
                    filterLedger();
                }
            });
        }

        function filterLedger() {
            const selectedAccountCode = document.getElementById('selectedAccount').value;
            const startDate = document.getElementById('ledgerStartDate').value;
            const endDate = document.getElementById('ledgerEndDate').value;
            
            if (!selectedAccountCode) {
                showAllAccountsLedger(startDate, endDate);
                return;
            }
            
            const account = accounts.find(acc => acc.code === selectedAccountCode);
            if (!account) return;
            
            // Get transactions for this account within date range
            const accountTransactions = getAccountTransactions(selectedAccountCode, startDate, endDate);
            
            // Calculate opening balance
            const openingBalance = calculateOpeningBalance(selectedAccountCode, startDate);
            
            // Display ledger entries
            displayLedgerEntries(account, accountTransactions, openingBalance);
            
            // Show account summary
            document.getElementById('accountSummary').classList.remove('hidden');
        }

        function getAccountTransactions(accountCode, startDate, endDate) {
            return transactions.filter(transaction => {
                const transactionDate = new Date(transaction.date);
                const start = startDate ? new Date(startDate) : new Date('1900-01-01');
                const end = endDate ? new Date(endDate) : new Date('2100-12-31');
                
                return (transaction.debitAccount === accountCode || transaction.creditAccount === accountCode) &&
                       transactionDate >= start && transactionDate <= end;
            }).sort((a, b) => new Date(a.date) - new Date(b.date));
        }

        function calculateOpeningBalance(accountCode, startDate) {
            if (!startDate) return 0;
            
            const account = accounts.find(acc => acc.code === accountCode);
            if (!account) return 0;
            
            // Get all transactions before start date
            const beforeTransactions = transactions.filter(transaction => {
                const transactionDate = new Date(transaction.date);
                const start = new Date(startDate);
                
                return (transaction.debitAccount === accountCode || transaction.creditAccount === accountCode) &&
                       transactionDate < start;
            });
            
            let balance = 0;
            beforeTransactions.forEach(transaction => {
                if (transaction.debitAccount === accountCode) {
                    if (account.type === 'asset' || account.type === 'expense') {
                        balance += transaction.amount;
                    } else {
                        balance -= transaction.amount;
                    }
                }
                if (transaction.creditAccount === accountCode) {
                    if (account.type === 'liability' || account.type === 'equity' || account.type === 'revenue') {
                        balance += transaction.amount;
                    } else {
                        balance -= transaction.amount;
                    }
                }
            });
            
            return balance;
        }

        function displayLedgerEntries(account, accountTransactions, openingBalance) {
            const tbody = document.getElementById('ledgerEntries');
            let runningBalance = openingBalance;
            let totalDebit = 0;
            let totalCredit = 0;
            
            if (accountTransactions.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" class="px-6 py-8 text-center text-gray-400">
                            Tidak ada transaksi untuk akun ${account.name} pada periode ini
                        </td>
                    </tr>
                `;
                updateAccountSummary(openingBalance, 0, 0, openingBalance);
                return;
            }
            
            // Add opening balance row if not zero
            let rows = '';
            if (openingBalance !== 0) {
                rows += `
                    <tr class="bg-blue-500/10 border-b border-white/10">
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm font-medium">-</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm font-medium">Saldo Awal</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm">${account.name}</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm">-</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm">-</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm">-</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm font-bold">
                            Rp ${runningBalance.toLocaleString('id-ID')}
                        </td>
                    </tr>
                `;
            }
            
            accountTransactions.forEach((transaction, index) => {
                const isDebit = transaction.debitAccount === account.code;
                const isCredit = transaction.creditAccount === account.code;
                
                let debitAmount = '';
                let creditAmount = '';
                
                if (isDebit) {
                    debitAmount = `Rp ${transaction.amount.toLocaleString('id-ID')}`;
                    totalDebit += transaction.amount;
                    
                    if (account.type === 'asset' || account.type === 'expense') {
                        runningBalance += transaction.amount;
                    } else {
                        runningBalance -= transaction.amount;
                    }
                }
                
                if (isCredit) {
                    creditAmount = `Rp ${transaction.amount.toLocaleString('id-ID')}`;
                    totalCredit += transaction.amount;
                    
                    if (account.type === 'liability' || account.type === 'equity' || account.type === 'revenue') {
                        runningBalance += transaction.amount;
                    } else {
                        runningBalance -= transaction.amount;
                    }
                }
                
                // Get the other account involved
                const otherAccountCode = isDebit ? transaction.creditAccount : transaction.debitAccount;
                const otherAccount = accounts.find(acc => acc.code === otherAccountCode);
                const otherAccountName = otherAccount ? otherAccount.name : 'Unknown';
                
                rows += `
                    <tr class="border-b border-white/10 hover:bg-white/5">
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm">
                            ${new Date(transaction.date).toLocaleDateString('id-ID')}
                        </td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm">${transaction.description}</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm">${otherAccountName}</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm">${transaction.id}</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm text-success">
                            ${debitAmount}
                        </td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm text-danger">
                            ${creditAmount}
                        </td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm font-semibold">
                            Rp ${runningBalance.toLocaleString('id-ID')}
                        </td>
                    </tr>
                `;
            });
            
            tbody.innerHTML = rows;
            updateAccountSummary(openingBalance, totalDebit, totalCredit, runningBalance);
        }

        function showAllAccountsLedger(startDate, endDate) {
            const tbody = document.getElementById('ledgerEntries');
            document.getElementById('accountSummary').classList.add('hidden');
            
            // Get all transactions within date range
            const filteredTransactions = transactions.filter(transaction => {
                const transactionDate = new Date(transaction.date);
                const start = startDate ? new Date(startDate) : new Date('1900-01-01');
                const end = endDate ? new Date(endDate) : new Date('2100-12-31');
                
                return transactionDate >= start && transactionDate <= end;
            }).sort((a, b) => new Date(a.date) - new Date(b.date));
            
            if (filteredTransactions.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" class="px-6 py-8 text-center text-gray-400">
                            Tidak ada transaksi pada periode ini
                        </td>
                    </tr>
                `;
                return;
            }
            
            const rows = filteredTransactions.map(transaction => {
                const debitAccount = accounts.find(acc => acc.code === transaction.debitAccount);
                const creditAccount = accounts.find(acc => acc.code === transaction.creditAccount);
                
                return `
                    <tr class="border-b border-white/10 hover:bg-white/5">
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm">
                            ${new Date(transaction.date).toLocaleDateString('id-ID')}
                        </td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm">${transaction.description}</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm">
                            ${debitAccount?.name} / ${creditAccount?.name}
                        </td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm">${transaction.id}</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm text-success">
                            Rp ${transaction.amount.toLocaleString('id-ID')}
                        </td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm text-danger">
                            Rp ${transaction.amount.toLocaleString('id-ID')}
                        </td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm">-</td>
                    </tr>
                `;
            }).join('');
            
            tbody.innerHTML = rows;
        }

        function updateAccountSummary(openingBalance, totalDebit, totalCredit, closingBalance) {
            document.getElementById('openingBalance').textContent = `Rp ${openingBalance.toLocaleString('id-ID')}`;
            document.getElementById('totalDebit').textContent = `Rp ${totalDebit.toLocaleString('id-ID')}`;
            document.getElementById('totalCredit').textContent = `Rp ${totalCredit.toLocaleString('id-ID')}`;
            document.getElementById('closingBalance').textContent = `Rp ${closingBalance.toLocaleString('id-ID')}`;
        }

        function exportLedger(exportType) {
            const startDate = document.getElementById('ledgerStartDate').value;
            const endDate = document.getElementById('ledgerEndDate').value;
            const selectedAccountCode = document.getElementById('selectedAccount').value;
            
            if (exportType === 'account') {
                if (!selectedAccountCode) {
                    alert('Pilih akun terlebih dahulu untuk export per akun!');
                    return;
                }
                exportAccountLedger(selectedAccountCode, startDate, endDate);
            } else if (exportType === 'type') {
                exportLedgerByType(startDate, endDate);
            }
        }

        function exportAccountLedger(accountCode, startDate, endDate) {
            const account = accounts.find(acc => acc.code === accountCode);
            if (!account) return;
            
            const accountTransactions = getAccountTransactions(accountCode, startDate, endDate);
            const openingBalance = calculateOpeningBalance(accountCode, startDate);
            
            let csvContent = `Buku Besar - ${account.name} (${account.code})\n`;
            csvContent += `Periode: ${startDate || 'Awal'} s/d ${endDate || 'Akhir'}\n\n`;
            csvContent += `Tanggal,Deskripsi,Akun Lawan,Ref,Debit,Kredit,Saldo\n`;
            
            let runningBalance = openingBalance;
            
            // Add opening balance
            if (openingBalance !== 0) {
                csvContent += `-,Saldo Awal,${account.name},-,-,-,${openingBalance}\n`;
            }
            
            accountTransactions.forEach(transaction => {
                const isDebit = transaction.debitAccount === accountCode;
                const otherAccountCode = isDebit ? transaction.creditAccount : transaction.debitAccount;
                const otherAccount = accounts.find(acc => acc.code === otherAccountCode);
                
                let debitAmount = '';
                let creditAmount = '';
                
                if (isDebit) {
                    debitAmount = transaction.amount;
                    if (account.type === 'asset' || account.type === 'expense') {
                        runningBalance += transaction.amount;
                    } else {
                        runningBalance -= transaction.amount;
                    }
                } else {
                    creditAmount = transaction.amount;
                    if (account.type === 'liability' || account.type === 'equity' || account.type === 'revenue') {
                        runningBalance += transaction.amount;
                    } else {
                        runningBalance -= transaction.amount;
                    }
                }
                
                csvContent += `${new Date(transaction.date).toLocaleDateString('id-ID')},`;
                csvContent += `"${transaction.description}",`;
                csvContent += `${otherAccount?.name || 'Unknown'},`;
                csvContent += `${transaction.id},`;
                csvContent += `${debitAmount},`;
                csvContent += `${creditAmount},`;
                csvContent += `${runningBalance}\n`;
            });
            
            downloadCSV(csvContent, `buku-besar-${account.name}-${new Date().toISOString().split('T')[0]}.csv`);
        }

        function exportLedgerByType(startDate, endDate) {
            const accountTypes = ['asset', 'liability', 'equity', 'revenue', 'expense'];
            const typeNames = {
                'asset': 'Aset',
                'liability': 'Kewajiban', 
                'equity': 'Ekuitas',
                'revenue': 'Pendapatan',
                'expense': 'Beban'
            };
            
            let csvContent = `Buku Besar per Jenis Akun\n`;
            csvContent += `Periode: ${startDate || 'Awal'} s/d ${endDate || 'Akhir'}\n\n`;
            
            accountTypes.forEach(type => {
                const typeAccounts = accounts.filter(acc => acc.type === type);
                if (typeAccounts.length === 0) return;
                
                csvContent += `\n=== ${typeNames[type]} ===\n`;
                csvContent += `Kode,Nama Akun,Saldo Awal,Total Debit,Total Kredit,Saldo Akhir\n`;
                
                typeAccounts.forEach(account => {
                    const accountTransactions = getAccountTransactions(account.code, startDate, endDate);
                    const openingBalance = calculateOpeningBalance(account.code, startDate);
                    
                    let totalDebit = 0;
                    let totalCredit = 0;
                    let runningBalance = openingBalance;
                    
                    accountTransactions.forEach(transaction => {
                        if (transaction.debitAccount === account.code) {
                            totalDebit += transaction.amount;
                            if (account.type === 'asset' || account.type === 'expense') {
                                runningBalance += transaction.amount;
                            } else {
                                runningBalance -= transaction.amount;
                            }
                        }
                        if (transaction.creditAccount === account.code) {
                            totalCredit += transaction.amount;
                            if (account.type === 'liability' || account.type === 'equity' || account.type === 'revenue') {
                                runningBalance += transaction.amount;
                            } else {
                                runningBalance -= transaction.amount;
                            }
                        }
                    });
                    
                    csvContent += `${account.code},"${account.name}",${openingBalance},${totalDebit},${totalCredit},${runningBalance}\n`;
                });
            });
            
            downloadCSV(csvContent, `buku-besar-per-jenis-${new Date().toISOString().split('T')[0]}.csv`);
        }

        function downloadCSV(content, filename) {
            const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            
            if (link.download !== undefined) {
                const url = URL.createObjectURL(blob);
                link.setAttribute('href', url);
                link.setAttribute('download', filename);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }

        // Bank Reconciliation Functions
        function loadReconciliation() {
            populateBankAccountSelect();
            
            // Set default period to current month
            const today = new Date();
            const currentMonth = today.toISOString().slice(0, 7);
            document.getElementById('reconciliationPeriod').value = currentMonth;
            
            loadBankStatements();
            updateReconciliationSummary();
        }

        function populateBankAccountSelect() {
            const bankAccountSelect = document.getElementById('bankAccount');
            bankAccountSelect.innerHTML = '<option value="">Pilih Akun Bank</option>';
            
            // Filter only bank accounts (typically codes starting with 1002, 1003, etc.)
            const bankAccounts = accounts.filter(acc => 
                acc.type === 'asset' && 
                (acc.name.toLowerCase().includes('bank') || 
                 acc.name.toLowerCase().includes('rekening') ||
                 acc.code.startsWith('1002') ||
                 acc.code.startsWith('1003'))
            );
            
            bankAccounts.forEach(account => {
                const option = document.createElement('option');
                option.value = account.code;
                option.textContent = `${account.code} - ${account.name}`;
                bankAccountSelect.appendChild(option);
            });
        }

        function downloadBankTemplate() {
            const selectedBankCode = document.getElementById('bankAccount').value;
            if (!selectedBankCode) {
                alert('Pilih akun bank terlebih dahulu!');
                return;
            }
            
            const bankAccount = accounts.find(acc => acc.code === selectedBankCode);
            const bankName = bankAccount ? bankAccount.name : 'Bank';
            
            // Create CSV template
            let csvContent = `Template Import Mutasi Bank - ${bankName}\n`;
            csvContent += `Petunjuk: Isi data sesuai format di bawah ini\n`;
            csvContent += `Format Tanggal: YYYY-MM-DD (contoh: 2024-01-15)\n`;
            csvContent += `Format Jumlah: Angka tanpa titik/koma (contoh: 1000000)\n\n`;
            csvContent += `Tanggal,Deskripsi,Debit,Kredit,Saldo,Referensi\n`;
            csvContent += `2024-01-01,Saldo Awal,0,0,5000000,\n`;
            csvContent += `2024-01-02,Transfer Masuk,1000000,0,6000000,TRF001\n`;
            csvContent += `2024-01-03,Pembayaran Supplier,0,500000,5500000,PAY001\n`;
            csvContent += `2024-01-04,Bunga Bank,25000,0,5525000,INT001\n`;
            csvContent += `2024-01-05,Biaya Admin,0,15000,5510000,ADM001\n`;
            
            // Download as CSV
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            
            if (link.download !== undefined) {
                const url = URL.createObjectURL(blob);
                link.setAttribute('href', url);
                link.setAttribute('download', `template-mutasi-${bankName.replace(/\s+/g, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.csv`);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                alert('Template Excel berhasil diunduh! Isi data mutasi bank sesuai format yang disediakan.');
            }
        }

        function importBankStatement() {
            const fileInput = document.getElementById('bankStatementFile');
            const selectedBankCode = document.getElementById('bankAccount').value;
            
            if (!selectedBankCode) {
                alert('Pilih akun bank terlebih dahulu!');
                return;
            }
            
            if (!fileInput.files[0]) {
                alert('Pilih file untuk diimport!');
                return;
            }
            
            const file = fileInput.files[0];
            const reader = new FileReader();
            
            reader.onload = function(e) {
                try {
                    const text = e.target.result;
                    const lines = text.split('\n');
                    
                    // Skip header lines (first 5 lines are instructions)
                    const dataLines = lines.slice(5).filter(line => line.trim() !== '');
                    
                    const importedStatements = [];
                    
                    dataLines.forEach((line, index) => {
                        const columns = line.split(',');
                        if (columns.length >= 5) {
                            const statement = {
                                id: Date.now() + index,
                                bankAccountCode: selectedBankCode,
                                date: columns[0].trim(),
                                description: columns[1].trim().replace(/"/g, ''),
                                debit: parseFloat(columns[2].trim()) || 0,
                                credit: parseFloat(columns[3].trim()) || 0,
                                balance: parseFloat(columns[4].trim()) || 0,
                                reference: columns[5] ? columns[5].trim().replace(/"/g, '') : '',
                                matched: false,
                                matchedTransactionId: null
                            };
                            
                            // Validate date
                            if (statement.date && !isNaN(Date.parse(statement.date))) {
                                importedStatements.push(statement);
                            }
                        }
                    });
                    
                    if (importedStatements.length > 0) {
                        // Clear existing statements for this bank account
                        bankStatements = bankStatements.filter(stmt => stmt.bankAccountCode !== selectedBankCode);
                        
                        // Add new statements
                        bankStatements.push(...importedStatements);
                        
                        loadBankStatements();
                        updateReconciliationSummary();
                        loadBookTransactions();
                        saveToLocalStorage();
                        
                        alert(`Berhasil import ${importedStatements.length} transaksi mutasi bank!`);
                        fileInput.value = '';
                    } else {
                        alert('Tidak ada data valid yang dapat diimport. Periksa format file!');
                    }
                    
                } catch (error) {
                    alert('Error membaca file: ' + error.message);
                }
            };
            
            reader.readAsText(file);
        }

        function loadBankStatements() {
            const tbody = document.getElementById('bankStatementList');
            const selectedBankCode = document.getElementById('bankAccount').value;
            
            if (!selectedBankCode) {
                tbody.innerHTML = '<tr><td colspan="7" class="px-6 py-8 text-center text-gray-400">Pilih akun bank terlebih dahulu</td></tr>';
                return;
            }
            
            const statements = bankStatements.filter(stmt => stmt.bankAccountCode === selectedBankCode);
            
            if (statements.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7" class="px-6 py-8 text-center text-gray-400">Belum ada data mutasi bank</td></tr>';
                return;
            }
            
            tbody.innerHTML = statements.map(statement => {
                const statusClass = statement.matched ? 'text-success' : 'text-warning';
                const statusText = statement.matched ? '‚úì Cocok' : '‚ö† Belum Cocok';
                
                return `
                    <tr class="border-b border-white/10 hover:bg-white/5">
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm">
                            ${new Date(statement.date).toLocaleDateString('id-ID')}
                        </td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-xs sm:text-sm">${statement.description}</td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm text-success">
                            ${statement.debit > 0 ? 'Rp ' + statement.debit.toLocaleString('id-ID') : '-'}
                        </td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm text-danger">
                            ${statement.credit > 0 ? 'Rp ' + statement.credit.toLocaleString('id-ID') : '-'}
                        </td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-right text-xs sm:text-sm font-semibold">
                            Rp ${statement.balance.toLocaleString('id-ID')}
                        </td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-center text-xs sm:text-sm ${statusClass}">
                            ${statusText}
                        </td>
                        <td class="px-3 py-3 sm:px-6 sm:py-4 text-center">
                            <button onclick="createTransactionFromBank(${statement.id})" 
                                    class="bg-accent hover:bg-blue-600 px-2 py-1 rounded text-xs transition-colors"
                                    ${statement.matched ? 'disabled' : ''}>
                                ${statement.matched ? 'Sudah Dibuat' : 'Buat Transaksi'}
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        function updateReconciliationSummary() {
            const selectedBankCode = document.getElementById('bankAccount').value;
            const period = document.getElementById('reconciliationPeriod').value;
            
            if (!selectedBankCode || !period) {
                document.getElementById('reconciliationSummary').classList.add('hidden');
                return;
            }
            
            // Calculate book balance
            const bankAccount = accounts.find(acc => acc.code === selectedBankCode);
            const bookBalance = bankAccount ? bankAccount.balance : 0;
            
            // Calculate bank balance (last balance from statements)
            const statements = bankStatements.filter(stmt => stmt.bankAccountCode === selectedBankCode);
            const bankBalance = statements.length > 0 ? statements[statements.length - 1].balance : 0;
            
            // Calculate difference
            const difference = Math.abs(bookBalance - bankBalance);
            const isReconciled = difference < 1; // Allow small rounding differences
            
            // Update display
            document.getElementById('bookBalance').textContent = `Rp ${bookBalance.toLocaleString('id-ID')}`;
            document.getElementById('bankBalance').textContent = `Rp ${bankBalance.toLocaleString('id-ID')}`;
            document.getElementById('balanceDifference').textContent = `Rp ${difference.toLocaleString('id-ID')}`;
            
            const statusElement = document.getElementById('reconciliationStatus');
            if (isReconciled) {
                statusElement.textContent = '‚úì Seimbang';
                statusElement.className = 'text-lg font-bold text-success';
            } else {
                statusElement.textContent = '‚ö† Tidak Seimbang';
                statusElement.className = 'text-lg font-bold text-danger';
            }
            
            document.getElementById('reconciliationSummary').classList.remove('hidden');
        }

        function loadBookTransactions() {
            const selectedBankCode = document.getElementById('bankAccount').value;
            const container = document.getElementById('bookTransactionsList');
            
            if (!selectedBankCode) {
                container.innerHTML = '<p class="text-gray-400 text-sm">Pilih akun bank untuk melihat transaksi</p>';
                return;
            }
            
            // Get unreconciled transactions for this bank account
            const bankTransactions = transactions.filter(t => 
                (t.debitAccount === selectedBankCode || t.creditAccount === selectedBankCode) &&
                !reconciliations.some(r => r.transactionId === t.id)
            );
            
            if (bankTransactions.length === 0) {
                container.innerHTML = '<p class="text-gray-400 text-sm">Semua transaksi sudah direkonsiliasi</p>';
                return;
            }
            
            container.innerHTML = bankTransactions.map(transaction => `
                <div class="bg-white/10 p-3 rounded-lg">
                    <div class="flex justify-between items-start mb-2">
                        <div>
                            <p class="font-medium text-sm">${transaction.description}</p>
                            <p class="text-xs text-gray-400">${new Date(transaction.date).toLocaleDateString('id-ID')}</p>
                        </div>
                        <span class="text-sm font-semibold">Rp ${transaction.amount.toLocaleString('id-ID')}</span>
                    </div>
                    <button onclick="matchTransaction(${transaction.id})" 
                            class="bg-purple-600 hover:bg-purple-700 px-2 py-1 rounded text-xs transition-colors">
                        Match Manual
                    </button>
                </div>
            `).join('');
            
            // Also load unmatched bank transactions
            loadUnmatchedBankTransactions();
        }

        function loadUnmatchedBankTransactions() {
            const selectedBankCode = document.getElementById('bankAccount').value;
            const container = document.getElementById('unmatchedBankList');
            
            if (!selectedBankCode) {
                container.innerHTML = '<p class="text-gray-400 text-sm">Import data mutasi bank terlebih dahulu</p>';
                return;
            }
            
            // Get unmatched bank statements
            const unmatchedStatements = bankStatements.filter(s => 
                s.bankAccountCode === selectedBankCode && !s.matched
            );
            
            if (unmatchedStatements.length === 0) {
                container.innerHTML = '<p class="text-gray-400 text-sm">Semua mutasi bank sudah dicocokkan</p>';
                return;
            }
            
            container.innerHTML = unmatchedStatements.map(statement => `
                <div class="bg-white/10 p-3 rounded-lg">
                    <div class="flex justify-between items-start mb-2">
                        <div>
                            <p class="font-medium text-sm">${statement.description}</p>
                            <p class="text-xs text-gray-400">${new Date(statement.date).toLocaleDateString('id-ID')}</p>
                            <p class="text-xs text-gray-300">Ref: ${statement.reference || '-'}</p>
                        </div>
                        <div class="text-right">
                            <span class="text-sm font-semibold ${statement.debit > 0 ? 'text-success' : 'text-danger'}">
                                ${statement.debit > 0 ? '+' : '-'} Rp ${(statement.debit || statement.credit).toLocaleString('id-ID')}
                            </span>
                            <p class="text-xs text-gray-400">Saldo: Rp ${statement.balance.toLocaleString('id-ID')}</p>
                        </div>
                    </div>
                    <div class="flex gap-2">
                        <button onclick="createTransactionFromBank(${statement.id})" 
                                class="bg-accent hover:bg-blue-600 px-2 py-1 rounded text-xs transition-colors">
                            Buat Transaksi
                        </button>
                        <button onclick="manualMatchBankStatement(${statement.id})" 
                                class="bg-warning hover:bg-yellow-600 px-2 py-1 rounded text-xs transition-colors">
                            Match Manual
                        </button>
                    </div>
                </div>
            `).join('');
        }

        function manualMatchBankStatement(statementId) {
            const statement = bankStatements.find(s => s.id === statementId);
            if (!statement) return;
            
            const selectedBankCode = document.getElementById('bankAccount').value;
            const unmatchedTransactions = transactions.filter(t => 
                (t.debitAccount === selectedBankCode || t.creditAccount === selectedBankCode) &&
                !reconciliations.some(r => r.transactionId === t.id)
            );
            
            if (unmatchedTransactions.length === 0) {
                alert('Tidak ada transaksi yang belum direkonsiliasi untuk dicocokkan.');
                return;
            }
            
            // Create a simple selection dialog
            let options = 'Pilih transaksi untuk dicocokkan:\n\n';
            unmatchedTransactions.forEach((t, index) => {
                options += `${index + 1}. ${t.description} - Rp ${t.amount.toLocaleString('id-ID')} (${new Date(t.date).toLocaleDateString('id-ID')})\n`;
            });
            
            const selection = prompt(options + '\nMasukkan nomor transaksi (1-' + unmatchedTransactions.length + '):');
            const selectedIndex = parseInt(selection) - 1;
            
            if (selectedIndex >= 0 && selectedIndex < unmatchedTransactions.length) {
                const selectedTransaction = unmatchedTransactions[selectedIndex];
                
                // Confirm match
                if (confirm(`Cocokkan:\nBank: ${statement.description} - Rp ${(statement.debit || statement.credit).toLocaleString('id-ID')}\nBuku: ${selectedTransaction.description} - Rp ${selectedTransaction.amount.toLocaleString('id-ID')}\n\nLanjutkan?`)) {
                    
                    // Mark as matched
                    statement.matched = true;
                    statement.matchedTransactionId = selectedTransaction.id;
                    
                    // Create reconciliation record
                    reconciliations.push({
                        id: Date.now(),
                        transactionId: selectedTransaction.id,
                        bankStatementId: statementId,
                        bankAccountCode: selectedBankCode,
                        date: new Date().toISOString(),
                        matchType: 'manual'
                    });
                    
                    loadBankStatements();
                    loadBookTransactions();
                    updateReconciliationSummary();
                    saveToLocalStorage();
                    
                    alert('Transaksi berhasil dicocokkan secara manual!');
                }
            }
        }

        function showBankTransactionForm() {
            const selectedBankCode = document.getElementById('bankAccount').value;
            if (!selectedBankCode) {
                alert('Pilih akun bank terlebih dahulu!');
                return;
            }
            
            document.getElementById('bankTransactionModal').classList.remove('hidden');
            document.getElementById('bankTransactionModal').classList.add('flex');
            document.getElementById('bankTransactionDate').value = new Date().toISOString().split('T')[0];
        }

        function hideBankTransactionForm() {
            document.getElementById('bankTransactionModal').classList.add('hidden');
            document.getElementById('bankTransactionModal').classList.remove('flex');
            document.getElementById('bankTransactionForm').reset();
        }

        document.getElementById('bankTransactionForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const selectedBankCode = document.getElementById('bankAccount').value;
            const type = document.getElementById('bankTransactionType').value;
            const amount = parseFloat(document.getElementById('bankTransactionAmount').value);
            
            const statement = {
                id: Date.now(),
                bankAccountCode: selectedBankCode,
                date: document.getElementById('bankTransactionDate').value,
                description: document.getElementById('bankTransactionDescription').value,
                debit: type === 'debit' ? amount : 0,
                credit: type === 'credit' ? amount : 0,
                balance: 0, // Will be calculated
                reference: document.getElementById('bankTransactionRef').value || '',
                matched: false,
                matchedTransactionId: null
            };
            
            // Calculate balance based on previous statements
            const existingStatements = bankStatements.filter(stmt => stmt.bankAccountCode === selectedBankCode);
            const lastBalance = existingStatements.length > 0 ? 
                Math.max(...existingStatements.map(s => s.balance)) : 0;
            
            statement.balance = lastBalance + statement.debit - statement.credit;
            
            bankStatements.push(statement);
            loadBankStatements();
            updateReconciliationSummary();
            hideBankTransactionForm();
            saveToLocalStorage();
        });

        function createTransactionFromBank(statementId) {
            const statement = bankStatements.find(s => s.id === statementId);
            if (!statement || statement.matched) return;
            
            const selectedBankCode = document.getElementById('bankAccount').value;
            
            // Determine transaction type and accounts
            let debitAccount, creditAccount, amount;
            
            if (statement.debit > 0) {
                // Money coming in - debit bank account
                debitAccount = selectedBankCode;
                creditAccount = '4001'; // Default to sales revenue
                amount = statement.debit;
            } else {
                // Money going out - credit bank account
                debitAccount = '5001'; // Default to operational expense
                creditAccount = selectedBankCode;
                amount = statement.credit;
            }
            
            const transaction = {
                id: Date.now(),
                date: statement.date,
                description: statement.description,
                debitAccount: debitAccount,
                creditAccount: creditAccount,
                amount: amount
            };
            
            transactions.push(transaction);
            updateAccountBalances(transaction);
            
            // Mark statement as matched
            statement.matched = true;
            statement.matchedTransactionId = transaction.id;
            
            // Create reconciliation record
            reconciliations.push({
                id: Date.now() + 1,
                transactionId: transaction.id,
                bankStatementId: statementId,
                bankAccountCode: selectedBankCode,
                date: new Date().toISOString(),
                matchType: 'auto'
            });
            
            loadBankStatements();
            loadBookTransactions();
            updateReconciliationSummary();
            updateDashboard();
            saveToLocalStorage();
            
            alert('Transaksi berhasil dibuat dari data mutasi bank!');
        }

        function autoMatchTransactions() {
            const selectedBankCode = document.getElementById('bankAccount').value;
            if (!selectedBankCode) {
                alert('Pilih akun bank terlebih dahulu!');
                return;
            }
            
            const unmatchedStatements = bankStatements.filter(s => 
                s.bankAccountCode === selectedBankCode && !s.matched
            );
            
            const unmatchedTransactions = transactions.filter(t => 
                (t.debitAccount === selectedBankCode || t.creditAccount === selectedBankCode) &&
                !reconciliations.some(r => r.transactionId === t.id)
            );
            
            let matchCount = 0;
            
            unmatchedStatements.forEach(statement => {
                const matchingTransaction = unmatchedTransactions.find(transaction => {
                    const amountMatch = Math.abs(transaction.amount - (statement.debit || statement.credit)) < 1;
                    const dateMatch = Math.abs(new Date(transaction.date) - new Date(statement.date)) <= 7 * 24 * 60 * 60 * 1000; // 7 days tolerance
                    
                    return amountMatch && dateMatch;
                });
                
                if (matchingTransaction) {
                    statement.matched = true;
                    statement.matchedTransactionId = matchingTransaction.id;
                    
                    reconciliations.push({
                        id: Date.now() + matchCount,
                        transactionId: matchingTransaction.id,
                        bankStatementId: statement.id,
                        bankAccountCode: selectedBankCode,
                        date: new Date().toISOString(),
                        matchType: 'auto'
                    });
                    
                    matchCount++;
                }
            });
            
            if (matchCount > 0) {
                loadBankStatements();
                loadBookTransactions();
                updateReconciliationSummary();
                saveToLocalStorage();
                alert(`Berhasil mencocokkan ${matchCount} transaksi secara otomatis!`);
            } else {
                alert('Tidak ada transaksi yang dapat dicocokkan secara otomatis.');
            }
        }

        function clearBankData() {
            const selectedBankCode = document.getElementById('bankAccount').value;
            if (!selectedBankCode) {
                alert('Pilih akun bank terlebih dahulu!');
                return;
            }
            
            if (!confirm('Yakin ingin menghapus semua data mutasi bank untuk akun ini?')) {
                return;
            }
            
            // Remove bank statements for selected account
            bankStatements = bankStatements.filter(s => s.bankAccountCode !== selectedBankCode);
            
            // Remove related reconciliations
            reconciliations = reconciliations.filter(r => r.bankAccountCode !== selectedBankCode);
            
            loadBankStatements();
            loadBookTransactions();
            updateReconciliationSummary();
            saveToLocalStorage();
            
            alert('Data mutasi bank berhasil dihapus!');
        }

        // Event listeners for bank account and period changes
        document.getElementById('bankAccount').addEventListener('change', function() {
            loadBankStatements();
            loadBookTransactions();
            updateReconciliationSummary();
        });

        document.getElementById('reconciliationPeriod').addEventListener('change', function() {
            updateReconciliationSummary();
        });

        // Export Report CSV Function
        function exportReportCSV(reportType) {
            const period = getReportPeriod();
            let csvContent = '';
            let filename = '';
            
            switch (reportType) {
                case 'balance-sheet':
                    csvContent = generateBalanceSheetCSV(period);
                    filename = `neraca-${period.startDate}-${period.endDate}.csv`;
                    break;
                case 'income-statement':
                    csvContent = generateIncomeStatementCSV(period);
                    filename = `laba-rugi-${period.startDate}-${period.endDate}.csv`;
                    break;
                case 'cash-flow':
                    csvContent = generateCashFlowCSV(period);
                    filename = `arus-kas-${period.startDate}-${period.endDate}.csv`;
                    break;
                default:
                    alert('Jenis laporan tidak dikenali!');
                    return;
            }
            
            downloadCSV(csvContent, filename);
        }

        function generateBalanceSheetCSV(period) {
            const filteredTransactions = getFilteredTransactions();
            const accountBalances = {};
            
            accounts.forEach(acc => {
                accountBalances[acc.code] = 0;
            });
            
            filteredTransactions.forEach(transaction => {
                const debitAccount = accounts.find(acc => acc.code === transaction.debitAccount);
                const creditAccount = accounts.find(acc => acc.code === transaction.creditAccount);
                
                if (debitAccount) {
                    if (debitAccount.type === 'asset' || debitAccount.type === 'expense') {
                        accountBalances[debitAccount.code] += transaction.amount;
                    } else {
                        accountBalances[debitAccount.code] -= transaction.amount;
                    }
                }
                
                if (creditAccount) {
                    if (creditAccount.type === 'liability' || creditAccount.type === 'equity' || creditAccount.type === 'revenue') {
                        accountBalances[creditAccount.code] += transaction.amount;
                    } else {
                        accountBalances[creditAccount.code] -= transaction.amount;
                    }
                }
            });
            
            let csv = `NERACA\n`;
            csv += `Periode: ${period.startDateFormatted} - ${period.endDateFormatted}\n`;
            csv += `Dibuat: ${new Date().toLocaleString('id-ID')}\n\n`;
            
            csv += `ASET\n`;
            csv += `Kode,Nama Akun,Saldo\n`;
            
            const assets = accounts.filter(acc => acc.type === 'asset');
            let totalAssets = 0;
            
            assets.forEach(acc => {
                const balance = accountBalances[acc.code] || 0;
                totalAssets += balance;
                csv += `${acc.code},"${acc.name}",${balance}\n`;
            });
            
            csv += `,,${totalAssets}\n`;
            csv += `TOTAL ASET,,${totalAssets}\n\n`;
            
            csv += `KEWAJIBAN\n`;
            csv += `Kode,Nama Akun,Saldo\n`;
            
            const liabilities = accounts.filter(acc => acc.type === 'liability');
            let totalLiabilities = 0;
            
            liabilities.forEach(acc => {
                const balance = accountBalances[acc.code] || 0;
                totalLiabilities += balance;
                csv += `${acc.code},"${acc.name}",${balance}\n`;
            });
            
            csv += `TOTAL KEWAJIBAN,,${totalLiabilities}\n\n`;
            
            csv += `EKUITAS\n`;
            csv += `Kode,Nama Akun,Saldo\n`;
            
            const equity = accounts.filter(acc => acc.type === 'equity');
            let totalEquity = 0;
            
            equity.forEach(acc => {
                const balance = accountBalances[acc.code] || 0;
                totalEquity += balance;
                csv += `${acc.code},"${acc.name}",${balance}\n`;
            });
            
            // Add retained earnings
            const revenues = accounts.filter(acc => acc.type === 'revenue');
            const expenses = accounts.filter(acc => acc.type === 'expense');
            const totalRevenue = revenues.reduce((sum, acc) => sum + (accountBalances[acc.code] || 0), 0);
            const totalExpense = expenses.reduce((sum, acc) => sum + (accountBalances[acc.code] || 0), 0);
            const netIncome = totalRevenue - totalExpense;
            
            csv += `,"Laba Ditahan",${netIncome}\n`;
            totalEquity += netIncome;
            
            csv += `TOTAL EKUITAS,,${totalEquity}\n`;
            csv += `TOTAL KEWAJIBAN & EKUITAS,,${totalLiabilities + totalEquity}\n`;
            
            return csv;
        }

        function generateIncomeStatementCSV(period) {
            const filteredTransactions = getFilteredTransactions();
            const accountBalances = {};
            
            accounts.forEach(acc => {
                accountBalances[acc.code] = 0;
            });
            
            filteredTransactions.forEach(transaction => {
                const debitAccount = accounts.find(acc => acc.code === transaction.debitAccount);
                const creditAccount = accounts.find(acc => acc.code === transaction.creditAccount);
                
                if (debitAccount) {
                    if (debitAccount.type === 'asset' || debitAccount.type === 'expense') {
                        accountBalances[debitAccount.code] += transaction.amount;
                    } else {
                        accountBalances[debitAccount.code] -= transaction.amount;
                    }
                }
                
                if (creditAccount) {
                    if (creditAccount.type === 'liability' || creditAccount.type === 'equity' || creditAccount.type === 'revenue') {
                        accountBalances[creditAccount.code] += transaction.amount;
                    } else {
                        accountBalances[creditAccount.code] -= transaction.amount;
                    }
                }
            });
            
            let csv = `LAPORAN LABA RUGI\n`;
            csv += `Periode: ${period.startDateFormatted} - ${period.endDateFormatted}\n`;
            csv += `Dibuat: ${new Date().toLocaleString('id-ID')}\n\n`;
            
            csv += `PENDAPATAN\n`;
            csv += `Kode,Nama Akun,Saldo\n`;
            
            const revenues = accounts.filter(acc => acc.type === 'revenue');
            let totalRevenue = 0;
            
            revenues.forEach(acc => {
                const balance = accountBalances[acc.code] || 0;
                totalRevenue += balance;
                csv += `${acc.code},"${acc.name}",${balance}\n`;
            });
            
            csv += `TOTAL PENDAPATAN,,${totalRevenue}\n\n`;
            
            csv += `BEBAN\n`;
            csv += `Kode,Nama Akun,Saldo\n`;
            
            const expenses = accounts.filter(acc => acc.type === 'expense');
            let totalExpense = 0;
            
            expenses.forEach(acc => {
                const balance = accountBalances[acc.code] || 0;
                totalExpense += balance;
                csv += `${acc.code},"${acc.name}",${balance}\n`;
            });
            
            csv += `TOTAL BEBAN,,${totalExpense}\n\n`;
            
            const netIncome = totalRevenue - totalExpense;
            csv += `LABA BERSIH,,${netIncome}\n`;
            
            const netMargin = totalRevenue > 0 ? ((netIncome / totalRevenue) * 100) : 0;
            csv += `MARGIN BERSIH (%),,${netMargin.toFixed(2)}\n`;
            
            return csv;
        }

        function generateCashFlowCSV(period) {
            const filteredTransactions = getFilteredTransactions();
            
            // Get all cash and bank accounts
            const cashAccounts = accounts.filter(acc => 
                acc.type === 'asset' && 
                (acc.name.toLowerCase().includes('kas') || 
                 acc.name.toLowerCase().includes('bank') ||
                 acc.name.toLowerCase().includes('rekening') ||
                 acc.code.startsWith('1001') || 
                 acc.code.startsWith('1002') ||
                 acc.code.startsWith('1003'))
            );
            
            if (cashAccounts.length === 0) {
                return `LAPORAN ARUS KAS\nERROR: Tidak ada akun kas/bank yang ditemukan\n`;
            }
            
            const cashAccountCodes = cashAccounts.map(acc => acc.code);
            const cashTransactions = filteredTransactions.filter(t => 
                cashAccountCodes.includes(t.debitAccount) || cashAccountCodes.includes(t.creditAccount)
            );
            
            let csv = `LAPORAN ARUS KAS\n`;
            csv += `Metode Langsung\n`;
            csv += `Periode: ${period.startDateFormatted} - ${period.endDateFormatted}\n`;
            csv += `Dibuat: ${new Date().toLocaleString('id-ID')}\n`;
            csv += `Akun Kas/Bank: ${cashAccounts.map(acc => `${acc.code}-${acc.name}`).join(', ')}\n\n`;
            
            // Categorize transactions (same logic as generateCashFlow)
            let operatingInflows = 0, operatingOutflows = 0;
            let investingInflows = 0, investingOutflows = 0;
            let financingInflows = 0, financingOutflows = 0;
            
            const operatingTransactions = [];
            const investingTransactions = [];
            const financingTransactions = [];
            
            cashTransactions.forEach(transaction => {
                const isCashDebit = cashAccountCodes.includes(transaction.debitAccount);
                const isCashCredit = cashAccountCodes.includes(transaction.creditAccount);
                
                // Skip internal transfers
                if (isCashDebit && isCashCredit) return;
                
                const otherAccountCode = isCashDebit ? transaction.creditAccount : transaction.debitAccount;
                const otherAccount = accounts.find(acc => acc.code === otherAccountCode);
                
                if (!otherAccount) return;
                
                const accountName = otherAccount.name.toLowerCase();
                const accountType = otherAccount.type;
                const accountCode = otherAccount.code;
                
                // Categorize using same logic as main function
                if (accountType === 'revenue' || accountType === 'expense' ||
                    accountName.includes('piutang') || accountName.includes('utang') && !accountName.includes('jangka panjang') ||
                    accountName.includes('persediaan') || accountName.includes('beban') || accountName.includes('biaya') ||
                    accountCode.startsWith('4') || accountCode.startsWith('5') ||
                    accountCode.startsWith('11') && !accountCode.startsWith('13')) {
                    
                    operatingTransactions.push({
                        ...transaction,
                        isCashDebit,
                        otherAccount: otherAccount.name
                    });
                    
                    if (isCashDebit) {
                        operatingInflows += transaction.amount;
                    } else {
                        operatingOutflows += transaction.amount;
                    }
                    
                } else if (accountName.includes('peralatan') || accountName.includes('gedung') ||
                           accountName.includes('kendaraan') || accountName.includes('investasi') ||
                           accountCode.startsWith('13') || accountCode.startsWith('14')) {
                    
                    investingTransactions.push({
                        ...transaction,
                        isCashDebit,
                        otherAccount: otherAccount.name
                    });
                    
                    if (isCashDebit) {
                        investingInflows += transaction.amount;
                    } else {
                        investingOutflows += transaction.amount;
                    }
                    
                } else if (accountType === 'equity' || 
                           (accountType === 'liability' && (accountName.includes('jangka panjang') || 
                            accountName.includes('modal') || accountCode.startsWith('3') ||
                            accountCode.startsWith('22') || accountCode.startsWith('23')))) {
                    
                    financingTransactions.push({
                        ...transaction,
                        isCashDebit,
                        otherAccount: otherAccount.name
                    });
                    
                    if (isCashDebit) {
                        financingInflows += transaction.amount;
                    } else {
                        financingOutflows += transaction.amount;
                    }
                } else {
                    // Default to operating
                    operatingTransactions.push({
                        ...transaction,
                        isCashDebit,
                        otherAccount: otherAccount.name
                    });
                    
                    if (isCashDebit) {
                        operatingInflows += transaction.amount;
                    } else {
                        operatingOutflows += transaction.amount;
                    }
                }
            });
            
            // OPERATING ACTIVITIES
            csv += `AKTIVITAS OPERASI\n`;
            csv += `Tanggal,Deskripsi,Akun,Penerimaan,Pengeluaran\n`;
            
            operatingTransactions.forEach(t => {
                csv += `${t.date},"${t.description}","${t.otherAccount}",`;
                csv += `${t.isCashDebit ? t.amount : 0},${t.isCashDebit ? 0 : t.amount}\n`;
            });
            
            const netOperatingCash = operatingInflows - operatingOutflows;
            csv += `TOTAL AKTIVITAS OPERASI,,,${operatingInflows},${operatingOutflows}\n`;
            csv += `KAS BERSIH DARI AKTIVITAS OPERASI,,,${netOperatingCash},\n\n`;
            
            // INVESTING ACTIVITIES
            csv += `AKTIVITAS INVESTASI\n`;
            csv += `Tanggal,Deskripsi,Akun,Penerimaan,Pengeluaran\n`;
            
            investingTransactions.forEach(t => {
                csv += `${t.date},"${t.description}","${t.otherAccount}",`;
                csv += `${t.isCashDebit ? t.amount : 0},${t.isCashDebit ? 0 : t.amount}\n`;
            });
            
            const netInvestingCash = investingInflows - investingOutflows;
            csv += `TOTAL AKTIVITAS INVESTASI,,,${investingInflows},${investingOutflows}\n`;
            csv += `KAS BERSIH DARI AKTIVITAS INVESTASI,,,${netInvestingCash},\n\n`;
            
            // FINANCING ACTIVITIES
            csv += `AKTIVITAS PENDANAAN\n`;
            csv += `Tanggal,Deskripsi,Akun,Penerimaan,Pengeluaran\n`;
            
            financingTransactions.forEach(t => {
                csv += `${t.date},"${t.description}","${t.otherAccount}",`;
                csv += `${t.isCashDebit ? t.amount : 0},${t.isCashDebit ? 0 : t.amount}\n`;
            });
            
            const netFinancingCash = financingInflows - financingOutflows;
            csv += `TOTAL AKTIVITAS PENDANAAN,,,${financingInflows},${financingOutflows}\n`;
            csv += `KAS BERSIH DARI AKTIVITAS PENDANAAN,,,${netFinancingCash},\n\n`;
            
            // SUMMARY
            const netCashFlow = netOperatingCash + netInvestingCash + netFinancingCash;
            let openingCash = 0;
            cashAccountCodes.forEach(code => {
                openingCash += calculateOpeningBalance(code, period.startDate);
            });
            const closingCash = openingCash + netCashFlow;
            
            csv += `RINGKASAN ARUS KAS\n`;
            csv += `Aktivitas,Kas Masuk,Kas Keluar,Kas Bersih\n`;
            csv += `Operasi,${operatingInflows},${operatingOutflows},${netOperatingCash}\n`;
            csv += `Investasi,${investingInflows},${investingOutflows},${netInvestingCash}\n`;
            csv += `Pendanaan,${financingInflows},${financingOutflows},${netFinancingCash}\n`;
            csv += `TOTAL,${operatingInflows + investingInflows + financingInflows},${operatingOutflows + investingOutflows + financingOutflows},${netCashFlow}\n\n`;
            
            csv += `SALDO KAS\n`;
            csv += `Kas & Bank Awal Periode,,${openingCash}\n`;
            csv += `Kenaikan (Penurunan) Kas Bersih,,${netCashFlow}\n`;
            csv += `Kas & Bank Akhir Periode,,${closingCash}\n`;
            
            return csv;
        }

        // Initialize report dates
        function initializeReportDates() {
            const today = new Date();
            const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
            const lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);
            
            document.getElementById('reportStartDate').value = firstDayOfMonth.toISOString().split('T')[0];
            document.getElementById('reportEndDate').value = lastDayOfMonth.toISOString().split('T')[0];
        }

        // Bulk Import Functions
        let importData = [];
        let validationErrors = [];

        function downloadTransactionTemplate() {
            // Create comprehensive CSV template with examples
            let csvContent = `Template Import Transaksi Masal - FinanceFlow Pro\n`;
            csvContent += `Petunjuk Penggunaan:\n`;
            csvContent += `1. Isi data sesuai format di bawah ini\n`;
            csvContent += `2. Format Tanggal: YYYY-MM-DD (contoh: 2024-01-15)\n`;
            csvContent += `3. Gunakan kode akun yang sudah ada di Chart of Accounts\n`;
            csvContent += `4. Jumlah dalam angka tanpa titik/koma (contoh: 1000000)\n`;
            csvContent += `5. Pastikan akun debit dan kredit berbeda\n`;
            csvContent += `6. Hapus baris contoh sebelum import\n\n`;
            
            csvContent += `Daftar Akun yang Tersedia:\n`;
            accounts.forEach(acc => {
                csvContent += `${acc.code} - ${acc.name} (${getAccountTypeName(acc.type)})\n`;
            });
            csvContent += `\n`;
            
            csvContent += `DATA TRANSAKSI (Mulai dari baris ini):\n`;
            csvContent += `Tanggal,Deskripsi,Kode_Akun_Debit,Kode_Akun_Kredit,Jumlah\n`;
            
            // Add example transactions
            csvContent += `2024-01-01,Penjualan Tunai,1001,4001,1000000\n`;
            csvContent += `2024-01-02,Pembelian Perlengkapan,5001,1001,500000\n`;
            csvContent += `2024-01-03,Pembayaran Gaji Karyawan,5001,1002,2000000\n`;
            csvContent += `2024-01-04,Penerimaan Piutang,1001,1101,750000\n`;
            csvContent += `2024-01-05,Pembayaran Utang Supplier,2001,1002,1200000\n`;
            csvContent += `2024-01-06,Investasi Modal Tambahan,1001,3001,5000000\n`;
            csvContent += `2024-01-07,Pembelian Peralatan,1301,1002,3000000\n`;
            csvContent += `2024-01-08,Penjualan Kredit,1101,4001,1500000\n`;
            csvContent += `2024-01-09,Biaya Sewa Kantor,5001,1001,800000\n`;
            csvContent += `2024-01-10,Penerimaan Bunga Bank,1002,4001,50000\n`;
            
            // Download as CSV
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            
            if (link.download !== undefined) {
                const url = URL.createObjectURL(blob);
                link.setAttribute('href', url);
                link.setAttribute('download', `template-import-transaksi-${new Date().toISOString().split('T')[0]}.csv`);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                alert('Template Excel berhasil diunduh! Isi data transaksi sesuai format yang disediakan.');
            }
        }

        function showBulkImportForm() {
            document.getElementById('bulkImportModal').classList.remove('hidden');
            document.getElementById('bulkImportModal').classList.add('flex');
            
            // Reset form
            document.getElementById('bulkImportFile').value = '';
            document.getElementById('importPreview').classList.add('hidden');
            document.getElementById('validationResults').classList.add('hidden');
            document.getElementById('importButton').disabled = true;
            document.getElementById('importButton').classList.add('opacity-50');
            importData = [];
            validationErrors = [];
        }

        function hideBulkImportForm() {
            document.getElementById('bulkImportModal').classList.add('hidden');
            document.getElementById('bulkImportModal').classList.remove('flex');
        }

        function previewImport() {
            const fileInput = document.getElementById('bulkImportFile');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('Pilih file terlebih dahulu!');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const text = e.target.result;
                    const lines = text.split('\n');
                    
                    // Find the data start line (after "DATA TRANSAKSI")
                    let dataStartIndex = -1;
                    for (let i = 0; i < lines.length; i++) {
                        if (lines[i].includes('DATA TRANSAKSI') || lines[i].includes('Tanggal,Deskripsi')) {
                            dataStartIndex = i + 1;
                            break;
                        }
                    }
                    
                    if (dataStartIndex === -1) {
                        // If no header found, assume first line is header
                        dataStartIndex = 1;
                    }
                    
                    const dataLines = lines.slice(dataStartIndex).filter(line => line.trim() !== '');
                    importData = [];
                    validationErrors = [];
                    
                    dataLines.forEach((line, index) => {
                        const columns = line.split(',');
                        if (columns.length >= 5) {
                            const transaction = {
                                rowNumber: dataStartIndex + index + 1,
                                date: columns[0].trim(),
                                description: columns[1].trim().replace(/"/g, ''),
                                debitAccount: columns[2].trim(),
                                creditAccount: columns[3].trim(),
                                amount: parseFloat(columns[4].trim()) || 0
                            };
                            
                            importData.push(transaction);
                        }
                    });
                    
                    if (importData.length === 0) {
                        alert('Tidak ada data transaksi yang valid ditemukan dalam file!');
                        return;
                    }
                    
                    // Validate data
                    validateImportData();
                    
                    // Show preview
                    showImportPreview();
                    
                } catch (error) {
                    alert('Error membaca file: ' + error.message);
                }
            };
            
            reader.readAsText(file);
        }

        function validateImportData() {
            validationErrors = [];
            let validCount = 0;
            
            importData.forEach((transaction, index) => {
                const errors = [];
                
                // Validate date
                if (!transaction.date || isNaN(Date.parse(transaction.date))) {
                    errors.push('Format tanggal tidak valid');
                }
                
                // Validate description
                if (!transaction.description || transaction.description.trim() === '') {
                    errors.push('Deskripsi tidak boleh kosong');
                }
                
                // Validate debit account
                const debitAccount = accounts.find(acc => acc.code === transaction.debitAccount);
                if (!debitAccount) {
                    errors.push(`Kode akun debit "${transaction.debitAccount}" tidak ditemukan`);
                }
                
                // Validate credit account
                const creditAccount = accounts.find(acc => acc.code === transaction.creditAccount);
                if (!creditAccount) {
                    errors.push(`Kode akun kredit "${transaction.creditAccount}" tidak ditemukan`);
                }
                
                // Validate same account
                if (transaction.debitAccount === transaction.creditAccount) {
                    errors.push('Akun debit dan kredit tidak boleh sama');
                }
                
                // Validate amount
                if (!transaction.amount || transaction.amount <= 0) {
                    errors.push('Jumlah harus lebih besar dari 0');
                }
                
                if (errors.length > 0) {
                    validationErrors.push({
                        rowNumber: transaction.rowNumber,
                        transaction: transaction,
                        errors: errors
                    });
                } else {
                    validCount++;
                }
            });
            
            return validCount;
        }

        function showImportPreview() {
            const previewDiv = document.getElementById('importPreview');
            const previewContent = document.getElementById('previewContent');
            const previewStats = document.getElementById('previewStats');
            const validationDiv = document.getElementById('validationResults');
            const validationContent = document.getElementById('validationContent');
            const importButton = document.getElementById('importButton');
            
            // Show preview
            previewDiv.classList.remove('hidden');
            
            // Create preview table
            let previewHTML = `
                <div class="overflow-x-auto">
                    <table class="w-full text-xs">
                        <thead class="bg-white/10">
                            <tr>
                                <th class="px-2 py-1 text-left">Baris</th>
                                <th class="px-2 py-1 text-left">Tanggal</th>
                                <th class="px-2 py-1 text-left">Deskripsi</th>
                                <th class="px-2 py-1 text-left">Debit</th>
                                <th class="px-2 py-1 text-left">Kredit</th>
                                <th class="px-2 py-1 text-right">Jumlah</th>
                                <th class="px-2 py-1 text-center">Status</th>
                            </tr>
                        </thead>
                        <tbody>
            `;
            
            importData.slice(0, 10).forEach(transaction => {
                const hasError = validationErrors.some(err => err.rowNumber === transaction.rowNumber);
                const debitAccount = accounts.find(acc => acc.code === transaction.debitAccount);
                const creditAccount = accounts.find(acc => acc.code === transaction.creditAccount);
                
                previewHTML += `
                    <tr class="border-b border-white/10 ${hasError ? 'bg-red-500/20' : 'bg-green-500/10'}">
                        <td class="px-2 py-1">${transaction.rowNumber}</td>
                        <td class="px-2 py-1">${transaction.date}</td>
                        <td class="px-2 py-1">${transaction.description}</td>
                        <td class="px-2 py-1">${debitAccount ? debitAccount.name : transaction.debitAccount}</td>
                        <td class="px-2 py-1">${creditAccount ? creditAccount.name : transaction.creditAccount}</td>
                        <td class="px-2 py-1 text-right">Rp ${transaction.amount.toLocaleString('id-ID')}</td>
                        <td class="px-2 py-1 text-center">
                            ${hasError ? '<span class="text-red-400">‚ùå</span>' : '<span class="text-green-400">‚úÖ</span>'}
                        </td>
                    </tr>
                `;
            });
            
            if (importData.length > 10) {
                previewHTML += `
                    <tr>
                        <td colspan="7" class="px-2 py-2 text-center text-gray-400">
                            ... dan ${importData.length - 10} transaksi lainnya
                        </td>
                    </tr>
                `;
            }
            
            previewHTML += `
                        </tbody>
                    </table>
                </div>
            `;
            
            previewContent.innerHTML = previewHTML;
            
            // Update stats
            const validCount = importData.length - validationErrors.length;
            previewStats.innerHTML = `
                Total: ${importData.length} transaksi | 
                Valid: <span class="text-green-400">${validCount}</span> | 
                Error: <span class="text-red-400">${validationErrors.length}</span>
            `;
            
            // Show validation results if there are errors
            if (validationErrors.length > 0) {
                validationDiv.classList.remove('hidden');
                
                let validationHTML = '';
                validationErrors.slice(0, 5).forEach(error => {
                    validationHTML += `
                        <div class="bg-red-500/20 border border-red-500/50 rounded-lg p-3">
                            <div class="font-semibold text-red-300">Baris ${error.rowNumber}: ${error.transaction.description}</div>
                            <ul class="text-sm text-gray-300 mt-1">
                                ${error.errors.map(err => `<li>‚Ä¢ ${err}</li>`).join('')}
                            </ul>
                        </div>
                    `;
                });
                
                if (validationErrors.length > 5) {
                    validationHTML += `
                        <div class="text-center text-gray-400 text-sm">
                            ... dan ${validationErrors.length - 5} error lainnya
                        </div>
                    `;
                }
                
                validationContent.innerHTML = validationHTML;
                
                // Disable import if there are errors
                importButton.disabled = true;
                importButton.classList.add('opacity-50');
            } else {
                validationDiv.classList.add('hidden');
                
                // Enable import if no errors
                importButton.disabled = false;
                importButton.classList.remove('opacity-50');
            }
        }

        function executeImport() {
            if (validationErrors.length > 0) {
                alert('Masih ada error dalam data. Perbaiki terlebih dahulu sebelum import!');
                return;
            }
            
            if (importData.length === 0) {
                alert('Tidak ada data untuk diimport!');
                return;
            }
            
            if (!confirm(`Yakin ingin mengimport ${importData.length} transaksi? Tindakan ini tidak dapat dibatalkan.`)) {
                return;
            }
            
            let successCount = 0;
            let errorCount = 0;
            
            importData.forEach(transactionData => {
                try {
                    const transaction = {
                        id: Date.now() + successCount,
                        date: transactionData.date,
                        description: transactionData.description,
                        debitAccount: transactionData.debitAccount,
                        creditAccount: transactionData.creditAccount,
                        amount: transactionData.amount
                    };
                    
                    transactions.push(transaction);
                    updateAccountBalances(transaction);
                    successCount++;
                    
                } catch (error) {
                    console.error('Error importing transaction:', error);
                    errorCount++;
                }
            });
            
            // Save and refresh
            saveToLocalStorage();
            loadTransactions();
            updateDashboard();
            hideBulkImportForm();
            
            // Show result
            if (errorCount === 0) {
                alert(`‚úÖ Import berhasil!\n\n${successCount} transaksi berhasil diimport.`);
            } else {
                alert(`‚ö†Ô∏è Import selesai dengan peringatan!\n\nBerhasil: ${successCount} transaksi\nGagal: ${errorCount} transaksi`);
            }
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            // Load saved data
            loadFromLocalStorage();
            
            // Initialize account types if empty
            if (Object.keys(accountTypes).length === 0) {
                accountTypes = getDefaultAccountTypes();
            }
            
            // Initialize displays
            updateDashboard();
            populateAccountSelects();
            populateAccountTypeSelect();
            updateDataStats();
            initializeReportDates();
            
            // Auto-save every 30 seconds
            setInterval(saveToLocalStorage, 30000);
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'96eeecc29117ce09',t:'MTc1NTE1ODQ5My4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
