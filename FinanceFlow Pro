<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FinanceFlow Pro - Sistem Akuntansi Bisnis</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#6366f1',
                        secondary: '#8b5cf6',
                        accent: '#06b6d4',
                        dark: '#0f172a',
                        'dark-light': '#1e293b'
                    }
                }
            }
        }
    </script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        body { font-family: 'Inter', sans-serif; }
        .glass-effect {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .card-hover {
            transition: all 0.3s ease;
        }
        .card-hover:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        .login-container {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .role-badge {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 500;
        }
        .role-admin { background: rgba(34, 197, 94, 0.2); color: #22c55e; }
        .role-user { background: rgba(59, 130, 246, 0.2); color: #3b82f6; }
        .role-viewer { background: rgba(156, 163, 175, 0.2); color: #9ca3af; }
    </style>
</head>
<body class="bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 min-h-screen text-white">
    <!-- Login Screen -->
    <div id="loginScreen" class="login-container">
        <div class="glass-effect p-8 rounded-2xl w-full max-w-md mx-4">
            <div class="text-center mb-8">
                <div class="w-16 h-16 bg-gradient-to-r from-primary to-secondary rounded-xl flex items-center justify-center mx-auto mb-4">
                    <span class="text-white font-bold text-2xl">â‚¹</span>
                </div>
                <h1 class="text-2xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent mb-2">
                    FinanceFlow Pro
                </h1>
                <p class="text-gray-400">Sistem Akuntansi Bisnis</p>
            </div>
            
            <form onsubmit="handleLogin(event)" class="space-y-6">
                <div>
                    <label class="block text-sm font-medium mb-2">Username</label>
                    <input type="text" id="loginUsername" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Password</label>
                    <input type="password" id="loginPassword" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                </div>
                <button type="submit" class="w-full py-3 bg-gradient-to-r from-primary to-secondary rounded-lg font-semibold hover:shadow-lg transition-all">
                    Masuk
                </button>
            </form>
            
            <div class="mt-6 p-4 bg-white/5 rounded-lg">
                <h4 class="text-sm font-semibold mb-2">Akun Demo:</h4>
                <div class="text-xs space-y-1 text-gray-400">
                    <div><strong>Admin:</strong> admin / admin123</div>
                    <div><strong>User:</strong> user / user123</div>
                    <div><strong>Viewer:</strong> viewer / viewer123</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Application -->
    <div id="mainApp" class="hidden">
    <!-- Navigation -->
    <nav class="glass-effect p-4 mb-4 md:mb-8">
        <div class="max-w-7xl mx-auto">
            <div class="flex justify-between items-center">
                <div class="flex items-center space-x-2 md:space-x-3">
                    <div class="w-8 h-8 md:w-10 md:h-10 bg-gradient-to-r from-primary to-secondary rounded-lg flex items-center justify-center">
                        <span class="text-white font-bold text-lg md:text-xl">â‚¹</span>
                    </div>
                    <h1 class="text-lg md:text-2xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
                        FinanceFlow Pro
                    </h1>
                </div>
                <div class="hidden md:flex items-center space-x-4">
                    <div class="text-right">
                        <div class="text-sm font-medium" id="currentUserName">Admin</div>
                        <div class="text-xs text-gray-400">
                            <span id="currentUserRole" class="role-badge role-admin">Admin</span>
                        </div>
                    </div>
                    <button onclick="logout()" class="p-2 text-gray-400 hover:text-white hover:bg-white/10 rounded-lg transition-all">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                        </svg>
                    </button>
                </div>
                <button onclick="toggleMobileMenu()" class="md:hidden p-2 rounded-lg hover:bg-white/10">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                    </svg>
                </button>
            </div>
            
            <!-- Desktop Navigation -->
            <div class="hidden md:flex space-x-6 mt-4">
                <button onclick="showSection('dashboard')" class="nav-btn px-4 py-2 rounded-lg hover:bg-white/10 transition-all active">Dashboard</button>
                <button onclick="showSection('transactions')" class="nav-btn px-4 py-2 rounded-lg hover:bg-white/10 transition-all">Transaksi</button>
                <button onclick="showSection('assets')" class="nav-btn px-4 py-2 rounded-lg hover:bg-white/10 transition-all">Aset</button>
                <button onclick="showSection('reports')" class="nav-btn px-4 py-2 rounded-lg hover:bg-white/10 transition-all">Laporan</button>
                <button onclick="showSection('settings')" class="nav-btn px-4 py-2 rounded-lg hover:bg-white/10 transition-all">Pengaturan</button>
            </div>
            
            <!-- Mobile Navigation -->
            <div id="mobileMenu" class="md:hidden mt-4 space-y-2 hidden">
                <div class="flex items-center justify-between p-4 bg-white/5 rounded-lg mb-4">
                    <div>
                        <div class="text-sm font-medium" id="mobileUserName">Admin</div>
                        <div class="text-xs text-gray-400">
                            <span id="mobileUserRole" class="role-badge role-admin">Admin</span>
                        </div>
                    </div>
                    <button onclick="logout()" class="p-2 text-gray-400 hover:text-white hover:bg-white/10 rounded-lg transition-all">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                        </svg>
                    </button>
                </div>
                <button onclick="showSection('dashboard')" class="nav-btn w-full text-left px-4 py-3 rounded-lg hover:bg-white/10 transition-all active">Dashboard</button>
                <button onclick="showSection('transactions')" class="nav-btn w-full text-left px-4 py-3 rounded-lg hover:bg-white/10 transition-all">Transaksi</button>
                <button onclick="showSection('assets')" class="nav-btn w-full text-left px-4 py-3 rounded-lg hover:bg-white/10 transition-all">Aset</button>
                <button onclick="showSection('reports')" class="nav-btn w-full text-left px-4 py-3 rounded-lg hover:bg-white/10 transition-all">Laporan</button>
                <button onclick="showSection('settings')" class="nav-btn w-full text-left px-4 py-3 rounded-lg hover:bg-white/10 transition-all">Pengaturan</button>
            </div>
        </div>
    </nav>

    <div class="max-w-7xl mx-auto px-2 sm:px-4">
        <!-- Dashboard Section -->
        <div id="dashboard" class="section">
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-6 md:mb-8">
                <!-- Summary Cards -->
                <div class="glass-effect p-6 rounded-xl card-hover">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-gray-300 text-sm">Total Aset</p>
                            <p class="text-2xl font-bold text-green-400" id="totalAssets">Rp 0</p>
                        </div>
                        <div class="w-12 h-12 bg-green-500/20 rounded-lg flex items-center justify-center">
                            <span class="text-green-400 text-xl">ðŸ“Š</span>
                        </div>
                    </div>
                </div>

                <div class="glass-effect p-6 rounded-xl card-hover">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-gray-300 text-sm">Total Liabilitas</p>
                            <p class="text-2xl font-bold text-red-400" id="totalLiabilities">Rp 0</p>
                        </div>
                        <div class="w-12 h-12 bg-red-500/20 rounded-lg flex items-center justify-center">
                            <span class="text-red-400 text-xl">ðŸ“‰</span>
                        </div>
                    </div>
                </div>

                <div class="glass-effect p-6 rounded-xl card-hover">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-gray-300 text-sm">Modal</p>
                            <p class="text-2xl font-bold text-blue-400" id="totalEquity">Rp 0</p>
                        </div>
                        <div class="w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center">
                            <span class="text-blue-400 text-xl">ðŸ’°</span>
                        </div>
                    </div>
                </div>

                <div class="glass-effect p-6 rounded-xl card-hover">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-gray-300 text-sm">Laba Bulan Ini</p>
                            <p class="text-2xl font-bold text-purple-400" id="monthlyProfit">Rp 0</p>
                        </div>
                        <div class="w-12 h-12 bg-purple-500/20 rounded-lg flex items-center justify-center">
                            <span class="text-purple-400 text-xl">ðŸ“ˆ</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Transactions -->
            <div class="glass-effect p-4 md:p-6 rounded-xl mb-6 md:mb-8">
                <h3 class="text-lg md:text-xl font-semibold mb-4">Transaksi Terbaru</h3>
                <div class="overflow-x-auto">
                    <table class="w-full min-w-[600px]">
                        <thead>
                            <tr class="border-b border-gray-600">
                                <th class="text-left py-2 md:py-3 text-gray-300 text-sm md:text-base">Tanggal</th>
                                <th class="text-left py-2 md:py-3 text-gray-300 text-sm md:text-base">Deskripsi</th>
                                <th class="text-left py-2 md:py-3 text-gray-300 text-sm md:text-base">Akun</th>
                                <th class="text-right py-2 md:py-3 text-gray-300 text-sm md:text-base">Debit</th>
                                <th class="text-right py-2 md:py-3 text-gray-300 text-sm md:text-base">Kredit</th>
                            </tr>
                        </thead>
                        <tbody id="recentTransactions">
                            <tr class="border-b border-gray-700">
                                <td class="py-2 md:py-3 text-gray-300 text-sm md:text-base">Belum ada transaksi</td>
                                <td class="py-2 md:py-3"></td>
                                <td class="py-2 md:py-3"></td>
                                <td class="py-2 md:py-3"></td>
                                <td class="py-2 md:py-3"></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Transactions Section -->
        <div id="transactions" class="section hidden">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-3xl font-bold">Pencatatan Transaksi</h2>
                <button onclick="showTransactionForm()" class="bg-gradient-to-r from-primary to-secondary px-6 py-3 rounded-lg font-semibold hover:shadow-lg transition-all">
                    + Tambah Transaksi
                </button>
            </div>

            <!-- Transaction Form -->
            <div id="transactionForm" class="glass-effect p-4 md:p-6 rounded-xl mb-6 md:mb-8 hidden">
                <h3 class="text-lg md:text-xl font-semibold mb-4">Form Transaksi Baru</h3>
                <form onsubmit="addTransaction(event)" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">Tanggal</label>
                        <input type="date" id="transactionDate" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Nomor Referensi</label>
                        <input type="text" id="transactionRef" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" placeholder="REF-001">
                    </div>
                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium mb-2">Deskripsi</label>
                        <input type="text" id="transactionDesc" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" placeholder="Deskripsi transaksi" required>
                    </div>
                    
                    <div id="journalEntries">
                        <div class="journal-entry grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-4 p-4 bg-white/5 rounded-lg">
                            <div class="sm:col-span-2 lg:col-span-1">
                                <label class="block text-sm font-medium mb-2">Akun</label>
                                <select class="account-select w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                                    <option value="">Pilih Akun</option>
                                </select>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Debit</label>
                                <input type="number" class="debit-amount w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" placeholder="0" min="0" step="0.01">
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Kredit</label>
                                <input type="number" class="credit-amount w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" placeholder="0" min="0" step="0.01">
                            </div>
                            <div class="flex items-end">
                                <button type="button" onclick="removeJournalEntry(this)" class="w-full p-3 bg-red-500/20 text-red-400 rounded-lg hover:bg-red-500/30 transition-all text-sm">Hapus</button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="md:col-span-2 flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4">
                        <button type="button" onclick="addJournalEntry()" class="px-4 py-2 bg-accent/20 text-accent rounded-lg hover:bg-accent/30 transition-all text-sm">+ Tambah Baris</button>
                        <button type="submit" class="px-6 py-2 bg-gradient-to-r from-primary to-secondary rounded-lg font-semibold hover:shadow-lg transition-all text-sm">Simpan Transaksi</button>
                        <button type="button" onclick="hideTransactionForm()" class="px-6 py-2 bg-gray-600 rounded-lg hover:bg-gray-700 transition-all text-sm">Batal</button>
                    </div>
                </form>
            </div>

            <!-- Transaction List -->
            <div class="glass-effect p-4 md:p-6 rounded-xl">
                <h3 class="text-lg md:text-xl font-semibold mb-4">Daftar Transaksi</h3>
                <div class="overflow-x-auto">
                    <table class="w-full min-w-[700px]">
                        <thead>
                            <tr class="border-b border-gray-600">
                                <th class="text-left py-2 md:py-3 text-gray-300 text-sm md:text-base">Tanggal</th>
                                <th class="text-left py-2 md:py-3 text-gray-300 text-sm md:text-base">Ref</th>
                                <th class="text-left py-2 md:py-3 text-gray-300 text-sm md:text-base">Deskripsi</th>
                                <th class="text-right py-2 md:py-3 text-gray-300 text-sm md:text-base">Total</th>
                                <th class="text-center py-2 md:py-3 text-gray-300 text-sm md:text-base">Aksi</th>
                            </tr>
                        </thead>
                        <tbody id="transactionList">
                            <tr class="border-b border-gray-700">
                                <td class="py-2 md:py-3 text-gray-300 text-sm md:text-base" colspan="5">Belum ada transaksi</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Assets Section -->
        <div id="assets" class="section hidden">
            <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-6 space-y-4 sm:space-y-0">
                <h2 class="text-2xl md:text-3xl font-bold">Manajemen Aset</h2>
                <button onclick="showAssetForm()" class="bg-gradient-to-r from-primary to-secondary px-4 md:px-6 py-2 md:py-3 rounded-lg font-semibold hover:shadow-lg transition-all text-sm md:text-base">
                    + Tambah Aset
                </button>
            </div>

            <!-- Asset Form -->
            <div id="assetForm" class="glass-effect p-4 md:p-6 rounded-xl mb-6 md:mb-8 hidden">
                <h3 class="text-xl font-semibold mb-4">Form Aset Baru</h3>
                <form onsubmit="addAsset(event)" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">Nama Aset</label>
                        <input type="text" id="assetName" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Kategori</label>
                        <select id="assetCategory" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                            <option value="">Pilih Kategori</option>
                            <option value="building">Bangunan</option>
                            <option value="equipment">Peralatan</option>
                            <option value="vehicle">Kendaraan</option>
                            <option value="furniture">Furniture</option>
                            <option value="computer">Komputer & IT</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Harga Perolehan</label>
                        <input type="number" id="assetCost" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required min="0" step="0.01">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Tanggal Perolehan</label>
                        <input type="date" id="assetDate" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Umur Ekonomis (Tahun)</label>
                        <input type="number" id="assetLife" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required min="1">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Nilai Residu</label>
                        <input type="number" id="assetResidual" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" min="0" step="0.01" value="0">
                    </div>
                    <div class="md:col-span-2 flex space-x-4">
                        <button type="submit" class="px-6 py-2 bg-gradient-to-r from-primary to-secondary rounded-lg font-semibold hover:shadow-lg transition-all">Simpan Aset</button>
                        <button type="button" onclick="hideAssetForm()" class="px-6 py-2 bg-gray-600 rounded-lg hover:bg-gray-700 transition-all">Batal</button>
                    </div>
                </form>
            </div>

            <!-- Asset List -->
            <div class="glass-effect p-4 md:p-6 rounded-xl">
                <h3 class="text-lg md:text-xl font-semibold mb-4">Daftar Aset</h3>
                <div class="overflow-x-auto">
                    <table class="w-full min-w-[800px]">
                        <thead>
                            <tr class="border-b border-gray-600">
                                <th class="text-left py-2 md:py-3 text-gray-300 text-sm md:text-base">Nama Aset</th>
                                <th class="text-left py-2 md:py-3 text-gray-300 text-sm md:text-base">Kategori</th>
                                <th class="text-right py-2 md:py-3 text-gray-300 text-sm md:text-base">Harga Perolehan</th>
                                <th class="text-right py-2 md:py-3 text-gray-300 text-sm md:text-base">Akumulasi Penyusutan</th>
                                <th class="text-right py-2 md:py-3 text-gray-300 text-sm md:text-base">Nilai Buku</th>
                                <th class="text-center py-2 md:py-3 text-gray-300 text-sm md:text-base">Aksi</th>
                            </tr>
                        </thead>
                        <tbody id="assetList">
                            <tr class="border-b border-gray-700">
                                <td class="py-2 md:py-3 text-gray-300 text-sm md:text-base" colspan="6">Belum ada aset</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Reports Section -->
        <div id="reports" class="section hidden">
            <h2 class="text-2xl md:text-3xl font-bold mb-6">Laporan Keuangan</h2>
            
            <!-- Report Period Filter -->
            <div class="glass-effect p-4 md:p-6 rounded-xl mb-6">
                <h3 class="text-lg font-semibold mb-4">Filter Periode Laporan</h3>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">Tanggal Mulai</label>
                        <input type="date" id="reportStartDate" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Tanggal Akhir</label>
                        <input type="date" id="reportEndDate" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none">
                    </div>
                    <div class="flex items-end">
                        <button onclick="clearReportDates()" class="w-full px-4 py-3 bg-gray-600/20 text-gray-300 rounded-lg hover:bg-gray-600/30 transition-all">Reset Filter</button>
                    </div>
                </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mb-6 md:mb-8">
                <button onclick="generateReport('balance-sheet')" class="glass-effect p-6 rounded-xl card-hover text-left">
                    <h3 class="text-xl font-semibold mb-2">Neraca</h3>
                    <p class="text-gray-300">Laporan posisi keuangan perusahaan</p>
                </button>
                <button onclick="generateReport('income-statement')" class="glass-effect p-6 rounded-xl card-hover text-left">
                    <h3 class="text-xl font-semibold mb-2">Laba Rugi</h3>
                    <p class="text-gray-300">Laporan pendapatan dan beban</p>
                </button>
                <button onclick="generateReport('cash-flow')" class="glass-effect p-6 rounded-xl card-hover text-left">
                    <h3 class="text-xl font-semibold mb-2">Arus Kas</h3>
                    <p class="text-gray-300">Laporan pergerakan kas</p>
                </button>
                <button onclick="generateReport('trial-balance')" class="glass-effect p-6 rounded-xl card-hover text-left">
                    <h3 class="text-xl font-semibold mb-2">Neraca Saldo</h3>
                    <p class="text-gray-300">Daftar saldo semua akun</p>
                </button>
                <button onclick="generateReport('general-ledger')" class="glass-effect p-6 rounded-xl card-hover text-left">
                    <h3 class="text-xl font-semibold mb-2">Buku Besar</h3>
                    <p class="text-gray-300">Detail transaksi per akun</p>
                </button>
            </div>

            <div id="reportContent" class="glass-effect p-6 rounded-xl hidden">
                <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4 space-y-2 sm:space-y-0">
                    <div>
                        <h3 id="reportTitle" class="text-xl font-semibold"></h3>
                        <p id="reportPeriod" class="text-sm text-gray-400"></p>
                    </div>
                    <button onclick="printReport()" class="px-4 py-2 bg-accent/20 text-accent rounded-lg hover:bg-accent/30 transition-all">Print</button>
                </div>
                <div id="reportData"></div>
            </div>
        </div>

        <!-- Settings Section -->
        <div id="settings" class="section hidden">
            <h2 class="text-2xl md:text-3xl font-bold mb-6">Pengaturan</h2>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6">
                <!-- Chart of Accounts -->
                <div class="glass-effect p-6 rounded-xl">
                    <h3 class="text-xl font-semibold mb-4">Chart of Accounts</h3>
                    <button onclick="showAccountForm()" class="mb-4 px-4 py-2 bg-primary/20 text-primary rounded-lg hover:bg-primary/30 transition-all">+ Tambah Akun</button>
                    
                    <div id="accountForm" class="mb-4 p-4 bg-white/5 rounded-lg hidden">
                        <form onsubmit="addAccount(event)" class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium mb-2">Kode Akun</label>
                                <input type="text" id="accountCode" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Nama Akun</label>
                                <input type="text" id="accountName" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Tipe Akun</label>
                                <select id="accountType" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                                    <option value="">Pilih Tipe</option>
                                    <option value="asset">Aset</option>
                                    <option value="liability">Liabilitas</option>
                                    <option value="equity">Modal</option>
                                    <option value="revenue">Pendapatan</option>
                                    <option value="expense">Beban</option>
                                </select>
                            </div>
                            <div class="flex space-x-4">
                                <button type="submit" class="px-4 py-2 bg-primary rounded-lg hover:bg-primary/80 transition-all">Simpan</button>
                                <button type="button" onclick="hideAccountForm()" class="px-4 py-2 bg-gray-600 rounded-lg hover:bg-gray-700 transition-all">Batal</button>
                            </div>
                        </form>
                    </div>
                    
                    <div class="max-h-64 overflow-y-auto">
                        <div id="accountList"></div>
                    </div>
                    
                    <!-- Edit Account Form -->
                    <div id="editAccountForm" class="mt-4 p-4 bg-white/5 rounded-lg hidden">
                        <h4 class="text-lg font-semibold mb-4">Edit Akun</h4>
                        <form onsubmit="updateAccount(event)" class="space-y-4">
                            <input type="hidden" id="editAccountOriginalCode">
                            <div>
                                <label class="block text-sm font-medium mb-2">Kode Akun</label>
                                <input type="text" id="editAccountCode" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Nama Akun</label>
                                <input type="text" id="editAccountName" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Tipe Akun</label>
                                <select id="editAccountType" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                                    <option value="">Pilih Tipe</option>
                                    <option value="asset">Aset</option>
                                    <option value="liability">Liabilitas</option>
                                    <option value="equity">Modal</option>
                                    <option value="revenue">Pendapatan</option>
                                    <option value="expense">Beban</option>
                                </select>
                            </div>
                            <div class="flex space-x-4">
                                <button type="submit" class="px-4 py-2 bg-primary rounded-lg hover:bg-primary/80 transition-all">Update</button>
                                <button type="button" onclick="hideEditAccountForm()" class="px-4 py-2 bg-gray-600 rounded-lg hover:bg-gray-700 transition-all">Batal</button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Depreciation Settings -->
                <div class="glass-effect p-6 rounded-xl">
                    <h3 class="text-xl font-semibold mb-4">Pengaturan Penyusutan</h3>
                    <form onsubmit="saveDepreciationSettings(event)">
                        <div class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium mb-2">Metode Penyusutan Default</label>
                                <select id="depreciationMethod" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none">
                                    <option value="straight-line">Garis Lurus</option>
                                    <option value="declining-balance">Saldo Menurun</option>
                                    <option value="sum-of-years">Jumlah Angka Tahun</option>
                                </select>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Periode Penyusutan</label>
                                <select id="depreciationPeriod" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none">
                                    <option value="monthly">Bulanan</option>
                                    <option value="yearly">Tahunan</option>
                                </select>
                            </div>
                            <button type="submit" class="w-full px-4 py-2 bg-primary rounded-lg hover:bg-primary/80 transition-all">Simpan Pengaturan</button>
                        </div>
                    </form>
                </div>

                <!-- User Management -->
                <div class="glass-effect p-6 rounded-xl" id="userManagement">
                    <h3 class="text-xl font-semibold mb-4">Manajemen User</h3>
                    <button onclick="showUserForm()" class="mb-4 px-4 py-2 bg-primary/20 text-primary rounded-lg hover:bg-primary/30 transition-all">+ Tambah User</button>
                    
                    <div id="userForm" class="mb-4 p-4 bg-white/5 rounded-lg hidden">
                        <form onsubmit="addUser(event)" class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium mb-2">Username</label>
                                <input type="text" id="newUsername" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Password</label>
                                <input type="password" id="newPassword" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Nama Lengkap</label>
                                <input type="text" id="newFullName" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Role</label>
                                <select id="newUserRole" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                                    <option value="">Pilih Role</option>
                                    <option value="admin">Admin - Akses penuh</option>
                                    <option value="user">User - Dapat input dan edit data</option>
                                    <option value="viewer">Viewer - Hanya dapat melihat</option>
                                </select>
                            </div>
                            <div class="flex space-x-4">
                                <button type="submit" class="px-4 py-2 bg-primary rounded-lg hover:bg-primary/80 transition-all">Simpan</button>
                                <button type="button" onclick="hideUserForm()" class="px-4 py-2 bg-gray-600 rounded-lg hover:bg-gray-700 transition-all">Batal</button>
                            </div>
                        </form>
                    </div>
                    
                    <div class="max-h-64 overflow-y-auto">
                        <div id="userList"></div>
                    </div>
                    
                    <!-- Edit User Form -->
                    <div id="editUserForm" class="mt-4 p-4 bg-white/5 rounded-lg hidden">
                        <h4 class="text-lg font-semibold mb-4">Edit User</h4>
                        <form onsubmit="updateUser(event)" class="space-y-4">
                            <input type="hidden" id="editUserOriginalUsername">
                            <div>
                                <label class="block text-sm font-medium mb-2">Username</label>
                                <input type="text" id="editUsername" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Password Baru (kosongkan jika tidak diubah)</label>
                                <input type="password" id="editPassword" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none">
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Nama Lengkap</label>
                                <input type="text" id="editFullName" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Role</label>
                                <select id="editUserRole" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                                    <option value="admin">Admin - Akses penuh</option>
                                    <option value="user">User - Dapat input dan edit data</option>
                                    <option value="viewer">Viewer - Hanya dapat melihat</option>
                                </select>
                            </div>
                            <div class="flex space-x-4">
                                <button type="submit" class="px-4 py-2 bg-primary rounded-lg hover:bg-primary/80 transition-all">Update</button>
                                <button type="button" onclick="hideEditUserForm()" class="px-4 py-2 bg-gray-600 rounded-lg hover:bg-gray-700 transition-all">Batal</button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Initial Settings -->
                <!-- Database Configuration -->
                <div class="glass-effect p-6 rounded-xl">
                    <h3 class="text-xl font-semibold mb-4">Konfigurasi Database</h3>
                    <div class="space-y-4">
                        <div class="flex items-center justify-between p-3 bg-white/5 rounded-lg">
                            <span>Status Koneksi:</span>
                            <span id="connectionStatus" class="px-3 py-1 rounded-full text-sm bg-red-500/20 text-red-400">Tidak Terhubung</span>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium mb-2">Google Apps Script Web App URL</label>
                            <input type="url" id="gasWebAppUrl" placeholder="https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none">
                        </div>
                        
                        <div class="flex space-x-4">
                            <button onclick="connectToGoogleSheets()" class="px-4 py-2 bg-green-500/20 text-green-400 rounded-lg hover:bg-green-500/30 transition-all">Hubungkan</button>
                            <button onclick="syncAllData()" class="px-4 py-2 bg-blue-500/20 text-blue-400 rounded-lg hover:bg-blue-500/30 transition-all">Sinkronkan Data</button>
                            <button onclick="loadAllData()" class="px-4 py-2 bg-purple-500/20 text-purple-400 rounded-lg hover:bg-purple-500/30 transition-all">Muat Data</button>
                        </div>
                        
                        <div class="text-sm text-gray-400">
                            <p class="mb-2"><strong>Langkah Setup Google Apps Script:</strong></p>
                            <ol class="list-decimal list-inside space-y-1 text-xs">
                                <li>Buka <a href="https://script.google.com" target="_blank" class="text-blue-400 hover:underline">script.google.com</a></li>
                                <li>Buat project baru dan salin kode Apps Script yang disediakan</li>
                                <li>Deploy sebagai Web App dengan akses "Anyone"</li>
                                <li>Salin URL Web App dan masukkan di atas</li>
                                <li>Klik "Hubungkan" untuk menghubungkan aplikasi</li>
                            </ol>
                        </div>
                    </div>
                </div>

                <div class="glass-effect p-6 rounded-xl">
                    <h3 class="text-xl font-semibold mb-4">Pengaturan Awal</h3>
                    <form onsubmit="saveInitialSettings(event)" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium mb-2">Tanggal Mulai Periode</label>
                            <input type="date" id="startDate" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">Nama Perusahaan</label>
                            <input type="text" id="companyName" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">Saldo Awal Kas</label>
                            <input type="number" id="initialCash" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" min="0" step="0.01">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">Mata Uang</label>
                            <select id="currency" class="w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none">
                                <option value="IDR">Rupiah (IDR)</option>
                                <option value="USD">US Dollar (USD)</option>
                                <option value="EUR">Euro (EUR)</option>
                            </select>
                        </div>
                        <div class="md:col-span-2">
                            <button type="submit" class="px-6 py-2 bg-gradient-to-r from-primary to-secondary rounded-lg font-semibold hover:shadow-lg transition-all">Simpan Pengaturan Awal</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    </div> <!-- End of mainApp -->

    <script>
        // Global variables
        let accounts = [];
        let transactions = [];
        let assets = [];
        let users = [];
        let currentUser = null;
        let settings = {
            depreciationMethod: 'straight-line',
            depreciationPeriod: 'monthly',
            startDate: '',
            companyName: '',
            initialCash: 0,
            currency: 'IDR'
        };

        // Google Apps Script Configuration
        const GAS_CONFIG = {
            webAppUrl: '', // Will be set after deployment
            isConnected: false
        };

        // Authentication and User Management
        function initializeDefaultUsers() {
            if (users.length === 0) {
                users = [
                    {
                        username: 'admin',
                        password: 'admin123',
                        fullName: 'Administrator',
                        role: 'admin'
                    },
                    {
                        username: 'user',
                        password: 'user123',
                        fullName: 'User Biasa',
                        role: 'user'
                    },
                    {
                        username: 'viewer',
                        password: 'viewer123',
                        fullName: 'Viewer Only',
                        role: 'viewer'
                    }
                ];
                updateUserList();
            }
        }

        function handleLogin(event) {
            event.preventDefault();
            
            const username = document.getElementById('loginUsername').value;
            const password = document.getElementById('loginPassword').value;
            
            const user = users.find(u => u.username === username && u.password === password);
            
            if (user) {
                currentUser = user;
                localStorage.setItem('currentUser', JSON.stringify(user));
                
                // Show main app and hide login
                document.getElementById('loginScreen').classList.add('hidden');
                document.getElementById('mainApp').classList.remove('hidden');
                
                // Update user info in navigation
                updateUserInfo();
                
                // Apply role-based access control
                applyRoleBasedAccess();
                
                showNotification(`Selamat datang, ${user.fullName}!`, 'success');
            } else {
                showNotification('Username atau password salah!', 'error');
            }
        }

        function logout() {
            currentUser = null;
            localStorage.removeItem('currentUser');
            
            // Hide main app and show login
            document.getElementById('mainApp').classList.add('hidden');
            document.getElementById('loginScreen').classList.remove('hidden');
            
            // Reset form
            document.getElementById('loginUsername').value = '';
            document.getElementById('loginPassword').value = '';
            
            showNotification('Anda telah logout', 'info');
        }

        function updateUserInfo() {
            if (!currentUser) return;
            
            const roleClass = `role-${currentUser.role}`;
            const roleName = {
                'admin': 'Admin',
                'user': 'User',
                'viewer': 'Viewer'
            }[currentUser.role];
            
            // Update desktop user info
            document.getElementById('currentUserName').textContent = currentUser.fullName;
            document.getElementById('currentUserRole').textContent = roleName;
            document.getElementById('currentUserRole').className = `role-badge ${roleClass}`;
            
            // Update mobile user info
            document.getElementById('mobileUserName').textContent = currentUser.fullName;
            document.getElementById('mobileUserRole').textContent = roleName;
            document.getElementById('mobileUserRole').className = `role-badge ${roleClass}`;
        }

        function applyRoleBasedAccess() {
            if (!currentUser) return;
            
            const isAdmin = currentUser.role === 'admin';
            const isUser = currentUser.role === 'user';
            const isViewer = currentUser.role === 'viewer';
            
            // Hide/show elements based on role
            const adminOnlyElements = document.querySelectorAll('#userManagement, #accountForm, #editAccountForm');
            const userElements = document.querySelectorAll('#transactionForm, #assetForm');
            const editButtons = document.querySelectorAll('button[onclick*="edit"], button[onclick*="delete"], button[onclick*="remove"]');
            const addButtons = document.querySelectorAll('button[onclick*="show"][onclick*="Form"], button[onclick*="add"]');
            
            // Admin can see everything
            if (isAdmin) {
                adminOnlyElements.forEach(el => el.style.display = 'block');
                userElements.forEach(el => el.style.display = 'block');
                editButtons.forEach(el => el.style.display = 'inline-block');
                addButtons.forEach(el => el.style.display = 'inline-block');
            }
            // User can input and edit data but not manage users/accounts
            else if (isUser) {
                adminOnlyElements.forEach(el => el.style.display = 'none');
                userElements.forEach(el => el.style.display = 'block');
                editButtons.forEach(el => {
                    // Allow edit/delete for transactions and assets only
                    if (el.onclick && (el.onclick.toString().includes('Transaction') || el.onclick.toString().includes('Asset'))) {
                        el.style.display = 'inline-block';
                    } else {
                        el.style.display = 'none';
                    }
                });
                addButtons.forEach(el => {
                    // Allow add for transactions and assets only
                    if (el.onclick && (el.onclick.toString().includes('Transaction') || el.onclick.toString().includes('Asset'))) {
                        el.style.display = 'inline-block';
                    } else {
                        el.style.display = 'none';
                    }
                });
            }
            // Viewer can only see data
            else if (isViewer) {
                adminOnlyElements.forEach(el => el.style.display = 'none');
                userElements.forEach(el => el.style.display = 'none');
                editButtons.forEach(el => el.style.display = 'none');
                addButtons.forEach(el => el.style.display = 'none');
            }
        }

        // User Management Functions
        function showUserForm() {
            if (currentUser.role !== 'admin') {
                showNotification('Hanya admin yang dapat mengelola user!', 'error');
                return;
            }
            document.getElementById('userForm').classList.remove('hidden');
        }

        function hideUserForm() {
            document.getElementById('userForm').classList.add('hidden');
            document.getElementById('userForm').querySelector('form').reset();
        }

        async function addUser(event) {
            event.preventDefault();
            
            if (currentUser.role !== 'admin') {
                showNotification('Hanya admin yang dapat menambah user!', 'error');
                return;
            }
            
            const username = document.getElementById('newUsername').value;
            const password = document.getElementById('newPassword').value;
            const fullName = document.getElementById('newFullName').value;
            const role = document.getElementById('newUserRole').value;
            
            if (users.find(u => u.username === username)) {
                showNotification('Username sudah ada!', 'error');
                return;
            }
            
            const newUser = { username, password, fullName, role };
            users.push(newUser);
            
            updateUserList();
            hideUserForm();
            
            // Auto-sync to Google Sheets if connected
            if (GAS_CONFIG.isConnected) {
                await saveToGoogleSheets('Users', users);
            }
            
            showNotification('User berhasil ditambahkan!', 'success');
        }

        function updateUserList() {
            const container = document.getElementById('userList');
            if (!container) return;
            
            container.innerHTML = users.map(user => `
                <div class="flex justify-between items-center p-3 bg-white/5 rounded-lg mb-2">
                    <div class="flex-1">
                        <div class="flex items-center space-x-2">
                            <span class="font-medium text-sm md:text-base">${user.fullName}</span>
                            <span class="role-badge role-${user.role}">${user.role.charAt(0).toUpperCase() + user.role.slice(1)}</span>
                        </div>
                        <div class="text-xs text-gray-400">@${user.username}</div>
                    </div>
                    <div class="flex space-x-2">
                        <button onclick="editUser('${user.username}')" class="text-blue-400 hover:text-blue-300 text-xs md:text-sm">Edit</button>
                        <button onclick="deleteUser('${user.username}')" class="text-red-400 hover:text-red-300 text-xs md:text-sm ${user.username === 'admin' ? 'opacity-50 cursor-not-allowed' : ''}">Hapus</button>
                    </div>
                </div>
            `).join('');
        }

        function editUser(username) {
            if (currentUser.role !== 'admin') {
                showNotification('Hanya admin yang dapat mengedit user!', 'error');
                return;
            }
            
            const user = users.find(u => u.username === username);
            if (!user) return;
            
            // Fill edit form
            document.getElementById('editUserOriginalUsername').value = username;
            document.getElementById('editUsername').value = user.username;
            document.getElementById('editPassword').value = '';
            document.getElementById('editFullName').value = user.fullName;
            document.getElementById('editUserRole').value = user.role;
            
            // Show edit form and hide add form
            hideUserForm();
            document.getElementById('editUserForm').classList.remove('hidden');
        }

        function hideEditUserForm() {
            document.getElementById('editUserForm').classList.add('hidden');
            document.getElementById('editUserForm').querySelector('form').reset();
        }

        async function updateUser(event) {
            event.preventDefault();
            
            if (currentUser.role !== 'admin') {
                showNotification('Hanya admin yang dapat mengupdate user!', 'error');
                return;
            }
            
            const originalUsername = document.getElementById('editUserOriginalUsername').value;
            const newUsername = document.getElementById('editUsername').value;
            const newPassword = document.getElementById('editPassword').value;
            const fullName = document.getElementById('editFullName').value;
            const role = document.getElementById('editUserRole').value;
            
            // Check if new username already exists (and it's not the same user)
            if (newUsername !== originalUsername && users.find(u => u.username === newUsername)) {
                showNotification('Username sudah ada!', 'error');
                return;
            }
            
            // Update user
            const userIndex = users.findIndex(u => u.username === originalUsername);
            if (userIndex !== -1) {
                users[userIndex].username = newUsername;
                users[userIndex].fullName = fullName;
                users[userIndex].role = role;
                
                // Update password only if provided
                if (newPassword.trim()) {
                    users[userIndex].password = newPassword;
                }
                
                // Update current user if editing self
                if (currentUser.username === originalUsername) {
                    currentUser = users[userIndex];
                    localStorage.setItem('currentUser', JSON.stringify(currentUser));
                    updateUserInfo();
                }
                
                updateUserList();
                hideEditUserForm();
                
                // Auto-sync to Google Sheets if connected
                if (GAS_CONFIG.isConnected) {
                    await saveToGoogleSheets('Users', users);
                }
                
                showNotification('User berhasil diupdate!', 'success');
            }
        }

        async function deleteUser(username) {
            if (currentUser.role !== 'admin') {
                showNotification('Hanya admin yang dapat menghapus user!', 'error');
                return;
            }
            
            if (username === 'admin') {
                showNotification('User admin tidak dapat dihapus!', 'error');
                return;
            }
            
            if (username === currentUser.username) {
                showNotification('Anda tidak dapat menghapus akun sendiri!', 'error');
                return;
            }
            
            if (confirm('Yakin ingin menghapus user ini?')) {
                users = users.filter(u => u.username !== username);
                updateUserList();
                
                // Auto-sync to Google Sheets if connected
                if (GAS_CONFIG.isConnected) {
                    await saveToGoogleSheets('Users', users);
                }
                
                showNotification('User berhasil dihapus!', 'success');
            }
        }

        // Google Apps Script Integration Functions
        async function callGoogleScript(functionName, data = {}) {
            if (!GAS_CONFIG.webAppUrl) {
                console.warn('Google Apps Script URL not configured');
                return null;
            }

            try {
                const response = await fetch(GAS_CONFIG.webAppUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        function: functionName,
                        data: data
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                return result;
            } catch (error) {
                console.error('Error calling Google Apps Script:', error);
                showNotification('Error koneksi ke database', 'error');
                return null;
            }
        }

        async function saveToGoogleSheets(sheetName, data) {
            return await callGoogleScript('saveData', { sheetName, data });
        }

        async function loadFromGoogleSheets(sheetName) {
            return await callGoogleScript('loadData', { sheetName });
        }

        async function syncAllData() {
            showNotification('Menyinkronkan data...', 'info');
            
            try {
                // Save all data to Google Sheets
                await Promise.all([
                    saveToGoogleSheets('Accounts', accounts),
                    saveToGoogleSheets('Transactions', transactions),
                    saveToGoogleSheets('Assets', assets),
                    saveToGoogleSheets('Users', users),
                    saveToGoogleSheets('Settings', [settings])
                ]);
                
                GAS_CONFIG.isConnected = true;
                updateConnectionStatus();
                showNotification('Data berhasil disinkronkan!', 'success');
            } catch (error) {
                console.error('Sync error:', error);
                showNotification('Gagal menyinkronkan data', 'error');
            }
        }

        async function loadAllData() {
            if (!GAS_CONFIG.webAppUrl) return;
            
            showNotification('Memuat data dari database...', 'info');
            
            try {
                const [accountsData, transactionsData, assetsData, usersData, settingsData] = await Promise.all([
                    loadFromGoogleSheets('Accounts'),
                    loadFromGoogleSheets('Transactions'),
                    loadFromGoogleSheets('Assets'),
                    loadFromGoogleSheets('Users'),
                    loadFromGoogleSheets('Settings')
                ]);

                if (accountsData && accountsData.length > 0) {
                    accounts = accountsData;
                    updateAccountList();
                    updateAccountSelects();
                }

                if (transactionsData && transactionsData.length > 0) {
                    transactions = transactionsData;
                    updateTransactionList();
                }

                if (assetsData && assetsData.length > 0) {
                    assets = assetsData;
                    updateAssetList();
                }

                if (usersData && usersData.length > 0) {
                    users = usersData;
                    updateUserList();
                }

                if (settingsData && settingsData.length > 0) {
                    settings = { ...settings, ...settingsData[0] };
                    loadSettingsToForm();
                }

                updateDashboard();
                GAS_CONFIG.isConnected = true;
                updateConnectionStatus();
                showNotification('Data berhasil dimuat dari database!', 'success');
            } catch (error) {
                console.error('Load error:', error);
                showNotification('Gagal memuat data dari database', 'error');
            }
        }

        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg transition-all duration-300 ${
                type === 'success' ? 'bg-green-500' : 
                type === 'error' ? 'bg-red-500' : 
                'bg-blue-500'
            } text-white`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.opacity = '0';
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 300);
            }, 3000);
        }

        function updateConnectionStatus() {
            const statusElement = document.getElementById('connectionStatus');
            if (statusElement) {
                statusElement.className = `px-3 py-1 rounded-full text-sm ${
                    GAS_CONFIG.isConnected ? 'bg-green-500/20 text-green-400' : 'bg-red-500/20 text-red-400'
                }`;
                statusElement.textContent = GAS_CONFIG.isConnected ? 'Terhubung' : 'Tidak Terhubung';
            }
        }

        function loadSettingsToForm() {
            document.getElementById('depreciationMethod').value = settings.depreciationMethod;
            document.getElementById('depreciationPeriod').value = settings.depreciationPeriod;
            document.getElementById('startDate').value = settings.startDate;
            document.getElementById('companyName').value = settings.companyName;
            document.getElementById('initialCash').value = settings.initialCash;
            document.getElementById('currency').value = settings.currency;
        }

        // Initialize default accounts
        function initializeDefaultAccounts() {
            const defaultAccounts = [
                { code: '1100', name: 'Kas', type: 'asset' },
                { code: '1200', name: 'Piutang Usaha', type: 'asset' },
                { code: '1300', name: 'Persediaan', type: 'asset' },
                { code: '1400', name: 'Peralatan', type: 'asset' },
                { code: '1500', name: 'Akumulasi Penyusutan Peralatan', type: 'asset' },
                { code: '2100', name: 'Utang Usaha', type: 'liability' },
                { code: '2200', name: 'Utang Bank', type: 'liability' },
                { code: '3100', name: 'Modal Pemilik', type: 'equity' },
                { code: '4100', name: 'Pendapatan Penjualan', type: 'revenue' },
                { code: '5100', name: 'Beban Gaji', type: 'expense' },
                { code: '5200', name: 'Beban Sewa', type: 'expense' },
                { code: '5300', name: 'Beban Penyusutan', type: 'expense' }
            ];
            
            if (accounts.length === 0) {
                accounts = defaultAccounts;
                updateAccountList();
                updateAccountSelects();
            }
        }

        // Navigation functions
        function toggleMobileMenu() {
            const mobileMenu = document.getElementById('mobileMenu');
            mobileMenu.classList.toggle('hidden');
        }

        function showSection(sectionName) {
            document.querySelectorAll('.section').forEach(section => {
                section.classList.add('hidden');
            });
            document.getElementById(sectionName).classList.remove('hidden');
            
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.classList.remove('active', 'bg-white/20');
            });
            event.target.classList.add('active', 'bg-white/20');
            
            // Hide mobile menu after selection
            const mobileMenu = document.getElementById('mobileMenu');
            if (!mobileMenu.classList.contains('hidden')) {
                mobileMenu.classList.add('hidden');
            }
        }

        // Transaction functions
        function showTransactionForm() {
            document.getElementById('transactionForm').classList.remove('hidden');
            document.getElementById('transactionDate').value = new Date().toISOString().split('T')[0];
        }

        function hideTransactionForm() {
            document.getElementById('transactionForm').classList.add('hidden');
            document.getElementById('transactionForm').querySelector('form').reset();
        }

        function addJournalEntry() {
            const entriesContainer = document.getElementById('journalEntries');
            const newEntry = document.createElement('div');
            newEntry.className = 'journal-entry grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-4 p-4 bg-white/5 rounded-lg';
            newEntry.innerHTML = `
                <div class="sm:col-span-2 lg:col-span-1">
                    <label class="block text-sm font-medium mb-2">Akun</label>
                    <select class="account-select w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" required>
                        <option value="">Pilih Akun</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Debit</label>
                    <input type="number" class="debit-amount w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" placeholder="0" min="0" step="0.01">
                </div>
                <div>
                    <label class="block text-sm font-medium mb-2">Kredit</label>
                    <input type="number" class="credit-amount w-full p-3 bg-white/10 border border-gray-600 rounded-lg focus:border-primary focus:outline-none" placeholder="0" min="0" step="0.01">
                </div>
                <div class="flex items-end">
                    <button type="button" onclick="removeJournalEntry(this)" class="w-full p-3 bg-red-500/20 text-red-400 rounded-lg hover:bg-red-500/30 transition-all text-sm">Hapus</button>
                </div>
            `;
            entriesContainer.appendChild(newEntry);
            updateAccountSelects();
        }

        function removeJournalEntry(button) {
            const entries = document.querySelectorAll('.journal-entry');
            if (entries.length > 1) {
                button.closest('.journal-entry').remove();
            }
        }

        async function addTransaction(event) {
            event.preventDefault();
            
            if (currentUser.role === 'viewer') {
                showNotification('Anda tidak memiliki akses untuk menambah transaksi!', 'error');
                return;
            }
            
            const date = document.getElementById('transactionDate').value;
            const ref = document.getElementById('transactionRef').value;
            const desc = document.getElementById('transactionDesc').value;
            
            const entries = [];
            let totalDebit = 0, totalCredit = 0;
            
            document.querySelectorAll('.journal-entry').forEach(entry => {
                const account = entry.querySelector('.account-select').value;
                const debit = parseFloat(entry.querySelector('.debit-amount').value) || 0;
                const credit = parseFloat(entry.querySelector('.credit-amount').value) || 0;
                
                if (account && (debit > 0 || credit > 0)) {
                    entries.push({ account, debit, credit });
                    totalDebit += debit;
                    totalCredit += credit;
                }
            });
            
            if (Math.abs(totalDebit - totalCredit) > 0.01) {
                alert('Total debit dan kredit harus seimbang!');
                return;
            }
            
            const transaction = {
                id: Date.now(),
                date,
                ref: ref || `TRX-${Date.now()}`,
                description: desc,
                entries,
                total: totalDebit
            };
            
            transactions.push(transaction);
            updateAllData();
            hideTransactionForm();
            
            // Auto-sync to Google Sheets if connected
            if (GAS_CONFIG.isConnected) {
                await saveToGoogleSheets('Transactions', transactions);
            }
            
            showNotification('Transaksi berhasil disimpan!', 'success');
        }

        function connectToGoogleSheets() {
            const url = document.getElementById('gasWebAppUrl').value.trim();
            if (!url) {
                showNotification('Masukkan URL Google Apps Script terlebih dahulu', 'error');
                return;
            }
            
            GAS_CONFIG.webAppUrl = url;
            localStorage.setItem('gasWebAppUrl', url);
            
            // Test connection
            loadAllData();
        }

        function updateTransactionList() {
            const tbody = document.getElementById('transactionList');
            if (transactions.length === 0) {
                tbody.innerHTML = '<tr class="border-b border-gray-700"><td class="py-2 md:py-3 text-gray-300 text-sm md:text-base" colspan="5">Belum ada transaksi</td></tr>';
                return;
            }
            
            tbody.innerHTML = transactions.map(transaction => `
                <tr class="border-b border-gray-700 hover:bg-white/5">
                    <td class="py-2 md:py-3 text-sm md:text-base">${new Date(transaction.date).toLocaleDateString('id-ID')}</td>
                    <td class="py-2 md:py-3 text-sm md:text-base">${transaction.ref}</td>
                    <td class="py-2 md:py-3 text-sm md:text-base">${transaction.description}</td>
                    <td class="py-2 md:py-3 text-right text-sm md:text-base">${formatCurrency(transaction.total)}</td>
                    <td class="py-2 md:py-3 text-center">
                        <div class="flex flex-col sm:flex-row justify-center space-y-1 sm:space-y-0 sm:space-x-2">
                            <button onclick="editTransaction(${transaction.id})" class="text-blue-400 hover:text-blue-300 text-xs md:text-sm">Edit</button>
                            <button onclick="deleteTransaction(${transaction.id})" class="text-red-400 hover:text-red-300 text-xs md:text-sm">Hapus</button>
                        </div>
                    </td>
                </tr>
            `).join('');
        }

        function editTransaction(id) {
            const transaction = transactions.find(t => t.id === id);
            if (!transaction) return;
            
            // Fill form with transaction data
            document.getElementById('transactionDate').value = transaction.date;
            document.getElementById('transactionRef').value = transaction.ref;
            document.getElementById('transactionDesc').value = transaction.description;
            
            // Clear existing journal entries
            const entriesContainer = document.getElementById('journalEntries');
            entriesContainer.innerHTML = '';
            
            // Add journal entries from transaction
            transaction.entries.forEach((entry, index) => {
                if (index === 0) {
                    // Use existing first entry
                    addJournalEntry();
                } else {
                    addJournalEntry();
                }
                
                const entryElements = entriesContainer.querySelectorAll('.journal-entry');
                const currentEntry = entryElements[index];
                
                currentEntry.querySelector('.account-select').value = entry.account;
                currentEntry.querySelector('.debit-amount').value = entry.debit || '';
                currentEntry.querySelector('.credit-amount').value = entry.credit || '';
            });
            
            // Show form and change submit behavior
            showTransactionForm();
            const form = document.getElementById('transactionForm').querySelector('form');
            form.onsubmit = function(event) {
                updateTransaction(event, id);
            };
            
            // Change form title
            document.querySelector('#transactionForm h3').textContent = 'Edit Transaksi';
            
            // Change button text
            document.querySelector('#transactionForm button[type="submit"]').textContent = 'Update Transaksi';
        }

        async function updateTransaction(event, id) {
            event.preventDefault();
            
            const date = document.getElementById('transactionDate').value;
            const ref = document.getElementById('transactionRef').value;
            const desc = document.getElementById('transactionDesc').value;
            
            const entries = [];
            let totalDebit = 0, totalCredit = 0;
            
            document.querySelectorAll('.journal-entry').forEach(entry => {
                const account = entry.querySelector('.account-select').value;
                const debit = parseFloat(entry.querySelector('.debit-amount').value) || 0;
                const credit = parseFloat(entry.querySelector('.credit-amount').value) || 0;
                
                if (account && (debit > 0 || credit > 0)) {
                    entries.push({ account, debit, credit });
                    totalDebit += debit;
                    totalCredit += credit;
                }
            });
            
            if (Math.abs(totalDebit - totalCredit) > 0.01) {
                alert('Total debit dan kredit harus seimbang!');
                return;
            }
            
            // Update transaction
            const transactionIndex = transactions.findIndex(t => t.id === id);
            if (transactionIndex !== -1) {
                transactions[transactionIndex] = {
                    id,
                    date,
                    ref: ref || `TRX-${id}`,
                    description: desc,
                    entries,
                    total: totalDebit
                };
                
                updateAllData();
                hideTransactionForm();
                
                // Reset form
                const form = document.getElementById('transactionForm').querySelector('form');
                form.onsubmit = function(event) {
                    addTransaction(event);
                };
                document.querySelector('#transactionForm h3').textContent = 'Form Transaksi Baru';
                document.querySelector('#transactionForm button[type="submit"]').textContent = 'Simpan Transaksi';
                
                // Auto-sync to Google Sheets if connected
                if (GAS_CONFIG.isConnected) {
                    await saveToGoogleSheets('Transactions', transactions);
                }
                
                showNotification('Transaksi berhasil diupdate!', 'success');
            }
        }

        async function deleteTransaction(id) {
            if (confirm('Yakin ingin menghapus transaksi ini?')) {
                transactions = transactions.filter(t => t.id !== id);
                updateAllData();
                
                // Auto-sync to Google Sheets if connected
                if (GAS_CONFIG.isConnected) {
                    await saveToGoogleSheets('Transactions', transactions);
                }
                
                showNotification('Transaksi berhasil dihapus!', 'success');
            }
        }

        // Asset functions
        function showAssetForm() {
            document.getElementById('assetForm').classList.remove('hidden');
            document.getElementById('assetDate').value = new Date().toISOString().split('T')[0];
        }

        function hideAssetForm() {
            document.getElementById('assetForm').classList.add('hidden');
            document.getElementById('assetForm').querySelector('form').reset();
        }

        async function addAsset(event) {
            event.preventDefault();
            
            if (currentUser.role === 'viewer') {
                showNotification('Anda tidak memiliki akses untuk menambah aset!', 'error');
                return;
            }
            
            const asset = {
                id: Date.now(),
                name: document.getElementById('assetName').value,
                category: document.getElementById('assetCategory').value,
                cost: parseFloat(document.getElementById('assetCost').value),
                date: document.getElementById('assetDate').value,
                life: parseInt(document.getElementById('assetLife').value),
                residual: parseFloat(document.getElementById('assetResidual').value) || 0
            };
            
            assets.push(asset);
            updateAllData();
            hideAssetForm();
            
            // Auto-sync to Google Sheets if connected
            if (GAS_CONFIG.isConnected) {
                await saveToGoogleSheets('Assets', assets);
            }
            
            showNotification('Aset berhasil ditambahkan!', 'success');
        }

        function calculateDepreciation(asset) {
            const today = new Date();
            const assetDate = new Date(asset.date);
            const monthsElapsed = (today.getFullYear() - assetDate.getFullYear()) * 12 + (today.getMonth() - assetDate.getMonth());
            
            const depreciableAmount = asset.cost - asset.residual;
            const totalMonths = asset.life * 12;
            
            let accumulatedDepreciation = 0;
            
            if (settings.depreciationMethod === 'straight-line') {
                const monthlyDepreciation = depreciableAmount / totalMonths;
                accumulatedDepreciation = Math.min(monthlyDepreciation * monthsElapsed, depreciableAmount);
            }
            
            return accumulatedDepreciation;
        }

        function updateAssetList() {
            const tbody = document.getElementById('assetList');
            if (assets.length === 0) {
                tbody.innerHTML = '<tr class="border-b border-gray-700"><td class="py-3 text-gray-300" colspan="6">Belum ada aset</td></tr>';
                return;
            }
            
            tbody.innerHTML = assets.map(asset => {
                const accumulatedDepreciation = calculateDepreciation(asset);
                const bookValue = asset.cost - accumulatedDepreciation;
                
                return `
                    <tr class="border-b border-gray-700 hover:bg-white/5">
                        <td class="py-3">${asset.name}</td>
                        <td class="py-3 capitalize">${asset.category}</td>
                        <td class="py-3 text-right">${formatCurrency(asset.cost)}</td>
                        <td class="py-3 text-right">${formatCurrency(accumulatedDepreciation)}</td>
                        <td class="py-3 text-right">${formatCurrency(bookValue)}</td>
                        <td class="py-3 text-center">
                            <button onclick="deleteAsset(${asset.id})" class="text-red-400 hover:text-red-300">Hapus</button>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        async function deleteAsset(id) {
            if (confirm('Yakin ingin menghapus aset ini?')) {
                assets = assets.filter(a => a.id !== id);
                updateAllData();
                
                // Auto-sync to Google Sheets if connected
                if (GAS_CONFIG.isConnected) {
                    await saveToGoogleSheets('Assets', assets);
                }
                
                showNotification('Aset berhasil dihapus!', 'success');
            }
        }

        // Account functions
        function showAccountForm() {
            document.getElementById('accountForm').classList.remove('hidden');
        }

        function hideAccountForm() {
            document.getElementById('accountForm').classList.add('hidden');
            document.getElementById('accountForm').querySelector('form').reset();
        }

        async function addAccount(event) {
            event.preventDefault();
            
            if (currentUser.role !== 'admin') {
                showNotification('Hanya admin yang dapat menambah akun!', 'error');
                return;
            }
            
            const account = {
                code: document.getElementById('accountCode').value,
                name: document.getElementById('accountName').value,
                type: document.getElementById('accountType').value
            };
            
            if (accounts.find(a => a.code === account.code)) {
                showNotification('Kode akun sudah ada!', 'error');
                return;
            }
            
            accounts.push(account);
            updateAllData();
            hideAccountForm();
            
            // Auto-sync to Google Sheets if connected
            if (GAS_CONFIG.isConnected) {
                await saveToGoogleSheets('Accounts', accounts);
            }
            
            showNotification('Akun berhasil ditambahkan!', 'success');
        }

        function updateAccountList() {
            const container = document.getElementById('accountList');
            container.innerHTML = accounts.map(account => `
                <div class="flex justify-between items-center p-3 bg-white/5 rounded-lg mb-2">
                    <div class="flex-1">
                        <span class="font-medium text-sm md:text-base">${account.code} - ${account.name}</span>
                        <span class="text-xs md:text-sm text-gray-400 ml-2 capitalize">(${account.type})</span>
                    </div>
                    <div class="flex space-x-2">
                        <button onclick="editAccount('${account.code}')" class="text-blue-400 hover:text-blue-300 text-xs md:text-sm">Edit</button>
                        <button onclick="deleteAccount('${account.code}')" class="text-red-400 hover:text-red-300 text-xs md:text-sm">Hapus</button>
                    </div>
                </div>
            `).join('');
        }

        function editAccount(code) {
            const account = accounts.find(a => a.code === code);
            if (!account) return;
            
            // Fill edit form
            document.getElementById('editAccountOriginalCode').value = code;
            document.getElementById('editAccountCode').value = account.code;
            document.getElementById('editAccountName').value = account.name;
            document.getElementById('editAccountType').value = account.type;
            
            // Show edit form and hide add form
            hideAccountForm();
            document.getElementById('editAccountForm').classList.remove('hidden');
        }

        function hideEditAccountForm() {
            document.getElementById('editAccountForm').classList.add('hidden');
            document.getElementById('editAccountForm').querySelector('form').reset();
        }

        async function updateAccount(event) {
            event.preventDefault();
            
            const originalCode = document.getElementById('editAccountOriginalCode').value;
            const newCode = document.getElementById('editAccountCode').value;
            const name = document.getElementById('editAccountName').value;
            const type = document.getElementById('editAccountType').value;
            
            // Check if new code already exists (and it's not the same account)
            if (newCode !== originalCode && accounts.find(a => a.code === newCode)) {
                showNotification('Kode akun sudah ada!', 'error');
                return;
            }
            
            // Update account
            const accountIndex = accounts.findIndex(a => a.code === originalCode);
            if (accountIndex !== -1) {
                accounts[accountIndex] = { code: newCode, name, type };
                
                // Update any transactions that use this account
                transactions.forEach(transaction => {
                    transaction.entries.forEach(entry => {
                        if (entry.account === originalCode) {
                            entry.account = newCode;
                        }
                    });
                });
                
                updateAllData();
                hideEditAccountForm();
                
                // Auto-sync to Google Sheets if connected
                if (GAS_CONFIG.isConnected) {
                    await Promise.all([
                        saveToGoogleSheets('Accounts', accounts),
                        saveToGoogleSheets('Transactions', transactions)
                    ]);
                }
                
                showNotification('Akun berhasil diupdate!', 'success');
            }
        }

        async function deleteAccount(code) {
            if (confirm('Yakin ingin menghapus akun ini?')) {
                // Check if account is used in transactions
                const isUsed = transactions.some(transaction => 
                    transaction.entries.some(entry => entry.account === code)
                );
                
                if (isUsed) {
                    showNotification('Akun tidak dapat dihapus karena sudah digunakan dalam transaksi!', 'error');
                    return;
                }
                
                accounts = accounts.filter(a => a.code !== code);
                updateAllData();
                
                // Auto-sync to Google Sheets if connected
                if (GAS_CONFIG.isConnected) {
                    await saveToGoogleSheets('Accounts', accounts);
                }
                
                showNotification('Akun berhasil dihapus!', 'success');
            }
        }

        function updateAccountSelects() {
            const selects = document.querySelectorAll('.account-select');
            const options = accounts.map(account => 
                `<option value="${account.code}">${account.code} - ${account.name}</option>`
            ).join('');
            
            selects.forEach(select => {
                const currentValue = select.value;
                select.innerHTML = '<option value="">Pilih Akun</option>' + options;
                select.value = currentValue;
            });
        }

        // Settings functions
        async function saveDepreciationSettings(event) {
            event.preventDefault();
            
            settings.depreciationMethod = document.getElementById('depreciationMethod').value;
            settings.depreciationPeriod = document.getElementById('depreciationPeriod').value;
            
            updateAllData();
            
            // Auto-sync to Google Sheets if connected
            if (GAS_CONFIG.isConnected) {
                await saveToGoogleSheets('Settings', [settings]);
            }
            
            showNotification('Pengaturan penyusutan berhasil disimpan!', 'success');
        }

        async function saveInitialSettings(event) {
            event.preventDefault();
            
            settings.startDate = document.getElementById('startDate').value;
            settings.companyName = document.getElementById('companyName').value;
            settings.initialCash = parseFloat(document.getElementById('initialCash').value) || 0;
            settings.currency = document.getElementById('currency').value;
            
            updateAllData();
            
            // Auto-sync to Google Sheets if connected
            if (GAS_CONFIG.isConnected) {
                await saveToGoogleSheets('Settings', [settings]);
            }
            
            showNotification('Pengaturan awal berhasil disimpan!', 'success');
        }

        // Report functions
        function generateReport(reportType) {
            const reportContent = document.getElementById('reportContent');
            const reportTitle = document.getElementById('reportTitle');
            const reportPeriod = document.getElementById('reportPeriod');
            const reportData = document.getElementById('reportData');
            
            const startDate = document.getElementById('reportStartDate').value;
            const endDate = document.getElementById('reportEndDate').value;
            
            // Set period text
            let periodText = 'Semua Periode';
            if (startDate && endDate) {
                periodText = `Periode: ${new Date(startDate).toLocaleDateString('id-ID')} - ${new Date(endDate).toLocaleDateString('id-ID')}`;
            } else if (startDate) {
                periodText = `Mulai: ${new Date(startDate).toLocaleDateString('id-ID')}`;
            } else if (endDate) {
                periodText = `Sampai: ${new Date(endDate).toLocaleDateString('id-ID')}`;
            }
            
            reportContent.classList.remove('hidden');
            reportPeriod.textContent = periodText;
            
            switch (reportType) {
                case 'balance-sheet':
                    reportTitle.textContent = 'Neraca';
                    reportData.innerHTML = generateBalanceSheet(startDate, endDate);
                    break;
                case 'income-statement':
                    reportTitle.textContent = 'Laporan Laba Rugi';
                    reportData.innerHTML = generateIncomeStatement(startDate, endDate);
                    break;
                case 'cash-flow':
                    reportTitle.textContent = 'Laporan Arus Kas';
                    reportData.innerHTML = generateCashFlow(startDate, endDate);
                    break;
                case 'trial-balance':
                    reportTitle.textContent = 'Neraca Saldo';
                    reportData.innerHTML = generateTrialBalance(startDate, endDate);
                    break;
                case 'general-ledger':
                    reportTitle.textContent = 'Buku Besar';
                    reportData.innerHTML = generateGeneralLedger(startDate, endDate);
                    break;
            }
        }

        function clearReportDates() {
            document.getElementById('reportStartDate').value = '';
            document.getElementById('reportEndDate').value = '';
        }

        function generateBalanceSheet(startDate = null, endDate = null) {
            const balances = calculateAccountBalances(startDate, endDate);
            const assetAccounts = accounts.filter(a => a.type === 'asset');
            const liabilityAccounts = accounts.filter(a => a.type === 'liability');
            const equityAccounts = accounts.filter(a => a.type === 'equity');
            
            let totalAssets = 0;
            let totalLiabilities = 0;
            let totalEquity = 0;
            
            // Calculate revenue and expense for retained earnings
            const revenueAccounts = accounts.filter(a => a.type === 'revenue');
            const expenseAccounts = accounts.filter(a => a.type === 'expense');
            let totalRevenue = 0;
            let totalExpense = 0;
            
            revenueAccounts.forEach(account => {
                totalRevenue += balances[account.code] || 0;
            });
            
            expenseAccounts.forEach(account => {
                totalExpense += balances[account.code] || 0;
            });
            
            const retainedEarnings = totalRevenue - totalExpense;
            
            return `
                <div class="space-y-6">
                    <div>
                        <h4 class="text-lg font-semibold mb-3 text-green-400">ASET</h4>
                        <div class="space-y-2">
                            ${assetAccounts.map(account => {
                                const balance = balances[account.code] || 0;
                                totalAssets += balance;
                                return balance !== 0 ? `<div class="flex justify-between">
                                    <span>${account.name}</span>
                                    <span>${formatCurrency(balance)}</span>
                                </div>` : '';
                            }).filter(item => item).join('')}
                            
                            ${assets.map(asset => {
                                const bookValue = asset.cost - calculateDepreciation(asset);
                                totalAssets += bookValue;
                                return `<div class="flex justify-between">
                                    <span>${asset.name} (Nilai Buku)</span>
                                    <span>${formatCurrency(bookValue)}</span>
                                </div>`;
                            }).join('')}
                            
                            ${!balances['1100'] && settings.initialCash > 0 ? `<div class="flex justify-between">
                                <span>Kas Awal</span>
                                <span>${formatCurrency(settings.initialCash)}</span>
                            </div>` : ''}
                            
                            <div class="border-t border-gray-600 pt-2 flex justify-between font-semibold">
                                <span>Total Aset</span>
                                <span>${formatCurrency(totalAssets + (!balances['1100'] ? settings.initialCash : 0))}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h4 class="text-lg font-semibold mb-3 text-red-400">LIABILITAS</h4>
                        <div class="space-y-2">
                            ${liabilityAccounts.map(account => {
                                const balance = balances[account.code] || 0;
                                totalLiabilities += balance;
                                return balance !== 0 ? `<div class="flex justify-between">
                                    <span>${account.name}</span>
                                    <span>${formatCurrency(balance)}</span>
                                </div>` : '';
                            }).filter(item => item).join('')}
                            
                            ${totalLiabilities === 0 ? '<div class="flex justify-between"><span>Tidak ada liabilitas</span><span>Rp 0</span></div>' : ''}
                            
                            <div class="border-t border-gray-600 pt-2 flex justify-between font-semibold">
                                <span>Total Liabilitas</span>
                                <span>${formatCurrency(totalLiabilities)}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h4 class="text-lg font-semibold mb-3 text-blue-400">MODAL</h4>
                        <div class="space-y-2">
                            ${equityAccounts.map(account => {
                                const balance = balances[account.code] || 0;
                                totalEquity += balance;
                                return balance !== 0 ? `<div class="flex justify-between">
                                    <span>${account.name}</span>
                                    <span>${formatCurrency(balance)}</span>
                                </div>` : '';
                            }).filter(item => item).join('')}
                            
                            ${retainedEarnings !== 0 ? `<div class="flex justify-between">
                                <span>Laba Ditahan</span>
                                <span>${formatCurrency(retainedEarnings)}</span>
                            </div>` : ''}
                            
                            <div class="border-t border-gray-600 pt-2 flex justify-between font-semibold">
                                <span>Total Modal</span>
                                <span>${formatCurrency(totalEquity + retainedEarnings)}</span>
                            </div>
                            
                            <div class="border-t border-gray-600 pt-2 flex justify-between font-bold text-lg">
                                <span>Total Liabilitas + Modal</span>
                                <span>${formatCurrency(totalLiabilities + totalEquity + retainedEarnings)}</span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        function generateIncomeStatement(startDate = null, endDate = null) {
            const balances = calculateAccountBalances(startDate, endDate);
            const revenueAccounts = accounts.filter(a => a.type === 'revenue');
            const expenseAccounts = accounts.filter(a => a.type === 'expense');
            
            let totalRevenue = 0;
            let totalExpense = 0;
            
            return `
                <div class="space-y-6">
                    <div>
                        <h4 class="text-lg font-semibold mb-3 text-green-400">PENDAPATAN</h4>
                        <div class="space-y-2">
                            ${revenueAccounts.map(account => {
                                const balance = balances[account.code] || 0;
                                totalRevenue += balance;
                                return balance !== 0 ? `<div class="flex justify-between">
                                    <span>${account.name}</span>
                                    <span>${formatCurrency(balance)}</span>
                                </div>` : '';
                            }).filter(item => item).join('')}
                            
                            ${totalRevenue === 0 ? '<div class="flex justify-between"><span>Belum ada pendapatan</span><span>Rp 0</span></div>' : ''}
                            
                            <div class="border-t border-gray-600 pt-2 flex justify-between font-semibold">
                                <span>Total Pendapatan</span>
                                <span>${formatCurrency(totalRevenue)}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h4 class="text-lg font-semibold mb-3 text-red-400">BEBAN</h4>
                        <div class="space-y-2">
                            ${expenseAccounts.map(account => {
                                const balance = balances[account.code] || 0;
                                totalExpense += balance;
                                return balance !== 0 ? `<div class="flex justify-between">
                                    <span>${account.name}</span>
                                    <span>${formatCurrency(balance)}</span>
                                </div>` : '';
                            }).filter(item => item).join('')}
                            
                            ${totalExpense === 0 ? '<div class="flex justify-between"><span>Belum ada beban</span><span>Rp 0</span></div>' : ''}
                            
                            <div class="border-t border-gray-600 pt-2 flex justify-between font-semibold">
                                <span>Total Beban</span>
                                <span>${formatCurrency(totalExpense)}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="border-t border-gray-600 pt-4">
                        <div class="flex justify-between font-bold text-lg">
                            <span>Laba Bersih</span>
                            <span class="${(totalRevenue - totalExpense) >= 0 ? 'text-green-400' : 'text-red-400'}">${formatCurrency(totalRevenue - totalExpense)}</span>
                        </div>
                    </div>
                </div>
            `;
        }

        function generateCashFlow(startDate = null, endDate = null) {
            const balances = calculateAccountBalances(startDate, endDate);
            const cashAccount = accounts.find(a => a.code === '1100');
            const cashBalance = balances['1100'] || 0;
            
            // Filter transactions for the period
            const filteredTransactions = transactions.filter(transaction => {
                if (!startDate && !endDate) return true;
                const transactionDate = new Date(transaction.date);
                const start = startDate ? new Date(startDate) : new Date('1900-01-01');
                const end = endDate ? new Date(endDate) : new Date('2100-12-31');
                return transactionDate >= start && transactionDate <= end;
            });
            
            let operatingCashFlow = 0;
            let investingCashFlow = 0;
            let financingCashFlow = 0;
            
            // Analyze cash flows from transactions
            filteredTransactions.forEach(transaction => {
                transaction.entries.forEach(entry => {
                    if (entry.account === '1100') { // Cash account
                        const amount = (entry.debit || 0) - (entry.credit || 0);
                        const otherEntry = transaction.entries.find(e => e.account !== '1100');
                        if (otherEntry) {
                            const otherAccount = accounts.find(a => a.code === otherEntry.account);
                            if (otherAccount) {
                                if (otherAccount.type === 'revenue' || otherAccount.type === 'expense') {
                                    operatingCashFlow += amount;
                                } else if (otherAccount.type === 'asset' && otherAccount.code !== '1100') {
                                    investingCashFlow += amount;
                                } else {
                                    financingCashFlow += amount;
                                }
                            }
                        }
                    }
                });
            });
            
            const netCashFlow = operatingCashFlow + investingCashFlow + financingCashFlow;
            
            return `
                <div class="space-y-6">
                    <div>
                        <h4 class="text-lg font-semibold mb-3 text-blue-400">ARUS KAS OPERASI</h4>
                        <div class="space-y-2">
                            <div class="flex justify-between">
                                <span>Arus Kas dari Aktivitas Operasi</span>
                                <span class="${operatingCashFlow >= 0 ? 'text-green-400' : 'text-red-400'}">${formatCurrency(operatingCashFlow)}</span>
                            </div>
                            <div class="border-t border-gray-600 pt-2 flex justify-between font-semibold">
                                <span>Arus Kas Bersih dari Operasi</span>
                                <span class="${operatingCashFlow >= 0 ? 'text-green-400' : 'text-red-400'}">${formatCurrency(operatingCashFlow)}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h4 class="text-lg font-semibold mb-3 text-purple-400">ARUS KAS INVESTASI</h4>
                        <div class="space-y-2">
                            <div class="flex justify-between">
                                <span>Arus Kas dari Aktivitas Investasi</span>
                                <span class="${investingCashFlow >= 0 ? 'text-green-400' : 'text-red-400'}">${formatCurrency(investingCashFlow)}</span>
                            </div>
                            <div class="border-t border-gray-600 pt-2 flex justify-between font-semibold">
                                <span>Arus Kas Bersih dari Investasi</span>
                                <span class="${investingCashFlow >= 0 ? 'text-green-400' : 'text-red-400'}">${formatCurrency(investingCashFlow)}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h4 class="text-lg font-semibold mb-3 text-yellow-400">ARUS KAS PENDANAAN</h4>
                        <div class="space-y-2">
                            <div class="flex justify-between">
                                <span>Arus Kas dari Aktivitas Pendanaan</span>
                                <span class="${financingCashFlow >= 0 ? 'text-green-400' : 'text-red-400'}">${formatCurrency(financingCashFlow)}</span>
                            </div>
                            <div class="border-t border-gray-600 pt-2 flex justify-between font-semibold">
                                <span>Arus Kas Bersih dari Pendanaan</span>
                                <span class="${financingCashFlow >= 0 ? 'text-green-400' : 'text-red-400'}">${formatCurrency(financingCashFlow)}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="border-t border-gray-600 pt-4">
                        <div class="flex justify-between font-bold text-lg">
                            <span>Kenaikan (Penurunan) Kas Bersih</span>
                            <span class="${netCashFlow >= 0 ? 'text-green-400' : 'text-red-400'}">${formatCurrency(netCashFlow)}</span>
                        </div>
                        <div class="flex justify-between mt-2">
                            <span>Saldo Kas Akhir Periode</span>
                            <span>${formatCurrency(cashBalance + (!balances['1100'] ? settings.initialCash : 0))}</span>
                        </div>
                    </div>
                </div>
            `;
        }

        function generateTrialBalance(startDate = null, endDate = null) {
            const balances = calculateAccountBalances(startDate, endDate);
            let totalDebit = 0;
            let totalCredit = 0;
            
            return `
                <div class="overflow-x-auto">
                    <table class="w-full min-w-[600px]">
                        <thead>
                            <tr class="border-b border-gray-600">
                                <th class="text-left py-3">Kode</th>
                                <th class="text-left py-3">Nama Akun</th>
                                <th class="text-right py-3">Debit</th>
                                <th class="text-right py-3">Kredit</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${accounts.map(account => {
                                const balance = balances[account.code] || 0;
                                let debitAmount = 0;
                                let creditAmount = 0;
                                
                                if (balance > 0) {
                                    if (account.type === 'asset' || account.type === 'expense') {
                                        debitAmount = balance;
                                        totalDebit += balance;
                                    } else {
                                        creditAmount = balance;
                                        totalCredit += balance;
                                    }
                                } else if (balance < 0) {
                                    if (account.type === 'asset' || account.type === 'expense') {
                                        creditAmount = Math.abs(balance);
                                        totalCredit += Math.abs(balance);
                                    } else {
                                        debitAmount = Math.abs(balance);
                                        totalDebit += Math.abs(balance);
                                    }
                                }
                                
                                return (debitAmount !== 0 || creditAmount !== 0) ? `
                                    <tr class="border-b border-gray-700">
                                        <td class="py-2">${account.code}</td>
                                        <td class="py-2">${account.name}</td>
                                        <td class="py-2 text-right">${debitAmount > 0 ? formatCurrency(debitAmount) : '-'}</td>
                                        <td class="py-2 text-right">${creditAmount > 0 ? formatCurrency(creditAmount) : '-'}</td>
                                    </tr>
                                ` : '';
                            }).filter(item => item).join('')}
                            
                            <tr class="border-t-2 border-gray-500 font-bold">
                                <td class="py-3" colspan="2">TOTAL</td>
                                <td class="py-3 text-right">${formatCurrency(totalDebit)}</td>
                                <td class="py-3 text-right">${formatCurrency(totalCredit)}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            `;
        }

        function generateGeneralLedger(startDate = null, endDate = null) {
            // Filter transactions by date
            const filteredTransactions = transactions.filter(transaction => {
                if (!startDate && !endDate) return true;
                const transactionDate = new Date(transaction.date);
                const start = startDate ? new Date(startDate) : new Date('1900-01-01');
                const end = endDate ? new Date(endDate) : new Date('2100-12-31');
                return transactionDate >= start && transactionDate <= end;
            });
            
            return `
                <div class="space-y-6">
                    ${accounts.map(account => {
                        const accountTransactions = [];
                        let runningBalance = 0;
                        
                        filteredTransactions.forEach(transaction => {
                            transaction.entries.forEach(entry => {
                                if (entry.account === account.code) {
                                    const debit = entry.debit || 0;
                                    const credit = entry.credit || 0;
                                    
                                    // Calculate running balance based on account type
                                    if (account.type === 'asset' || account.type === 'expense') {
                                        runningBalance += debit - credit;
                                    } else {
                                        runningBalance += credit - debit;
                                    }
                                    
                                    accountTransactions.push({
                                        date: transaction.date,
                                        ref: transaction.ref,
                                        description: transaction.description,
                                        debit,
                                        credit,
                                        balance: runningBalance
                                    });
                                }
                            });
                        });
                        
                        return accountTransactions.length > 0 ? `
                            <div class="glass-effect p-4 rounded-lg">
                                <h5 class="font-semibold mb-3">${account.code} - ${account.name}</h5>
                                <div class="overflow-x-auto">
                                    <table class="w-full min-w-[700px] text-sm">
                                        <thead>
                                            <tr class="border-b border-gray-600">
                                                <th class="text-left py-2">Tanggal</th>
                                                <th class="text-left py-2">Ref</th>
                                                <th class="text-left py-2">Deskripsi</th>
                                                <th class="text-right py-2">Debit</th>
                                                <th class="text-right py-2">Kredit</th>
                                                <th class="text-right py-2">Saldo</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${accountTransactions.map(trans => `
                                                <tr class="border-b border-gray-700">
                                                    <td class="py-1">${new Date(trans.date).toLocaleDateString('id-ID')}</td>
                                                    <td class="py-1">${trans.ref}</td>
                                                    <td class="py-1">${trans.description}</td>
                                                    <td class="py-1 text-right">${trans.debit > 0 ? formatCurrency(trans.debit) : '-'}</td>
                                                    <td class="py-1 text-right">${trans.credit > 0 ? formatCurrency(trans.credit) : '-'}</td>
                                                    <td class="py-1 text-right font-medium">${formatCurrency(trans.balance)}</td>
                                                </tr>
                                            `).join('')}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        ` : '';
                    }).filter(item => item).join('')}
                    
                    ${accounts.every(account => {
                        return !filteredTransactions.some(transaction => 
                            transaction.entries.some(entry => entry.account === account.code)
                        );
                    }) ? '<div class="text-center text-gray-400 py-8">Tidak ada transaksi untuk periode yang dipilih</div>' : ''}
                </div>
            `;
        }

        function printReport() {
            window.print();
        }

        // Dashboard functions
        function updateDashboard() {
            const balances = calculateAccountBalances();
            
            let totalAssets = 0;
            let totalLiabilities = 0;
            let totalEquity = 0;
            let totalRevenue = 0;
            let totalExpense = 0;
            
            // Calculate totals from account balances
            accounts.forEach(account => {
                const balance = balances[account.code] || 0;
                switch (account.type) {
                    case 'asset':
                        totalAssets += balance;
                        break;
                    case 'liability':
                        totalLiabilities += balance;
                        break;
                    case 'equity':
                        totalEquity += balance;
                        break;
                    case 'revenue':
                        totalRevenue += balance;
                        break;
                    case 'expense':
                        totalExpense += balance;
                        break;
                }
            });
            
            // Add asset book values
            assets.forEach(asset => {
                const bookValue = asset.cost - calculateDepreciation(asset);
                totalAssets += bookValue;
            });
            
            // Add initial cash if not already in transactions
            if (!balances['1100']) {
                totalAssets += settings.initialCash;
            }
            
            const monthlyProfit = totalRevenue - totalExpense;
            totalEquity += monthlyProfit; // Add retained earnings
            
            document.getElementById('totalAssets').textContent = formatCurrency(totalAssets);
            document.getElementById('totalLiabilities').textContent = formatCurrency(totalLiabilities);
            document.getElementById('totalEquity').textContent = formatCurrency(totalEquity);
            document.getElementById('monthlyProfit').textContent = formatCurrency(monthlyProfit);
            
            // Update recent transactions
            const recentTransactions = document.getElementById('recentTransactions');
            if (transactions.length === 0) {
                recentTransactions.innerHTML = '<tr class="border-b border-gray-700"><td class="py-3 text-gray-300" colspan="5">Belum ada transaksi</td></tr>';
            } else {
                const recent = transactions.slice(-5).reverse();
                recentTransactions.innerHTML = recent.map(transaction => {
                    const firstEntry = transaction.entries[0];
                    return `
                        <tr class="border-b border-gray-700">
                            <td class="py-3">${new Date(transaction.date).toLocaleDateString('id-ID')}</td>
                            <td class="py-3">${transaction.description}</td>
                            <td class="py-3">${accounts.find(a => a.code === firstEntry.account)?.name || firstEntry.account}</td>
                            <td class="py-3 text-right">${firstEntry.debit > 0 ? formatCurrency(firstEntry.debit) : '-'}</td>
                            <td class="py-3 text-right">${firstEntry.credit > 0 ? formatCurrency(firstEntry.credit) : '-'}</td>
                        </tr>
                    `;
                }).join('');
            }
        }

        // Calculate account balances from all transactions
        function calculateAccountBalances(startDate = null, endDate = null) {
            const balances = {};
            
            // Initialize all accounts with zero balance
            accounts.forEach(account => {
                balances[account.code] = 0;
            });
            
            // Filter transactions by date if specified
            const filteredTransactions = transactions.filter(transaction => {
                if (!startDate && !endDate) return true;
                const transactionDate = new Date(transaction.date);
                const start = startDate ? new Date(startDate) : new Date('1900-01-01');
                const end = endDate ? new Date(endDate) : new Date('2100-12-31');
                return transactionDate >= start && transactionDate <= end;
            });
            
            // Calculate balances
            filteredTransactions.forEach(transaction => {
                transaction.entries.forEach(entry => {
                    const account = accounts.find(a => a.code === entry.account);
                    if (account) {
                        // For assets, expenses: debit increases balance
                        // For liabilities, equity, revenue: credit increases balance
                        if (account.type === 'asset' || account.type === 'expense') {
                            balances[entry.account] += (entry.debit || 0) - (entry.credit || 0);
                        } else {
                            balances[entry.account] += (entry.credit || 0) - (entry.debit || 0);
                        }
                    }
                });
            });
            
            return balances;
        }

        // Utility functions
        function formatCurrency(amount) {
            return new Intl.NumberFormat('id-ID', {
                style: 'currency',
                currency: settings.currency
            }).format(amount);
        }

        // Update all related data when changes occur
        function updateAllData() {
            updateDashboard();
            updateTransactionList();
            updateAssetList();
            updateAccountList();
            updateAccountSelects();
        }

        // Initialize application
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize default data
            initializeDefaultUsers();
            initializeDefaultAccounts();
            
            // Check if user is already logged in
            const savedUser = localStorage.getItem('currentUser');
            if (savedUser) {
                try {
                    currentUser = JSON.parse(savedUser);
                    // Verify user still exists in users array
                    const userExists = users.find(u => u.username === currentUser.username);
                    if (userExists) {
                        // Show main app
                        document.getElementById('loginScreen').classList.add('hidden');
                        document.getElementById('mainApp').classList.remove('hidden');
                        updateUserInfo();
                        applyRoleBasedAccess();
                    } else {
                        // User no longer exists, logout
                        logout();
                    }
                } catch (error) {
                    // Invalid saved user data, logout
                    logout();
                }
            }
            
            updateAllData();
            updateConnectionStatus();
            
            // Load saved Google Apps Script URL
            const savedUrl = localStorage.getItem('gasWebAppUrl');
            if (savedUrl) {
                const urlInput = document.getElementById('gasWebAppUrl');
                if (urlInput) {
                    urlInput.value = savedUrl;
                    GAS_CONFIG.webAppUrl = savedUrl;
                    // Auto-load data if URL is saved and user is logged in
                    if (currentUser) {
                        setTimeout(() => {
                            loadAllData();
                        }, 1000);
                    }
                }
            }
            
            // Set default values
            const startDateInput = document.getElementById('startDate');
            const companyNameInput = document.getElementById('companyName');
            const initialCashInput = document.getElementById('initialCash');
            
            if (startDateInput) startDateInput.value = new Date().toISOString().split('T')[0];
            if (companyNameInput) companyNameInput.value = 'PT. Contoh Perusahaan';
            if (initialCashInput) initialCashInput.value = '10000000';
            
            // Set default report dates to current month
            const today = new Date();
            const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
            const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);
            
            const reportStartInput = document.getElementById('reportStartDate');
            const reportEndInput = document.getElementById('reportEndDate');
            
            if (reportStartInput) reportStartInput.value = firstDay.toISOString().split('T')[0];
            if (reportEndInput) reportEndInput.value = lastDay.toISOString().split('T')[0];
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'96f5b0d744a0fd33',t:'MTc1NTIyOTQzOC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
